import connectDB from '~/server/utils/mongodb'
import MKB from '~/server/models/MKB'
import Drug from '~/server/models/Drug'
import Instruction from '~/server/models/Instruction'
import LocalStatus from '~/server/models/LocalStatus'
import Category from '~/server/models/Category'
import LocalStatusCategory from '~/server/models/LocalStatusCategory'
import Substation from '~/server/models/Substation'
import Feedback from '~/server/models/Feedback'
import { mockHubAI } from '~/server/utils/mockAI'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function generateContextualSuggestions(searchTerm: string, results: any[]): string[] {
  const suggestions: string[] = []
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
  const isTraumaContext = /—Ç—Ä–∞–≤–º|–ø–µ—Ä–µ–ª–æ–º|—É—à–∏–±|—Ä–∞–Ω–∞|–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏|–æ–∂–æ–≥|–ø–æ—Ä–µ–∑|—Å—Å–∞–¥–∏–Ω|–≥–µ–º–∞—Ç–æ–º|–≤—ã–≤–∏—Ö|—Ä–∞—Å—Ç—è–∂–µ–Ω–∏/i.test(searchTerm)
  const isDiagnosisContext = results.some(r => r.type === 'mkb' || r.type === 'codifier')
  const isDrugContext = results.some(r => r.type === 'drug')
  const isEmergencyContext = /–Ω–µ–æ—Ç–ª–æ–∂–Ω|—ç–∫—Å—Ç—Ä–µ–Ω–Ω|—Å—Ä–æ—á–Ω|–∫—Ä–∏—Ç–∏—á–µ—Å–∫|—Ä–µ–∞–Ω–∏–º–∞—Ü–∏|—à–æ–∫|–æ—Å—Ç–∞–Ω–æ–≤–∫|–ø—Ä–∏—Å—Ç—É–ø/i.test(searchTerm)
  const isSubstationContext = results.some(r => r.type === 'substation') || /–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏|—Å—Ç–∞–Ω—Ü–∏|–∞–¥—Ä–µ—Å|—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä.*\d+/i.test(searchTerm)
  
  // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  if (isDiagnosisContext) {
    suggestions.push('–¢–∞–∫—Ç–∏–∫–∞ –ª–µ—á–µ–Ω–∏—è')
  }
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∞–≤–º
  if (isTraumaContext) {
    suggestions.push('–õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
  }
  
  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–µ–æ—Ç–ª–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (isEmergencyContext) {
    suggestions.push('–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–∞')
  } else if (!isSubstationContext) {
    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–∞" –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è—Ö
    suggestions.push('–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–∞')
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  if (isDrugContext) {
    suggestions.push('–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã')
  } else if (isDiagnosisContext) {
    suggestions.push('–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')
  } else if (isSubstationContext) {
    suggestions.push('–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏')
  }
  
  // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ (–Ω–æ –Ω–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π)
  if (suggestions.length < 3 && !isSubstationContext) {
    const generalSuggestions = [
      '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      '–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π',
      '–ü–æ–∫–∞–∑–∞–Ω–∏—è –∫ –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏'
    ]
    
    for (const suggestion of generalSuggestions) {
      if (!suggestions.includes(suggestion) && suggestions.length < 4) {
        suggestions.push(suggestion)
      }
    }
  }
  
  return suggestions.slice(0, 4) // –ú–∞–∫—Å–∏–º—É–º 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
}

export default defineEventHandler(async (event) => {
  const { query: searchTerm } = await readBody(event)

  if (!searchTerm || searchTerm.length < 2) {
    return {
      success: false,
      results: [],
      message: '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞'
    }
  }

  await connectDB()

  try {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 4-–∑–Ω–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–æ–¥—ã —Å—Ç–∞–Ω—Ü–∏–π)
    const fourDigitCodeMatch = searchTerm.match(/^(\d{4})$/)
    if (fourDigitCodeMatch) {
      const stationCode = fourDigitCodeMatch[1]
      console.log(`API: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –ø–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏: ${stationCode}`)
      
      const relevantCodes = await MKB.find({
        $or: [
          { stationCode: stationCode },
          { stationCode: `${stationCode}*` },
          { stationCode: new RegExp(`^${stationCode}`, 'i') }
        ]
      }).populate('category').lean()
      
      if (relevantCodes.length > 0) {
        const introMessages = [
          '–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:',
          '–ù–∞—à—ë–ª —Ç–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î:',
          '–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:',
          '–ü–æ–¥–±–æ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:'
        ];
        const randomIntro = introMessages[Math.floor(Math.random() * introMessages.length)];
        
        let response = `${randomIntro}\n\n`
        response += `<mkb-cards>\n`
        relevantCodes.forEach((code: any) => {
          const mkbCode = (code.mkbCode || '–ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω').toString().trim()
          const codeName = (code.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ').toString().trim()
          const categoryName = (code.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏').toString().trim()
          const codeNote = (code.note || '').toString().trim()
          const stationCode = (code.stationCode || '').toString().trim()
          
          if (mkbCode.length > 0 && mkbCode !== 'undefined' && 
              codeName.length > 0 && codeName !== 'undefined' && codeName !== ',' &&
              !mkbCode.includes('|') && !codeName.includes('|')) {
            response += `${mkbCode}|${codeName}|${categoryName}|${codeNote}|${stationCode}\n`
          }
        })
        response += `</mkb-cards>\n\n`
        
        return {
          success: true,
          results: [], // No regular results for this specific query
          message: response,
          suggestions: [], // No quick replies for this specific query
          query: searchTerm,
          aiAnalysis: true
        }
      } else {
        const introMessages = [
          '–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:',
          '–ù–∞—à—ë–ª —Ç–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î:',
          '–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:',
          '–ü–æ–¥–±–æ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:'
        ];
        const randomIntro = introMessages[Math.floor(Math.random() * introMessages.length)];
        
        return {
          success: true,
          results: [],
          message: `${randomIntro}\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ú–ö–ë –∫–æ–¥–æ–≤ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationCode}.`,
          suggestions: [],
          query: searchTerm,
          aiAnalysis: true
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI
    const learningData = await Feedback.find({
      $or: [
        { question: { $regex: searchTerm, $options: 'i' } },
        { answer: { $regex: searchTerm, $options: 'i' } }
      ]
    })
    .sort({ createdAt: -1 })
    .limit(10)
    .select('question answer rating userComment')

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –ë–î
    const [mkbData, drugData, instructionData, localStatusData, categoryData, localStatusCategoryData, substationData] = await Promise.all([
      MKB.find({}).populate('category').lean(),
      Drug.find({}).lean(),
      Instruction.find({}).lean(),
      LocalStatus.find({}).populate('category').lean(),
      Category.find({}).lean(),
      LocalStatusCategory.find({}).lean(),
      Substation.find({}).lean()
    ])

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –ë–î
    // –ü–µ—Ä–µ–¥–∞–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò:', {
      mkb: mkbData.length,
      drugs: drugData.length,
      instructions: instructionData.length,
      localStatuses: localStatusData.length,
      substations: substationData.length
    })
    
    const databaseContext = {
      mkb: mkbData.map(item => ({
        id: item._id.toString(),
        name: item.name,
        mkbCode: item.mkbCode,
        stationCode: item.stationCode,
        note: item.note,
        category: item.category?.name
      })),
      drugs: drugData.map(item => ({
        id: item._id.toString(),
        name: item.name,
        latinName: item.latinName,
        description: item.description?.substring(0, 200),
        synonyms: item.synonyms,
        forms: item.forms,
        pediatricDose: item.pediatricDose,
        ageRestrictions: item.ageRestrictions,
        pediatricDoseUnit: item.pediatricDoseUnit
      })),
      instructions: instructionData.map(item => ({
        id: item._id.toString(),
        title: item.title,
        content: item.content?.substring(0, 300)
      })),
      localStatuses: localStatusData.map(item => ({
        id: item._id.toString(),
        name: item.name,
        encoding: item.encoding,
        description: item.description,
        note: item.note,
        category: item.category?.name
      })),
      substations: substationData.map(item => ({
        id: item._id.toString(),
        name: item.name,
        address: item.address,
        phone: item.phone
      }))
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞
    let aiResponse = null
    let aiAnalysisAvailable = false
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—É—á–µ–Ω–∏—è
    const learningContext = learningData.length > 0 ? `
–î–ê–ù–ù–´–ï –û–ë–£–ß–ï–ù–ò–Ø (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):
${learningData.map(feedback => `
–í–æ–ø—Ä–æ—Å: ${feedback.question}
–û—Ç–≤–µ—Ç: ${feedback.answer}
–û—Ü–µ–Ω–∫–∞: ${feedback.rating === 'positive' ? 'üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è' : 'üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è'}
${feedback.userComment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${feedback.userComment}` : ''}
`).join('\n')}

–í–ê–ñ–ù–û: –£—á—Ç–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å—Ç–∏–ª—å. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ - –∏–∑–±–µ–≥–∞–π —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.

` : ''

    // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: GigaChat -> hubAI -> Mock AI
    let aiProvider = 'mock'
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º GigaChat
      const { gigaChatAI } = await import('~/server/utils/gigachatAI')
      const gigaChat = gigaChatAI()
      
      // –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è GigaChat
      const searchLower = searchTerm.toLowerCase()
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ú–ö–ë –∫–æ–¥–æ–≤ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
      let relevantMkb = []
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π
      const medicalExpansions = {
        '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç': ['–ø–∞–Ω–∫—Ä–µ–∞—Ç', '–ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω', 'K85', 'K86'],
        '–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏': ['–≥–∏–ø–µ—Ä—Ç–µ–Ω–∑', '–¥–∞–≤–ª–µ–Ω–∏', 'I10', 'I11', 'I15'],
        '–¥–∏–∞–±–µ—Ç': ['—Å–∞—Ö–∞—Ä–Ω', 'E10', 'E11', 'E14'],
        '–∏–Ω—Ñ–∞—Ä–∫—Ç': ['–º–∏–æ–∫–∞—Ä–¥', 'I21', 'I22', 'I25'],
        '—è–∑–≤–∞': ['—è–∑–≤–µ–Ω–Ω', '–ø–µ–ø—Ç–∏—á–µ—Å–∫', 'K25', 'K26', 'K27', 'K28'],
        '–∞–ø–ø–µ–Ω–¥–∏—Ü–∏—Ç': ['–∞–ø–ø–µ–Ω–¥–∏–∫—Å', '—á–µ—Ä–≤–µ–æ–±—Ä–∞–∑–Ω', 'K35', 'K36', 'K37']
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è—Ö
      const substationMatch = searchLower.match(/–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è.*?(\d+)|(\d+).*?–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è/i)
      const nearbyMatch = /–±–ª–∏–∂–∞–π—à|–±–ª–∏–∑–∫|—Ä—è–¥–æ–º|–æ–∫–æ–ª–æ|–≤–æ–∑–ª–µ/i.test(searchLower) && /–ø–æ–¥—Å—Ç–∞–Ω—Ü/i.test(searchLower)
      let relevantSubstations = []
      
      if (substationMatch) {
        const stationNumber = substationMatch[1] || substationMatch[2]
        console.log('üè• –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–æ–º–µ—Ä:', stationNumber)
        
        // –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É
        relevantSubstations = databaseContext.substations.filter(station => 
          station.name?.includes(`‚Ññ ${stationNumber}`) || 
          station.name?.includes(`‚Ññ${stationNumber}`) ||
          station.name?.includes(`–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ${stationNumber}`) ||
          station.name?.endsWith(` ${stationNumber}`)
        )
        
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π:', relevantSubstations.length)
      } else if (nearbyMatch) {
        console.log('üìç –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π')
        // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è—Ö - –±–µ—Ä–µ–º –≤—Å–µ, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        relevantSubstations = databaseContext.substations.slice(0, 20)
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      let searchTerms = [searchLower]
      for (const [term, expansions] of Object.entries(medicalExpansions)) {
        if (searchLower.includes(term)) {
          searchTerms.push(...expansions)
          break
        }
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º
      relevantMkb = databaseContext.mkb.filter(item => {
        return searchTerms.some(term => 
          item.name?.toLowerCase().includes(term) ||
          item.mkbCode?.toLowerCase().includes(term) ||
          item.note?.toLowerCase().includes(term) ||
          item.category?.name?.toLowerCase().includes(term)
        )
      }).slice(0, 100)  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
      
      // –ï—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
      const finalMkb = relevantMkb.length > 5 ? relevantMkb : 
        [...relevantMkb, ...databaseContext.mkb.slice(0, 50 - relevantMkb.length)]
      
      // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
      const relevantDrugs = databaseContext.drugs.filter(item =>
        item.name?.toLowerCase().includes(searchLower) ||
        item.latinName?.toLowerCase().includes(searchLower) ||
        item.description?.toLowerCase().includes(searchLower)
      ).slice(0, 15)
      
      const finalDrugs = relevantDrugs.length > 5 ? relevantDrugs :
        [...relevantDrugs, ...databaseContext.drugs.slice(0, 15 - relevantDrugs.length)]

      // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
      const finalSubstations = relevantSubstations.length > 0 ? 
        [...relevantSubstations, ...databaseContext.substations.slice(0, 10 - relevantSubstations.length)] :
        databaseContext.substations.slice(0, 15)

      const limitedContext = {
        mkb: finalMkb,
        drugs: finalDrugs,
        instructions: databaseContext.instructions.slice(0, 10),
        localStatuses: databaseContext.localStatuses.slice(0, 10),
        substations: finalSubstations
      }

      const aiPrompt = `
–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –°–ú–ü. –û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–æ –°–¢–†–û–ì–û –ø–æ –¥–∞–Ω–Ω—ã–º –ë–î.

–ó–ê–ü–†–û–°: "${searchTerm}"

${learningContext}

–ë–î:
–ú–ö–ë (${limitedContext.mkb.length}): ${JSON.stringify(limitedContext.mkb, null, 1)}
–ü–†–ï–ü–ê–†–ê–¢–´ (${limitedContext.drugs.length}): ${JSON.stringify(limitedContext.drugs, null, 1)}
–ò–ù–°–¢–†–£–ö–¶–ò–ò (${limitedContext.instructions.length}): ${JSON.stringify(limitedContext.instructions, null, 1)}
–°–¢–ê–¢–£–°–´ (${limitedContext.localStatuses.length}): ${JSON.stringify(limitedContext.localStatuses, null, 1)}
–ü–û–î–°–¢–ê–ù–¶–ò–ò (${limitedContext.substations.length}): ${JSON.stringify(limitedContext.substations, null, 1)}

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç—ã –∏–∑ –ë–î
- –î–æ–±–∞–≤–ª—è–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –±–µ—Å–µ–¥—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
- –î–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π: —Ç–æ—á–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É, –Ω–µ –ø—É—Ç–∞–π —Ü–∏—Ñ—Ä—ã!
- –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ "–±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏": –∏—Å–ø–æ–ª—å–∑—É–π <geolocation-request>–î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è</geolocation-request>
- –§–æ—Ä–º–∞—Ç—ã: <mkb-cards>–∫–æ–¥|–Ω–∞–∑–≤–∞–Ω–∏–µ|–∫–∞—Ç–µ–≥–æ—Ä–∏—è|–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ|—Å—Ç–∞–Ω—Ü–∏—è</mkb-cards> –∏–ª–∏ <substation-cards>–Ω–∞–∑–≤–∞–Ω–∏–µ|–∞–¥—Ä–µ—Å|—Ç–µ–ª–µ—Ñ–æ–Ω—ã|–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</substation-cards>
`

      console.log('üìè GigaChat: –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞:', aiPrompt.length, '—Å–∏–º–≤–æ–ª–æ–≤')
      console.log('üîç GigaChat: –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ú–ö–ë –∫–æ–¥–æ–≤:', relevantMkb.length)
      console.log('üìã GigaChat: –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:', searchTerms)
      
      aiResponse = await gigaChat.run('GigaChat', {
        prompt: aiPrompt,
        max_tokens: 800  // –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
      })
      aiAnalysisAvailable = true
      aiProvider = 'gigachat'
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GigaChat AI')
      
    } catch (gigaChatError) {
      console.log('‚ö†Ô∏è GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', gigaChatError.message)
      
      try {
        // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å hubAI
        const ai = hubAI()
        const aiPrompt = `
–¢—ã - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∫–æ—Ä–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏ (–°–ú–ü). 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "${searchTerm}"

${learningContext}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

–ë–ê–ó–ê –î–ê–ù–ù–´–•:
–ú–ö–ë –∫–æ–¥—ã: ${JSON.stringify(databaseContext.mkb)}
–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã: ${JSON.stringify(databaseContext.drugs)}
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${JSON.stringify(databaseContext.instructions)}
–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: ${JSON.stringify(databaseContext.localStatuses)}
–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏: ${JSON.stringify(databaseContext.substations)}

–ó–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ù–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
–ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—à—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –∏—Ö ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
`

        aiResponse = await ai.run('@cf/meta/llama-3.1-8b-instruct', {
          prompt: aiPrompt,
          max_tokens: 1000
        })
        aiAnalysisAvailable = true
        aiProvider = 'hubai'
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hubAI')
        
      } catch (hubAiError) {
        console.log('‚ö†Ô∏è hubAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', hubAiError.message)
        console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º Mock AI')
        
        // Fallback –Ω–∞ mock AI
        try {
          const mockAI = mockHubAI()
          const aiPrompt = `
–¢—ã - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∫–æ—Ä–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏ (–°–ú–ü). 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "${searchTerm}"

${learningContext}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

–ë–ê–ó–ê –î–ê–ù–ù–´–•:
–ú–ö–ë –∫–æ–¥—ã: ${JSON.stringify(databaseContext.mkb)}
–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã: ${JSON.stringify(databaseContext.drugs)}
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${JSON.stringify(databaseContext.instructions)}
–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: ${JSON.stringify(databaseContext.localStatuses)}
–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏: ${JSON.stringify(databaseContext.substations)}

–ó–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ù–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
–ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—à—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –∏—Ö ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
`
          
          // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ mock AI
          aiResponse = await mockAI.run('@cf/meta/llama-3.1-8b-instruct', {
            prompt: aiPrompt,
            max_tokens: 1000,
            // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
            realData: {
              drugs: drugData,
              mkb: mkbData,
              instructions: instructionData,
              localStatuses: localStatusData,
              substations: substationData,
              learningData: learningData // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
            }
          })
          aiAnalysisAvailable = true
          aiProvider = 'mock'
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock AI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ë–î')
        } catch (mockError) {
          console.log('‚ùå Mock AI —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', mockError.message)
          aiAnalysisAvailable = false
        }
      }
    }

    // –¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const results: any[] = []
    const searchRegex = new RegExp(searchTerm, 'i')

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ú–ö–ë —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
    const mkbSearchConditions = [
      { name: searchRegex },
      { mkbCode: searchRegex },
      { stationCode: searchRegex },
      { note: searchRegex }
    ]
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏
    const stationCodeMatch = searchTerm.match(/(\d{4})/i)
    if (stationCodeMatch && /\d{4}.*–∫–æ–¥|\d{4}.*–¥–∏–∞–≥–Ω–æ–∑|—Å—Ç–∞–Ω—Ü–∏—è.*\d{4}|–∫–æ–¥.*—Å—Ç–∞–Ω—Ü–∏/i.test(searchTerm)) {
      const stationCode = stationCodeMatch[1]
      mkbSearchConditions.push(
        { stationCode: new RegExp(`^${stationCode}`, 'i') },
        { stationCode: new RegExp(stationCode, 'i') }
      )
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã
    const { comprehensiveMedicalSynonyms } = await import('~/server/utils/comprehensiveMedicalSynonyms')
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    const medicalTerms: { [key: string]: string[] } = {}
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    Object.entries(comprehensiveMedicalSynonyms).forEach(([area, data]: [string, any]) => {
      const { primary, secondary, conditions } = data
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –æ–±–ª–∞—Å—Ç–∏
      primary.forEach((term: string) => {
        if (!medicalTerms[term]) medicalTerms[term] = []
        medicalTerms[term].push(...primary, ...secondary.slice(0, 3), ...conditions.slice(0, 5))
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è/–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
      conditions.forEach((condition: string) => {
        if (!medicalTerms[condition]) medicalTerms[condition] = []
        medicalTerms[condition].push(...conditions.slice(0, 3), ...primary.slice(0, 2))
      })
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const basicTerms = {
      '–∞–ø–ø–µ–Ω–¥–∏—Ü–∏—Ç': ['–∞–ø–ø–µ–Ω–¥–∏—Ü–∏—Ç', '–∞–ø–ø–µ–Ω–¥–∏–∫—Å', '—á–µ—Ä–≤–µ–æ–±—Ä–∞–∑–Ω'],
      '–∏–Ω—Å—É–ª—å—Ç': ['–∏–Ω—Å—É–ª—å—Ç', '–∫—Ä–æ–≤–æ–∏–∑–ª–∏—è–Ω–∏–µ', '–∏–Ω—Ñ–∞—Ä–∫—Ç –º–æ–∑–≥–∞', '—Ü–µ—Ä–µ–±—Ä–æ–≤–∞—Å–∫—É–ª—è—Ä–Ω', '–û–ù–ú–ö', '–æ—Å—Ç—Ä–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –º–æ–∑–≥–æ–≤–æ–≥–æ –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è'],
      '–û–ù–ú–ö': ['–û–ù–ú–ö', '–æ–Ω–º–∫', '–æ—Å—Ç—Ä–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –º–æ–∑–≥–æ–≤–æ–≥–æ –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è', '–∏–Ω—Å—É–ª—å—Ç', '–∫—Ä–æ–≤–æ–∏–∑–ª–∏—è–Ω–∏–µ', '—Ü–µ—Ä–µ–±—Ä–∞–ª—å–Ω', '–º–æ–∑–≥'],
      '–∏–Ω—Ñ–∞—Ä–∫—Ç': ['–∏–Ω—Ñ–∞—Ä–∫—Ç', '–º–∏–æ–∫–∞—Ä–¥', '–∫–æ—Ä–æ–Ω–∞—Ä–Ω', '—Å–µ—Ä–¥–µ—á–Ω', '–û–ö–°', '–æ—Å—Ç—Ä—ã–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º'],
      '–û–ö–°': ['–û–ö–°', '–æ–∫—Å', '–æ—Å—Ç—Ä—ã–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º', '–∏–Ω—Ñ–∞—Ä–∫—Ç', '–º–∏–æ–∫–∞—Ä–¥', '–∫–æ—Ä–æ–Ω–∞—Ä–Ω', '–∏—à–µ–º–∏—á–µ—Å–∫', '—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏'],
      '–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è': ['–≥–∏–ø–µ—Ä—Ç–µ–Ω–∑', '–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏', '–¥–∞–≤–ª–µ–Ω–∏', '–∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω'],
      '–¥–∏–∞–±–µ—Ç': ['–¥–∏–∞–±–µ—Ç', '—Å–∞—Ö–∞—Ä–Ω', '–≥–ª—é–∫–æ–∑'],
      '–ø–Ω–µ–≤–º–æ–Ω–∏—è': ['–ø–Ω–µ–≤–º–æ–Ω–∏', '–≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ –ª–µ–≥–∫–∏—Ö', '–ª–µ–≥–æ—á–Ω'],
      '–≥–∞—Å—Ç—Ä–∏—Ç': ['–≥–∞—Å—Ç—Ä–∏—Ç', '–∂–µ–ª—É–¥–æ–∫', '–≥–∞—Å—Ç—Ä–æ'],
      '–±—Ä–æ–Ω—Ö–∏—Ç': ['–±—Ä–æ–Ω—Ö–∏—Ç', '–±—Ä–æ–Ω—Ö', '–¥—ã—Ö–∞—Ç–µ–ª—å–Ω'],
      '—è–∑–≤–∞': ['—è–∑–≤–∞', '—è–∑–≤–µ–Ω–Ω', '–ø–µ–ø—Ç–∏—á–µ—Å–∫', '—ç—Ä–æ–∑–∏–≤–Ω', '–¥—É–æ–¥–µ–Ω–∞–ª—å–Ω'],
      '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç': ['–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç', '–ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω', '–ø–∞–Ω–∫—Ä–µ–∞—Å'],
      '—Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç': ['—Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç', '–∂–µ–ª—á–Ω', '—Ö–æ–ª–µ–¥–æ—Ö']
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
    Object.entries(basicTerms).forEach(([key, synonyms]) => {
      if (!medicalTerms[key]) medicalTerms[key] = []
      medicalTerms[key].push(...synonyms)
      medicalTerms[key] = [...new Set(medicalTerms[key])] // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    })
    
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
    for (const [term, synonyms] of Object.entries(medicalTerms)) {
      if (new RegExp(term, 'i').test(searchTerm)) {
        synonyms.forEach(synonym => {
          mkbSearchConditions.push(
            { name: new RegExp(synonym, 'i') },
            { note: new RegExp(synonym, 'i') }
          )
        })
      }
    }
    
    const mkbResults = await MKB.find({
      $or: mkbSearchConditions
    }).populate('category').limit(10) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è

    mkbResults.forEach(item => {
      results.push({
        id: item._id.toString(),
        title: item.name,
        description: `–ú–ö–ë: ${item.mkbCode} | –°—Ç–∞–Ω—Ü–∏—è: ${item.stationCode}`,
        type: 'mkb',
        url: `/codifier/${item.category?.url}?open=${item._id}`,
        codes: {
          mkbCode: item.mkbCode,
          stationCode: item.stationCode
        },
        data: item
      })
    })

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Drugs —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏
    const drugSearchTerms = searchTerm.toLowerCase().split(/\s+/)
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
    const specialDrugPatterns = [
      { pattern: /(—ç—É—Ñ–∏–ª–ª–∏–Ω|eufillin)/i, terms: ['—ç—É—Ñ–∏–ª–ª–∏–Ω', '–∞–º–∏–Ω–æ—Ñ–∏–ª–ª–∏–Ω', 'aminophylline', '—Ç–µ–æ—Ñ–∏–ª–ª–∏–Ω'] },
      { pattern: /(–∞–º–∏–Ω–æ—Ñ–∏–ª–ª–∏–Ω|aminophylline)/i, terms: ['–∞–º–∏–Ω–æ—Ñ–∏–ª–ª–∏–Ω', '—ç—É—Ñ–∏–ª–ª–∏–Ω', 'aminophylline', '—Ç–µ–æ—Ñ–∏–ª–ª–∏–Ω'] },
      { pattern: /(—Ç–µ–æ—Ñ–∏–ª–ª–∏–Ω|theophylline)/i, terms: ['—Ç–µ–æ—Ñ–∏–ª–ª–∏–Ω', '—ç—É—Ñ–∏–ª–ª–∏–Ω', '–∞–º–∏–Ω–æ—Ñ–∏–ª–ª–∏–Ω', 'theophylline'] }
    ]
    
    let searchQueries = [
      { name: searchRegex },
      { latinName: searchRegex },
      { synonyms: searchRegex },
      { description: searchRegex },
      // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      ...drugSearchTerms.map(term => ({ name: new RegExp(term, 'i') })),
      // –ü–æ–∏—Å–∫ –ø–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
      ...drugSearchTerms.map(term => ({ latinName: new RegExp(term, 'i') })),
      // –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
      ...drugSearchTerms.map(term => ({ synonyms: new RegExp(term, 'i') }))
    ]
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞
    for (const special of specialDrugPatterns) {
      if (special.pattern.test(searchTerm)) {
        for (const term of special.terms) {
          searchQueries.push(
            { name: new RegExp(term, 'i') },
            { latinName: new RegExp(term, 'i') },
            { synonyms: new RegExp(term, 'i') }
          )
        }
        break
      }
    }
    
    const drugResults = await Drug.find({
      $and: [
        { $or: searchQueries },
        // –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
        {
          name: { 
            $not: /^(–≤–æ–¥–∞ –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–π|–Ω–∞—Ç—Ä–∏—è —Ö–ª–æ—Ä–∏–¥|–≥–ª—é–∫–æ–∑–∞|—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Ç–≤–æ—Ä)$/i 
          }
        }
      ]
    }).limit(10)

    drugResults.forEach(item => {
      results.push({
        id: item._id.toString(),
        title: item.name,
        description: item.latinName ? `–õ–∞—Ç.: ${item.latinName}` : item.description?.substring(0, 100) + '...',
        type: 'drug',
        url: `/drugs?open=${item._id}`,
        drugData: {
          forms: item.forms,
          pediatricDose: item.pediatricDose,
          ageRestrictions: item.ageRestrictions,
          pediatricDoseUnit: item.pediatricDoseUnit
        },
        data: item
      })
    })

    // –ü–æ–∏—Å–∫ –≤ Instructions
    const instructionResults = await Instruction.find({
      $or: [
        { title: searchRegex },
        { content: searchRegex }
      ]
    }).limit(5)

    instructionResults.forEach(item => {
      results.push({
        id: item._id.toString(),
        title: item.title,
        description: item.content?.substring(0, 100) + '...',
        type: 'instruction',
        url: `/instructions/${item.url}`,
        data: item
      })
    })

    // –ü–æ–∏—Å–∫ –≤ LocalStatus
    const localStatusResults = await LocalStatus.find({
      $or: [
        { name: searchRegex },
        { encoding: searchRegex },
        { description: searchRegex },
        { note: searchRegex }
      ]
    }).populate('category').limit(5)

    localStatusResults.forEach(item => {
      results.push({
        id: item._id.toString(),
        title: item.name,
        description: `–ö–æ–¥–∏—Ä–æ–≤–∫–∞: ${item.encoding}`,
        type: 'local-status',
        url: `/local-statuses/${item.category?.url}?open=${item._id}`,
        data: item
      })
    })

    // –ü–æ–∏—Å–∫ –≤ Substations
    const substationResults = await Substation.find({
      $or: [
        { name: searchRegex },
        { address: searchRegex },
        { phone: searchRegex }
      ]
    }).limit(3)

    substationResults.forEach(item => {
      results.push({
        id: item._id.toString(),
        title: item.name,
        description: `–ê–¥—Ä–µ—Å: ${item.address}${item.phone ? ` | –¢–µ–ª: ${item.phone}` : ''}`,
        type: 'substation',
        url: `/substations`,
        data: item
      })
    })

    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ AI
    let intelligentMessage = ''
    let suggestions = []
    
    if (aiAnalysisAvailable && aiResponse?.response) {
      // –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–Ω—Ç—Ä–æ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ò–ò
      const introVariants = [
        '–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:',
        '–ù–∞—à—ë–ª —Ç–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î:',
        '–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:',
        '–ü–æ–¥–±–æ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:'
      ]
      const intro = introVariants[Math.floor(Math.random() * introVariants.length)]
      intelligentMessage = `${intro}\n\n${aiResponse.response}`
      suggestions = aiResponse.suggestions || generateContextualSuggestions(searchTerm, results)
    } else {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑–∏—Ä–æ–≤–∫–∏
      const isDosageQuery = /–¥–æ–∑–∏—Ä–æ–≤–∫|–¥–æ–∑—É|—Ä–∞—Å—Å—á–∏—Ç–∞|—Ä–∞—Å—á–µ—Ç|—Ä–µ–±–µ–Ω–æ–∫|–∫–≥|–º–≥|–º–ª/i.test(searchTerm)
      const weightMatch = searchTerm.match(/(\d+)\s*–∫–≥/i)
      const drugNameMatch = searchTerm.match(/(—ç—É—Ñ–∏–ª–ª–∏–Ω|–∞–º–∏–Ω–æ—Ñ–∏–ª–ª–∏–Ω|aminophylline|eufillin|—Ç–µ–æ—Ñ–∏–ª–ª–∏–Ω|theophylline|–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω|adrenaline|epinephrine|–∞—Ç—Ä–æ–ø–∏–Ω|atropine|–º–æ—Ä—Ñ–∏–Ω|morphine|–¥–µ–∫—Å–∞–º–µ—Ç–∞–∑–æ–Ω|dexamethasone)/i)
      
      console.log('–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', {
        searchTerm,
        isDosageQuery,
        weightMatch: weightMatch?.[1],
        drugNameMatch: drugNameMatch?.[1],
        drugResultsCount: drugResults.length
      })
      
      if (isDosageQuery && weightMatch && drugNameMatch) {
        const weight = parseInt(weightMatch[1])
        const drugName = drugNameMatch[1]
        
        // –ò—â–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        console.log('–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤:', drugResults.length)
        drugResults.forEach(drug => {
          console.log('–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫: –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:', drug.name, drug.latinName, drug.synonyms)
        })
        
        const foundDrug = drugResults.find(drug => 
          drug.name.toLowerCase().includes(drugName.toLowerCase()) ||
          drug.latinName?.toLowerCase().includes(drugName.toLowerCase()) ||
          drug.synonyms?.some(syn => syn.toLowerCase().includes(drugName.toLowerCase()))
        )
        
        console.log('–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:', foundDrug?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω')
        
        if (foundDrug && foundDrug.pediatricDose && foundDrug.pediatricDose.length > 0) {
          const introVariants = [
            '–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:',
            '–ù–∞—à—ë–ª —Ç–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î:',
            '–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:'
          ]
          const intro = introVariants[Math.floor(Math.random() * introVariants.length)]
          intelligentMessage = `${intro}\n\n–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ ${foundDrug.name} –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –≤–µ—Å–æ–º ${weight} –∫–≥:\n\n`
          
          // –ü–∞—Ä—Å–∏–º –ø–µ–¥–∏–∞—Ç—Ä–∏—á–µ—Å–∫—É—é –¥–æ–∑–∏—Ä–æ–≤–∫—É
          foundDrug.pediatricDose.forEach((dose, index) => {
            const doseMatch = dose.match(/(\d+(?:[.,]\d+)?)\s*-?\s*(\d+(?:[.,]\d+)?)?/);
            if (doseMatch) {
              const minDose = parseFloat(doseMatch[1].replace(',', '.'))
              const maxDose = doseMatch[2] ? parseFloat(doseMatch[2].replace(',', '.')) : minDose
              
              const minResult = (minDose * weight).toFixed(1)
              const maxResult = (maxDose * weight).toFixed(1)
              
              intelligentMessage += `‚Ä¢ –î–æ–∑–∏—Ä–æ–≤–∫–∞ ${dose} ${foundDrug.pediatricDoseUnit || '–º–≥/–∫–≥'}: ${minResult}${maxDose !== minDose ? ` - ${maxResult}` : ''} –º–≥\n`
            }
          })
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–µ –≤—ã–ø—É—Å–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞
          if (foundDrug.forms && foundDrug.forms.doseValue && foundDrug.forms.volumeMl) {
            const concentration = foundDrug.forms.doseValue / foundDrug.forms.volumeMl
            intelligentMessage += `\n–§–æ—Ä–º–∞ –≤—ã–ø—É—Å–∫–∞: ${foundDrug.forms.doseValue}${foundDrug.forms.doseUnit || '–º–≥'} –≤ ${foundDrug.forms.volumeMl}–º–ª\n`
            intelligentMessage += `–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: ${concentration.toFixed(1)} –º–≥/–º–ª\n`
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ–∑–∏—Ä–æ–≤–∫–∏
            foundDrug.pediatricDose.forEach((dose) => {
              const doseMatch = dose.match(/(\d+(?:[.,]\d+)?)\s*-?\s*(\d+(?:[.,]\d+)?)?/);
              if (doseMatch) {
                const minDose = parseFloat(doseMatch[1].replace(',', '.'))
                const maxDose = doseMatch[2] ? parseFloat(doseMatch[2].replace(',', '.')) : minDose
                
                const minMg = minDose * weight
                const maxMg = maxDose * weight
                const minMl = (minMg / concentration).toFixed(2)
                const maxMl = (maxMg / concentration).toFixed(2)
                
                intelligentMessage += `–û–±—ä–µ–º –¥–ª—è –¥–æ–∑—ã ${dose}: ${minMl}${maxDose !== minDose ? ` - ${maxMl}` : ''} –º–ª\n`
              }
            })
          }
          
          suggestions = generateContextualSuggestions(searchTerm, results)
        } else {
          intelligentMessage = `–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ ${drugName} –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –≤–µ—Å–æ–º ${weight} –∫–≥ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–µ–¥–∏–∞—Ç—Ä–∏—á–µ—Å–∫–æ–π –¥–æ–∑–∏—Ä–æ–≤–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`
          suggestions = generateContextualSuggestions(searchTerm, results)
        }
      } else if (results.length > 0) {
        intelligentMessage = `–ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}"`
        suggestions = generateContextualSuggestions(searchTerm, results)
      } else {
        intelligentMessage = `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.`
        suggestions = generateContextualSuggestions(searchTerm, results)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–æ–∑–∏—Ä–æ–≤–æ—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    const isDosageQuery = /–¥–æ–∑–∏—Ä–æ–≤–∫|–¥–æ–∑—É|—Ä–∞—Å—Å—á–∏—Ç–∞|—Ä–∞—Å—á–µ—Ç.*–∫–≥|–º–≥.*–∫–≥|–º–ª.*–∫–≥/i.test(searchTerm)
    const hasWeightAndDrug = /(\d+)\s*–∫–≥/i.test(searchTerm) && /(—ç—É—Ñ–∏–ª–ª–∏–Ω|–∞–º–∏–Ω–æ—Ñ–∏–ª–ª–∏–Ω|aminophylline|eufillin|—Ç–µ–æ—Ñ–∏–ª–ª–∏–Ω|theophylline|–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω|adrenaline|epinephrine|–∞—Ç—Ä–æ–ø–∏–Ω|atropine|–º–æ—Ä—Ñ–∏–Ω|morphine|–¥–µ–∫—Å–∞–º–µ—Ç–∞–∑–æ–Ω|dexamethasone)/i.test(searchTerm)
    
    // –ï—Å–ª–∏ –ò–ò –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ú–ö–ë –∫–∞—Ä—Ç–æ—á–∫–∏, –∏—Å–∫–ª—é—á–∞–µ–º –ú–ö–ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    let filteredResults = results
    if (aiAnalysisAvailable && intelligentMessage.includes('<mkb-cards>')) {
      console.log('üéØ –ò–ò –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ú–ö–ë –∫–∞—Ä—Ç–æ—á–∫–∏, –∏—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ú–ö–ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
      filteredResults = results.filter(result => result.type !== 'mkb')
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ú–ö–ë: ${filteredResults.length} (–±—ã–ª–æ ${results.length})`)
    }
    
    // –î–ª—è –¥–æ–∑–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–∫–ª—é—á–∞–µ–º –ú–ö–ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if (isDosageQuery && hasWeightAndDrug) {
      console.log('üéØ –î–æ–∑–∏—Ä–æ–≤–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –ú–ö–ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
      filteredResults = filteredResults.filter(result => result.type !== 'mkb')
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ú–ö–ë –¥–ª—è –¥–æ–∑–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${filteredResults.length}`)
    }
    
    // –ï—Å–ª–∏ –ò–ò –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π, –∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if (aiAnalysisAvailable && intelligentMessage.includes('<substation-cards>')) {
      console.log('üéØ –ò–ò –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π, –∏—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π')
      filteredResults = filteredResults.filter(result => result.type !== 'substation')
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π: ${filteredResults.length}`)
    }
    
    // –ï—Å–ª–∏ –ò–ò –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if (aiAnalysisAvailable && intelligentMessage.includes('<drug-cards>')) {
      console.log('üéØ –ò–ò –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤')
      filteredResults = filteredResults.filter(result => result.type !== 'drug')
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤: ${filteredResults.length}`)
    }

    return {
      success: true,
      results: filteredResults,
      message: intelligentMessage,
      suggestions,
      query: searchTerm,
      aiAnalysis: aiAnalysisAvailable
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ AI –ø–æ–∏—Å–∫–∞:', error)
    
    // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –ø–æ–∏—Å–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ AI
    const results: any[] = []
    const searchRegex = new RegExp(searchTerm, 'i')

    const mkbResults = await MKB.find({
      $or: [
        { name: searchRegex },
        { mkbCode: searchRegex },
        { stationCode: searchRegex },
        { note: searchRegex }
      ]
    }).populate('category').limit(5)

    mkbResults.forEach(item => {
      results.push({
        id: item._id.toString(),
        title: item.name,
        description: `–ú–ö–ë: ${item.mkbCode} | –°—Ç–∞–Ω—Ü–∏—è: ${item.stationCode}`,
        type: 'mkb',
        url: `/codifier/${item.category?.url}?open=${item._id}`,
        codes: {
          mkbCode: item.mkbCode,
          stationCode: item.stationCode
        },
        data: item
      })
    })

    return {
      success: true,
      results,
      message: `–ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" (–æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫)`,
      suggestions: ['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', '–£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å'],
      query: searchTerm,
      aiAnalysis: false
    }
  }
})
