import { defineEventHandler, readBody } from 'h3'
import connectDB from '~/server/utils/mongodb'
import { ollamaAI } from '~/server/utils/ai/ollama-medical-ai'
import MKB from '~/server/models/MKB'
import LocalStatus from '~/server/models/LocalStatus'
import Algorithm from '~/server/models/Algorithm'
import Drug from '~/server/models/Drug'
import Substation from '~/server/models/Substation'
import Fuse from 'fuse.js'

function sortResults(a: any, b: any) {
  const typeWeight: Record<string, number> = { mkb: 1, ls: 2, algorithm: 3, drug: 4, substation: 5 }
  const wa = typeWeight[a.type] || 99
  const wb = typeWeight[b.type] || 99
  if (wa !== wb) return wa - wb
  return a.distance - b.distance
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π (–±–µ–∑ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∏—Å–∫–∞)
async function findSimilarDiagnoses(diagnosisTitle: string, mkbCode: string) {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –¥–ª—è:', diagnosisTitle)
    
    let similarDiagnoses: any[] = []
    
    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –¥–∏–∞–≥–Ω–æ–∑–∞
    const excludeWords = ['–±–æ–ª–µ–∑–Ω—å', '—Å–∏–Ω–¥—Ä–æ–º', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ø–∞—Ç–æ–ª–æ–≥–∏—è', '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ']
    const keywords = diagnosisTitle.toLowerCase()
      .replace(/[\[\]()]/g, '')
      .split(/[\s,]+/)
      .filter((word: string) => word.length > 3 && !excludeWords.includes(word))
      .slice(0, 4) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 4 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    
    console.log('üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', keywords)
    
    // 2. –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    if (keywords.length > 0) {
      const allDiagnoses = await MKB.find({
        mkbCode: { $ne: mkbCode } // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–≥–Ω–æ–∑ –ø–æ –ú–ö–ë –∫–æ–¥—É
      })
      .populate('category', 'name url')
      .lean()
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (—Å–Ω–∏–∂–∞–µ–º –¥–æ 50% –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞)
      similarDiagnoses = allDiagnoses.filter((diagnosis: any) => {
        const diagnosisText = `${diagnosis.name} ${diagnosis.note || ''}`.toLowerCase()
        const matchedKeywords = keywords.filter(keyword => 
          diagnosisText.includes(keyword)
        )
        
        // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        const matchPercentage = (matchedKeywords.length / keywords.length) * 100
        
        return matchPercentage >= 50 // –°–Ω–∏–∂–∞–µ–º –¥–æ 50% –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞
      })
      .sort((a: any, b: any) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–≤—à–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        const aMatches = keywords.filter(k => `${a.name} ${a.note || ''}`.toLowerCase().includes(k)).length
        const bMatches = keywords.filter(k => `${b.name} ${b.note || ''}`.toLowerCase().includes(k)).length
        return bMatches - aMatches
      })
      // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
    }
    
    // 3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—â–µ–º –ø–æ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    if (similarDiagnoses.length < 3) {
      console.log('üîç –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º')
      
      // –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      const broaderKeywords = keywords.slice(0, 2) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 2 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤–∞
      
      if (broaderKeywords.length > 0) {
        const broaderResults = await MKB.find({
          mkbCode: { $ne: mkbCode },
          $or: broaderKeywords.map(keyword => ({
            $or: [
              { name: { $regex: keyword, $options: 'i' } },
              { note: { $regex: keyword, $options: 'i' } }
            ]
          }))
        })
        .populate('category', 'name url')
        .lean()
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
        const existingIds = similarDiagnoses.map((d: any) => d._id.toString())
        const newResults = broaderResults.filter((d: any) => !existingIds.includes(d._id.toString()))
        
        similarDiagnoses = [...similarDiagnoses, ...newResults]
      }
    }
    
    // 4. –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—â–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (similarDiagnoses.length < 3) {
      console.log('üîç –ò—â–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞
      const currentDiagnosis = await MKB.findOne({ mkbCode }).populate('category', 'name url').lean()
      if (currentDiagnosis?.category) {
        const categoryResults = await MKB.find({
          mkbCode: { $ne: mkbCode },
          category: currentDiagnosis.category._id
        })
        .populate('category', 'name url')
        // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
        .lean()
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
        const existingIds = similarDiagnoses.map((d: any) => d._id.toString())
        const newResults = categoryResults.filter((d: any) => !existingIds.includes(d._id.toString()))
        
        similarDiagnoses = [...similarDiagnoses, ...newResults]
      }
    }
    
    // 5. –í—Å–µ–≥–¥–∞ –∏—â–µ–º –ø–æ –ú–ö–ë –∫–æ–¥–∞–º –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
    console.log('üîç –ò—â–µ–º –ø–æ –ú–ö–ë –∫–æ–¥–∞–º –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤')
      
      // –ò—â–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—É—â–∏–π –ú–ö–ë –∫–æ–¥
      const algorithms = await Algorithm.find({
        $or: [
          { content: { $regex: mkbCode, $options: 'i' } },
          { description: { $regex: mkbCode, $options: 'i' } }
        ]
      }).lean()
      
      if (algorithms.length > 0) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ú–ö–ë –∫–æ–¥—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        const mkbCodesFromAlgorithms = new Set<string>()
        
        algorithms.forEach(algo => {
          const content = `${algo.content || ''} ${algo.description || ''}`
          const mkbMatches = content.match(/[A-Z]\d{2}(?:\.\d+)?/g)
          if (mkbMatches) {
            mkbMatches.forEach(code => mkbCodesFromAlgorithms.add(code))
          }
        })
        
        // –ò—â–µ–º –¥–∏–∞–≥–Ω–æ–∑—ã –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ú–ö–ë –∫–æ–¥–∞–º
        if (mkbCodesFromAlgorithms.size > 0) {
          const mkbCodesArray = Array.from(mkbCodesFromAlgorithms).filter(code => code !== mkbCode)
          
          if (mkbCodesArray.length > 0) {
            const algorithmResults = await MKB.find({
              mkbCode: { $in: mkbCodesArray }
            })
            .populate('category', 'name url')
            // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
            .lean()
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
            const existingIds = similarDiagnoses.map((d: any) => d._id.toString())
            const newResults = algorithmResults.filter((d: any) => !existingIds.includes(d._id.toString()))
            
            similarDiagnoses = [...similarDiagnoses, ...newResults]
            
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ú–ö–ë –∫–æ–¥–æ–≤ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö:', mkbCodesFromAlgorithms.size)
          }
        }
      }
    
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ (‚â•50%):', similarDiagnoses.length)
    
    return similarDiagnoses
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function findRelatedContent(diagnosisTitle: string, mkbCode: string) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –¥–∏–∞–≥–Ω–æ–∑–∞, –∏—Å–∫–ª—é—á–∞—è –æ–±—â–∏–µ —Å–ª–æ–≤–∞
    const excludeWords = ['–±–æ–ª–µ–∑–Ω—å', '—Å–∏–Ω–¥—Ä–æ–º', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ø–∞—Ç–æ–ª–æ–≥–∏—è', '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ']
    const keywords = diagnosisTitle.toLowerCase()
      .replace(/[\[\]()]/g, '')
      .split(/[\s,]+/)
      .filter((word: string) => word.length > 3 && !excludeWords.includes(word))
      .slice(0, 3) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    
    console.log('üîç –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è:', diagnosisTitle)
    console.log('üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', keywords)
    
    // –ò—â–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    let algorithms: any[] = []
    if (keywords.length > 0) {
      algorithms = await Algorithm.find({
        $or: [
          { title: { $regex: keywords.join('|'), $options: 'i' } },
          { description: { $regex: keywords.join('|'), $options: 'i' } },
          { content: { $regex: keywords.join('|'), $options: 'i' } }
        ]
      })
      .populate('section', 'name url')
      .populate('category', 'name url')
      // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
      .lean()
    }
    
    // –ï—Å–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –∏—â–µ–º –ø–æ –ú–ö–ë –∫–æ–¥—É
    if (algorithms.length === 0 && mkbCode) {
      console.log('üîç –ò—â–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ –ú–ö–ë –∫–æ–¥—É:', mkbCode)
      algorithms = await Algorithm.find({
        $or: [
          { content: { $regex: mkbCode, $options: 'i' } },
          { description: { $regex: mkbCode, $options: 'i' } }
        ]
      })
      .populate('section', 'name url')
      .populate('category', 'name url')
      // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
      .lean()
    }
    
    // –ò—â–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    let drugs: any[] = []
    if (keywords.length > 0) {
      drugs = await Drug.find({
        $or: [
          { name: { $regex: keywords.join('|'), $options: 'i' } },
          { description: { $regex: keywords.join('|'), $options: 'i' } }
        ]
      })
      // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
      .lean()
    }
    
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:', algorithms.length)
    console.log('üíä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤:', drugs.length)
    
    return {
      algorithms,
      drugs
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error)
    return {
      algorithms: [],
      drugs: []
    }
  }
}

export default defineEventHandler(async (event) => {
  await connectDB()
  const body = await readBody<{ query: string, history?: Array<{ role: 'user'|'assistant', text: string, intent?: string }> }>(event)
  const query = (body?.query || '').trim()
  const history = Array.isArray(body?.history) ? body!.history!.slice(-5) : []
  if (!query) return { message: '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å', results: [] }

  console.log('ü§ñ Ollama AI: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å:', query)

  // –î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–∏–∑ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫)
  const queryLower = query.toLowerCase()
  const askAlgo = /–ø–æ–∫–∞–∑(–∞—Ç—å|–∏).*–∞–ª–≥–æ—Ä–∏—Ç–º/i.test(queryLower)
  const askLs = /–ø–æ–∫–∞–∑(–∞—Ç—å|–∏).*–ª–æ–∫–∞–ª—å–Ω.*—Å—Ç–∞—Ç—É—Å/i.test(queryLower)
  const askMkb = /–ø–æ–∫–∞–∑(–∞—Ç—å|–∏).*–∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä|\b–º–∫–±\b/i.test(queryLower)
  const askDrug = /–ø–æ–∫–∞–∑(–∞—Ç—å|–∏).*–ø—Ä–µ–ø–∞—Ä–∞—Ç/i.test(queryLower)

  // –î–µ—Ç–µ–∫—Ü–∏—è –ú–ö–ë –∫–æ–¥–æ–≤ –∏ –∫–æ–¥–æ–≤ —Å—Ç–∞–Ω—Ü–∏–π
  const mkbCodePattern = /^[A-Z]\d{2}(\.\d+)?$/i
  const isMkbCode = mkbCodePattern.test(query.trim())
  const stationCodePattern = /^\d{4}$/
  const isStationCode = stationCodePattern.test(query.trim())

  // –í—ã–¥–µ–ª–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
  let effectiveQuery = query
  let originalQuery = query
  if (askAlgo || askLs || askMkb || askDrug) {
    const m = query.match(/:(.+)$/)
    if (m && m[1]) {
      effectiveQuery = m[1].trim()
      originalQuery = m[1].trim()
    } else {
      effectiveQuery = query.replace(/–ø–æ–∫–∞–∑(–∞—Ç—å|–∏)[^:]*:?/i, '').trim()
      originalQuery = effectiveQuery
    }
  }

  // –§–ê–ó–ê 1 ‚Äî —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ Fuse.js –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º (–∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫)
  const [mkbFuse, lsFuse, algoFuse, drugFuse, substationFuse] = await Promise.all([
    MKB.find({}, { name: 1, mkbCode: 1, stationCode: 1, note: 1, category: 1 }).populate('category', 'name url').lean(),
    LocalStatus.find({}, { name: 1, description: 1, note: 1, localis: 1, category: 1 }).populate('category', 'name url').lean(),
    Algorithm.find({}, { title: 1, description: 1, content: 1, category: 1, section: 1 }).populate('category', 'name url').populate('section', 'name url').lean(),
    Drug.find({}, { name: 1, latinName: 1, synonyms: 1, description: 1, forms: 1, pediatricDose: 1, pediatricDoseUnit: 1, ageRestrictions: 1 }).lean(),
    Substation.find({}, { name: 1, address: 1, phone: 1, region: 1 }).populate('region', 'name').lean()
  ])

  const fuseItems: any[] = [
    ...mkbFuse.map((i: any) => ({ _id: i._id, type: 'mkb', title: i.name, name: i.name, mkbCode: i.mkbCode, stationCode: i.stationCode, note: i.note, category: i.category })),
    ...lsFuse.map((i: any) => ({ _id: i._id, type: 'ls', title: i.name, name: i.name, description: i.description, note: i.note, localis: i.localis, category: i.category })),
    ...algoFuse.map((i: any) => ({ _id: i._id, type: 'algorithm', title: i.title, description: i.description, content: i.content, category: i.category, section: i.section })),
    ...drugFuse.map((i: any) => ({ 
      _id: i._id, 
      type: 'drug', 
      title: i.name, 
      name: i.name, 
      latinName: i.latinName, 
      synonyms: i.synonyms, 
      synonymsText: Array.isArray(i.synonyms) ? i.synonyms.join(' ') : (i.synonyms || ''), // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
      description: i.description, 
      forms: i.forms, 
      pediatricDose: i.pediatricDose, 
      pediatricDoseUnit: i.pediatricDoseUnit, 
      ageRestrictions: i.ageRestrictions 
    })),
    ...substationFuse.map((i: any) => ({ _id: i._id, type: 'substation', title: i.name, name: i.name, address: i.address, phone: i.phone, region: i.region }))
  ]

  const fuse = new Fuse(fuseItems, {
    includeScore: true,
    threshold: 0.35,
    keys: [
      { name: 'title', weight: 0.6 },
      { name: 'name', weight: 0.6 },
      { name: 'latinName', weight: 0.5 },
      { name: 'synonyms', weight: 0.4 },
      { name: 'synonymsText', weight: 0.4 }, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
      { name: 'description', weight: 0.3 },
      { name: 'content', weight: 0.2 },
      { name: 'note', weight: 0.2 },
      { name: 'mkbCode', weight: 0.5 },
      { name: 'address', weight: 0.2 }
    ]
  })
  const fuseResults = fuse.search(effectiveQuery).map(r => ({ ...r.item, score: r.score }))

  console.log('üîç Fuse —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', fuseResults.length)

  // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –±–µ–∑ –ò–ò –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
  let simpleIntent = 'general'
  if (queryLower.includes('–º–∫–±') || queryLower.includes('–∫–æ–¥') || queryLower.includes('–¥–∏–∞–≥–Ω–æ–∑') || isStationCode || isMkbCode) {
    simpleIntent = 'mkb'
  } else if (queryLower.includes('–ø—Ä–µ–ø–∞—Ä–∞—Ç') || queryLower.includes('–ª–µ–∫–∞—Ä—Å—Ç–≤–æ') || queryLower.includes('–¥–æ–∑–∏—Ä–æ–≤–∫')) {
    simpleIntent = 'drug'
  } else if (queryLower.includes('–∞–ª–≥–æ—Ä–∏—Ç–º') || queryLower.includes('–ª–µ—á–µ–Ω–∏–µ') || queryLower.includes('–ø—Ä–æ—Ç–æ–∫–æ–ª')) {
    simpleIntent = 'algo'
  } else if (queryLower.includes('—Å—Ç–∞—Ç—É—Å') || queryLower.includes('–ª–æ–∫–∞–ª–∏—Å') || queryLower.includes('–æ–ø–∏—Å–∞–Ω–∏–µ')) {
    simpleIntent = 'ls'
  } else if (queryLower.includes('–ø–æ–¥—Å—Ç–∞–Ω—Ü') || queryLower.includes('—Å—Ç–∞–Ω—Ü–∏—è')) {
    simpleIntent = 'substation'
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º follow-up –∑–∞–ø—Ä–æ—Å—ã –ü–ï–†–ï–î —Ç–æ—á–Ω—ã–º –ø–æ–∏—Å–∫–æ–º (–±–µ–∑ –ò–ò –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
  if (askAlgo || askLs || askMkb || askDrug) {
    const selectedSection = askAlgo ? 'algo' : (askLs ? 'ls' : (askMkb ? 'mkb' : 'drug'))
    
    console.log('‚ö° –ë—ã—Å—Ç—Ä—ã–π follow-up –ø–æ–∏—Å–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞:', selectedSection)
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let diagnosisName = ''
    if (history && history.length > 0) {
      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π AI –æ—Ç–≤–µ—Ç —Å –¥–∏–∞–≥–Ω–æ–∑–æ–º
      for (let i = history.length - 1; i >= 0; i--) {
        const msg = history[i]
        if (msg.role === 'assistant' && msg.text) {
          // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∏–∞–≥–Ω–æ–∑–∞ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞ (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
          let diagnosisMatch = null
          
          // 1. –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "**–¥–∏–∞–≥–Ω–æ–∑**" (–ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
          diagnosisMatch = msg.text.match(/\*\*([^*]+?)\*\*/)
          
          // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω –¥–∏–∞–≥–Ω–æ–∑: **–¥–∏–∞–≥–Ω–æ–∑**"
          if (!diagnosisMatch) {
            diagnosisMatch = msg.text.match(/–Ω–∞–π–¥–µ–Ω –¥–∏–∞–≥–Ω–æ–∑:\s*\n\*\*([^*]+?)\*\*/)
          }
          
          // 2.1. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω –¥–∏–∞–≥–Ω–æ–∑: **–¥–∏–∞–≥–Ω–æ–∑**" (–±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)
          if (!diagnosisMatch) {
            diagnosisMatch = msg.text.match(/–Ω–∞–π–¥–µ–Ω –¥–∏–∞–≥–Ω–æ–∑:\s*\*\*([^*]+?)\*\*/)
          }
          
          // 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "‚Äî –ú–ö–ë:"
          if (!diagnosisMatch) {
            diagnosisMatch = msg.text.match(/([^‚Äî\n]+?)\s*‚Äî\s*–ú–ö–ë:/)
          }
          
          // 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "‚Ä¢ –¥–∏–∞–≥–Ω–æ–∑ ‚Äî"
          if (!diagnosisMatch) {
            diagnosisMatch = msg.text.match(/‚Ä¢\s*([^‚Äî\n]+?)\s*‚Äî/)
          }
          
          // 5. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1. –¥–∏–∞–≥–Ω–æ–∑ ‚Äî"
          if (!diagnosisMatch) {
            diagnosisMatch = msg.text.match(/\d+\.\s*\*\*([^*]+?)\*\*/)
          }
          
          if (diagnosisMatch) {
            diagnosisName = diagnosisMatch[1].trim()
            // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            diagnosisName = diagnosisName.replace(/^üè•\s*/, '').replace(/\(.+?\)$/, '').trim()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–ø–∞ "–î–∏–∞–≥–Ω–æ–∑—ã –ú–ö–ë –ø–æ –∑–∞–ø—Ä–æ—Å—É"
            if (!diagnosisName.includes('–î–∏–∞–≥–Ω–æ–∑—ã –ú–ö–ë –ø–æ –∑–∞–ø—Ä–æ—Å—É') && 
                !diagnosisName.includes('–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ª–µ—á–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É') &&
                !diagnosisName.includes('–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É') &&
                !diagnosisName.includes('–ü–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏') &&
                !diagnosisName.includes('–Ω–∞–π–¥–µ–Ω –¥–∏–∞–≥–Ω–æ–∑') &&
                diagnosisName.length > 10) {
              console.log('üéØ –ò–∑–≤–ª–µ—á–µ–Ω –¥–∏–∞–≥–Ω–æ–∑ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:', diagnosisName)
              break
            } else {
              diagnosisName = '' // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            }
          }
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º effectiveQuery –∫–∞–∫ fallback
    if (!diagnosisName) {
      // –î–ª—è follow-up –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (effectiveQuery && !effectiveQuery.includes('–ü–æ–∫–∞–∑–∞—Ç—å')) {
        diagnosisName = effectiveQuery
      } else {
        // –ï—Å–ª–∏ effectiveQuery —Å–æ–¥–µ—Ä–∂–∏—Ç "–ü–æ–∫–∞–∑–∞—Ç—å", –∏—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (let i = history.length - 1; i >= 0; i--) {
          const msg = history[i]
          if (msg.role === 'user' && msg.text && !msg.text.includes('–ü–æ–∫–∞–∑–∞—Ç—å')) {
            diagnosisName = msg.text.trim()
            break
          }
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      if (!diagnosisName && effectiveQuery) {
        const codeMatch = effectiveQuery.match(/\d{4}|[A-Z]\d{2}(\.\d+)?/i)
        if (codeMatch) {
          diagnosisName = codeMatch[0]
          console.log('üî¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –¥–∏–∞–≥–Ω–æ–∑:', diagnosisName)
        }
      }
      
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∏–∞–≥–Ω–æ–∑:', diagnosisName)
    }
    
    console.log('üìã –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:', diagnosisName)
    
    // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–∏–∞–≥–Ω–æ–∑–∞
    // –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –ú–ö–ë –∫–æ–¥ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    let mkbCodeForSearch = ''
    if (history && history.length > 0) {
      // –ò—â–µ–º –ú–ö–ë –∫–æ–¥ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º AI –æ—Ç–≤–µ—Ç–µ
      for (let i = history.length - 1; i >= 0; i--) {
        const msg = history[i]
        if (msg.role === 'assistant' && msg.text) {
          const mkbMatch = msg.text.match(/–ú–ö–ë –∫–æ–¥:\s*([A-Z]\d{2}(?:\.\d+)?)/i)
          if (mkbMatch) {
            mkbCodeForSearch = mkbMatch[1]
            console.log('üîç –ù–∞–π–¥–µ–Ω –ú–ö–ë –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:', mkbCodeForSearch)
            break
          }
        }
      }
    }
    
    const relatedContent = await findRelatedContent(diagnosisName, mkbCodeForSearch)
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    let results: any[] = []
    let availableSections: string[] = []
    let similarDiagnoses: any[] = []
    
    if (selectedSection === 'mkb') {
      // –î–ª—è –ú–ö–ë –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–∏–∞–≥–Ω–æ–∑–∞
      let mkbResults = await MKB.find({
        name: { $regex: diagnosisName.replace(/[\[\]()]/g, ''), $options: 'i' }
      })
      .populate('category', 'name url')
      // –£–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
      .lean()
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –∫–æ–¥–∞–º –ú–ö–ë/—Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      if (mkbResults.length === 0 && effectiveQuery) {
        console.log('üîç –ò—â–µ–º –ø–æ –∫–æ–¥–∞–º –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', effectiveQuery)
        
        // –ò—â–µ–º –ø–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏
        const stationCodeMatch = effectiveQuery.match(/\d{4}/)
        if (stationCodeMatch) {
          mkbResults = await MKB.find({ stationCode: stationCodeMatch[0] })
          .populate('category', 'name url')
          .limit(5)
          .lean()
        }
        
        // –ò—â–µ–º –ø–æ –ú–ö–ë –∫–æ–¥—É
        if (mkbResults.length === 0) {
          const mkbCodeMatch = effectiveQuery.match(/[A-Z]\d{2}(\.\d+)?/i)
          if (mkbCodeMatch) {
            mkbResults = await MKB.find({ mkbCode: mkbCodeMatch[0] })
            .populate('category', 'name url')
            .limit(5)
            .lean()
          }
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      if (mkbResults.length === 0) {
        console.log('üîç –ò—â–µ–º –ø–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º')
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        const specificKeywords = diagnosisName.toLowerCase()
          .replace(/[\[\]()]/g, '')
          .split(/[\s,]+/)
          .filter((word: string) => word.length > 4 && 
            !['–±–æ–ª–µ–∑–Ω—å', '—Å–∏–Ω–¥—Ä–æ–º', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ø–∞—Ç–æ–ª–æ–≥–∏—è', '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'].includes(word))
          .slice(0, 2) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 2 —Å–∞–º—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–ª–æ–≤–∞
        
        if (specificKeywords.length > 0) {
          // –ò—â–µ–º –¥–∏–∞–≥–Ω–æ–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
          mkbResults = await MKB.find({
            $and: specificKeywords.map(keyword => ({
              $or: [
                { name: { $regex: keyword, $options: 'i' } },
                { note: { $regex: keyword, $options: 'i' } }
              ]
            }))
          })
          .populate('category', 'name url')
          .limit(5)
          .lean()
        }
      }
      
      // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–≥–Ω–æ–∑—ã
      if (mkbResults.length > 0) {
        const firstResult = mkbResults[0]
        similarDiagnoses = await findSimilarDiagnoses(firstResult.name, firstResult.mkbCode || '')
      }
      
      results = mkbResults.map((item: any) => ({
        id: String(item._id),
        title: item.name,
        description: item.note || '',
        type: 'mkb',
        url: `/codifier/${item.category?.url}?id=${item._id}`,
        codes: { mkbCode: item.mkbCode, stationCode: item.stationCode },
        category: item.category?.name,
        data: item
      }))
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–≥–Ω–æ–∑—ã –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
      if (similarDiagnoses.length > 0) {
        const similarResults = similarDiagnoses.map((item: any) => ({
          id: String(item._id),
          title: item.name,
          description: item.note || '',
          type: 'mkb',
          url: `/codifier/${item.category?.url}?id=${item._id}`,
          codes: { mkbCode: item.mkbCode, stationCode: item.stationCode },
          category: item.category?.name,
          data: item,
          isSimilar: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ—Ö–æ–∂–∏–π –¥–∏–∞–≥–Ω–æ–∑
        }))
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –ø–æ—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = [...results, ...similarResults]
      }
      
      availableSections = ['mkb']
    } else if (selectedSection === 'algo') {
      // –î–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
      let algoResults = relatedContent.algorithms
      
      console.log('üîç –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:', algoResults.length)
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
      if (algoResults.length === 0) {
        console.log('üîç –ê–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º')
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –ú–ö–ë –∫–æ–¥–∞–º –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
        const mkbCodesToSearch = []
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ú–ö–ë –∫–æ–¥ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if (effectiveQuery) {
          const mkbCodeMatch = effectiveQuery.match(/[A-Z]\d{2}(\.\d+)?/i)
          if (mkbCodeMatch) {
            mkbCodesToSearch.push(mkbCodeMatch[0])
          }
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ú–ö–ë –∫–æ–¥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        if (history && history.length > 0) {
          for (let i = history.length - 1; i >= 0; i--) {
            const msg = history[i]
            if (msg.role === 'assistant' && msg.text) {
              const mkbMatch = msg.text.match(/–ú–ö–ë –∫–æ–¥:\s*([A-Z]\d{2}(?:\.\d+)?)/i)
              if (mkbMatch && !mkbCodesToSearch.includes(mkbMatch[1])) {
                mkbCodesToSearch.push(mkbMatch[1])
              }
            }
          }
        }
        
        // –ò—â–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ú–ö–ë –∫–æ–¥–∞–º
        if (mkbCodesToSearch.length > 0) {
          console.log('üîç –ò—â–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ –ú–ö–ë –∫–æ–¥–∞–º:', mkbCodesToSearch)
          const mkbAlgoResults = await Algorithm.find({
            $or: mkbCodesToSearch.map(code => ({
              $or: [
                { content: { $regex: code, $options: 'i' } },
                { description: { $regex: code, $options: 'i' } }
              ]
            }))
          })
          .populate('section', 'name url')
          .populate('category', 'name url')
          .limit(10) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞
          .lean()
          
          if (mkbAlgoResults.length > 0) {
            algoResults = mkbAlgoResults
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ –ú–ö–ë –∫–æ–¥–∞–º:', mkbAlgoResults.length)
          }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if (algoResults.length === 0) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –¥–∏–∞–≥–Ω–æ–∑–∞
          const specificKeywords = diagnosisName.toLowerCase()
            .replace(/[\[\]()]/g, '')
            .split(/[\s,]+/)
            .filter((word: string) => word.length > 4 && 
              !['–±–æ–ª–µ–∑–Ω—å', '—Å–∏–Ω–¥—Ä–æ–º', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ø–∞—Ç–æ–ª–æ–≥–∏—è', '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'].includes(word))
            .slice(0, 2) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 2 —Å–∞–º—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–ª–æ–≤–∞
          
          if (specificKeywords.length > 0) {
            // –ò—â–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            const directAlgoResults = await Algorithm.find({
              $and: specificKeywords.map(keyword => ({
                $or: [
                  { title: { $regex: keyword, $options: 'i' } },
                  { description: { $regex: keyword, $options: 'i' } },
                  { content: { $regex: keyword, $options: 'i' } }
                ]
              }))
            })
            .populate('section', 'name url')
            .populate('category', 'name url')
            .limit(5)
            .lean()
            
            algoResults = directAlgoResults
          }
        }
      }
      
      results = algoResults.map((algo: any) => ({
        id: String(algo._id),
        title: algo.title,
        description: algo.description || algo.content?.substring(0, 200) || '',
        type: 'algorithm',
        url: `/algorithms/${algo.section?.url}/${algo.category?.url}/${algo._id}`,
        category: algo.category?.name,
        section: algo.section?.name,
        data: algo
      }))
      availableSections = ['algo']
    } else if (selectedSection === 'drug') {
      // –î–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
      results = relatedContent.drugs.map((drug: any) => ({
        id: String(drug._id),
        title: drug.name,
        description: drug.description || '',
        type: 'drug',
        url: `/drugs/${drug._id}`,
        latinName: drug.latinName,
        forms: drug.forms,
        data: drug
      }))
      availableSections = ['drug']
    }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let followUpMessage = ''
    
    if (selectedSection === 'mkb') {
      const totalDiagnoses = results.length
      followUpMessage = `**–î–∏–∞–≥–Ω–æ–∑—ã –ú–ö–ë –ø–æ –∑–∞–ø—Ä–æ—Å—É "${diagnosisName}":**\n\n–ù–∞–π–¥–µ–Ω–æ ${totalDiagnoses} –¥–∏–∞–≥–Ω–æ–∑–æ–≤:`
    } else if (selectedSection === 'algo') {
      followUpMessage = `**–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ª–µ—á–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É "${diagnosisName}":**\n\n–ù–∞–π–¥–µ–Ω–æ ${results.length} –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:`
    } else if (selectedSection === 'drug') {
      followUpMessage = `**–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${diagnosisName}":**\n\n–ù–∞–π–¥–µ–Ω–æ ${results.length} –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤:`
    }
        
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–∞—Ö –≤ —Ç–µ–∫—Å—Ç,
        // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –±–ª–æ–∫–∞—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        return {
      message: followUpMessage,
      results,
      fullResults: {
        mkb: selectedSection === 'mkb' ? results : [],
        ls: [],
        algo: selectedSection === 'algo' ? results : [],
        drug: selectedSection === 'drug' ? results : [],
        substation: []
      },
      forceExpand: selectedSection,
      intent: selectedSection,
      availableSections,
      clarifyingQuestions: [],
      aiIntent: selectedSection,
      aiConfidence: 1.0
    }
  }

  // –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º —Å—Ç–∞–Ω—Ü–∏–π –∏ –ú–ö–ë (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ AI –∞–Ω–∞–ª–∏–∑–æ–º)
  if (isStationCode || isMkbCode) {
    console.log('üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É:', effectiveQuery)
    
    let exactResults: any[] = []
    
    if (isStationCode) {
      // –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏
      const stationCode = effectiveQuery.trim()
      const exactMkb = await MKB.find({ stationCode }).populate('category', 'name url').lean()
      exactResults = exactMkb.map((i: any) => ({ 
        _id: i._id, 
        type: 'mkb', 
        title: i.name, 
        name: i.name, 
        mkbCode: i.mkbCode, 
        stationCode: i.stationCode, 
        note: i.note, 
        category: i.category 
      }))
    } else if (isMkbCode) {
      // –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ú–ö–ë –∫–æ–¥—É
      const mkbCode = effectiveQuery.trim()
      const exactMkb = await MKB.find({ mkbCode }).populate('category', 'name url').lean()
      exactResults = exactMkb.map((i: any) => ({ 
        _id: i._id, 
        type: 'mkb', 
        title: i.name, 
        name: i.name, 
        mkbCode: i.mkbCode, 
        stationCode: i.stationCode, 
        note: i.note, 
        category: i.category 
      }))
    }
    
    if (exactResults.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:', exactResults.length)
      
      let results = exactResults.map((item: any) => ({
        id: String(item._id),
        title: item.title,
        description: item.note || '',
        type: 'mkb',
        url: `/codifier/${item.category?.url}?id=${item._id}`,
        codes: { mkbCode: item.mkbCode, stationCode: item.stationCode },
        category: item.category?.name,
        data: item
      }))
      
      // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–≥–Ω–æ–∑—ã
      const firstResult = exactResults[0]
      const similarDiagnoses = await findSimilarDiagnoses(firstResult.title, firstResult.mkbCode)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–≥–Ω–æ–∑—ã –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
      if (similarDiagnoses.length > 0) {
        const similarResults = similarDiagnoses.map((item: any) => ({
          id: String(item._id),
          title: item.name,
          description: item.note || '',
          type: 'mkb',
          url: `/codifier/${item.category?.url}?id=${item._id}`,
          codes: { mkbCode: item.mkbCode, stationCode: item.stationCode },
          category: item.category?.name,
          data: item,
          isSimilar: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ—Ö–æ–∂–∏–π –¥–∏–∞–≥–Ω–æ–∑
        }))
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –ø–æ—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = [...results, ...similarResults]
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const totalDiagnoses = results.length
      let message = `–ü–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏ "${effectiveQuery}" –Ω–∞–π–¥–µ–Ω –¥–∏–∞–≥–Ω–æ–∑:\n\n`
      message += `**${firstResult.title}**\n`
      message += `‚Ä¢ –ú–ö–ë –∫–æ–¥: ${firstResult.mkbCode}\n`
      message += `‚Ä¢ –ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏: ${firstResult.stationCode}\n`
      if (firstResult.note) {
        message += `‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${firstResult.note}\n`
      }
      
      if (similarDiagnoses.length > 0) {
        message += `\n\n–ù–∞–π–¥–µ–Ω–æ ${totalDiagnoses} –¥–∏–∞–≥–Ω–æ–∑–æ–≤ (–≤–∫–ª—é—á–∞—è –ø–æ—Ö–æ–∂–∏–µ):`
      }
      
      // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤—Å–µ–º—É –¥–∏–∞–≥–Ω–æ–∑—É
      const relatedContent = await findRelatedContent(firstResult.title, firstResult.mkbCode)
      if (relatedContent.algorithms.length > 0 || relatedContent.drugs.length > 0) {
        message += `\nüìã **–°–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:**\n`
        if (relatedContent.algorithms.length > 0) {
          message += `‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤: ${relatedContent.algorithms.length}\n`
        }
        if (relatedContent.drugs.length > 0) {
          message += `‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤: ${relatedContent.drugs.length}\n`
        }
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const availableSections = ['mkb']
      
      if (relatedContent.algorithms.length > 0) {
        availableSections.push('algo')
      }
      
      if (relatedContent.drugs.length > 0) {
        availableSections.push('drug')
      }
      
      return {
        message,
        results,
        fullResults: {
          mkb: results,
          ls: [],
          algo: relatedContent.algorithms.map((algo: any) => ({
            id: String(algo._id),
            title: algo.title,
            description: algo.description || algo.content?.substring(0, 200) || '',
            type: 'algorithm',
            url: `/algorithms/${algo.section?.url}/${algo.category?.url}/${algo._id}`,
            category: algo.category?.name,
            section: algo.section?.name,
            data: algo
          })),
          drug: relatedContent.drugs.map((drug: any) => ({
            id: String(drug._id),
            title: drug.name,
            description: drug.description || '',
            type: 'drug',
            url: `/drugs/${drug._id}`,
            latinName: drug.latinName,
            forms: drug.forms,
            data: drug
          })),
          substation: []
        },
        forceExpand: null,
        intent: 'mkb',
        availableSections,
        clarifyingQuestions: [],
        aiIntent: 'mkb',
        aiConfidence: 1.0
      }
    }
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Fuse
  const shouldUseAI = fuseResults.length > 0 && fuseResults.some(r => r.score < 0.4) && !isStationCode && !isMkbCode
  
  if (shouldUseAI) {
    console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    const aiResponse = await ollamaAI.analyzeQuery(query, fuseResults, history)
    console.log('ü§ñ Ollama AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', aiResponse.message)
    return aiResponse
  } else {
    console.log('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –ò–ò')
    // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Fuse
    const results = fuseResults.map(item => ({
      id: String(item._id),
      title: item.title || item.name,
      description: item.description || item.note || '',
      type: item.type,
      url: item.type === 'mkb' ? `/codifier/${item.category?.url}?id=${item._id}` : 
           item.type === 'algorithm' ? `/algorithms/${item.section?.url}/${item.category?.url}/${item._id}` :
           item.type === 'drug' ? `/drugs/${item._id}` : '',
      codes: item.mkbCode ? { mkbCode: item.mkbCode, stationCode: item.stationCode } : undefined,
      category: item.category?.name,
      data: item
    }))

    let message = `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`
    if (results.length > 0) {
      message += `\n\n**${results[0].title}**`
      if (results[0].codes?.mkbCode) message += ` ‚Äî –ú–ö–ë: ${results[0].codes.mkbCode}`
      if (results[0].codes?.stationCode) message += `; –°—Ç–∞–Ω—Ü–∏—è: ${results[0].codes.stationCode}`
    }

    return {
    message,
      results: results.slice(0, 5),
      fullResults: {
        mkb: results.filter(r => r.type === 'mkb'),
        ls: results.filter(r => r.type === 'ls'),
        algo: results.filter(r => r.type === 'algorithm'),
        drug: results.filter(r => r.type === 'drug'),
        substation: results.filter(r => r.type === 'substation')
      },
      forceExpand: null,
      intent: simpleIntent,
      availableSections: [...new Set(results.map(r => r.type === 'algorithm' ? 'algo' : r.type))],
      clarifyingQuestions: [],
      aiIntent: simpleIntent,
      aiConfidence: 0.8
    }
  }
})