import connectDB from '~/server/utils/mongodb'
import User from '~/server/models/User'
import { createError, getMethod, readBody, getCookie } from 'h3'

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)
const connectCodes = new Map<string, { telegramId: string, expiresAt: number }>()

export default defineEventHandler(async (event) => {
  if (getMethod(event) !== 'POST') {
    throw createError({
      statusCode: 405,
      message: 'Method Not Allowed'
    })
  }

  try {
    await connectDB()
    
    const body = await readBody(event)
    const { code } = body
    
    if (!code || code.length !== 6) {
      throw createError({
        statusCode: 400,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
      })
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–¥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    const codeData = connectCodes.get(code)
    
    if (!codeData) {
      throw createError({
        statusCode: 404,
        message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (10 –º–∏–Ω—É—Ç)
    if (Date.now() > codeData.expiresAt) {
      connectCodes.delete(code)
      throw createError({
        statusCode: 410,
        message: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫'
      })
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
    const token = getCookie(event, 'token')
    
    if (!token) {
      throw createError({
        statusCode: 401,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
      })
    }
    
    const jwt = await import('jsonwebtoken')
    const config = useRuntimeConfig()
    
    let userId: any
    try {
      const decoded: any = jwt.default.verify(token, config.jwtSecret)
      userId = decoded.userId
    } catch (err) {
      throw createError({
        statusCode: 401,
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è'
      })
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId)
    
    if (!user) {
      throw createError({
        statusCode: 404,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
    const existingUser = await User.findOne({ 'telegram.id': codeData.telegramId })
    
    // –ï—Å–ª–∏ Telegram –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ
    if (existingUser && existingUser._id.toString() !== userId) {
      console.log(`üîó Telegram ${codeData.telegramId} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –æ—Ç–∫–ª—é—á–∞–µ–º...`)
      existingUser.telegram = undefined
      await existingUser.save()
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º Telegram –∫ —Ç–µ–∫—É—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
    user.telegram = {
      id: codeData.telegramId,
      username: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
      photo_url: '',
      auth_date: Date.now()
    }
    
    await user.save()
    
    console.log(`‚úÖ Telegram ${codeData.telegramId} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`)
    
    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    connectCodes.delete(code)
    
    return {
      success: true,
      message: 'Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω'
    }

  } catch (error: any) {
    console.error('Verify connect code error:', error)
    throw createError({
      statusCode: error.statusCode || 500,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞'
    })
  }
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ)
export const addConnectCode = (code: string, telegramId: string) => {
  if (!telegramId) {
    console.error('‚ùå Telegram ID –Ω–µ —É–∫–∞–∑–∞–Ω')
    return
  }
  
  connectCodes.set(code, {
    telegramId,
    expiresAt: Date.now() + 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç
  })
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
  setTimeout(() => {
    connectCodes.delete(code)
  }, 10 * 60 * 1000)
}
