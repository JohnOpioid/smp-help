import connectDB from '~/server/utils/mongodb'
import User from '~/server/models/User'
import jwt from 'jsonwebtoken'
import { setCookie, createError, getMethod, readBody } from 'h3'
import { getAuthCode, removeAuthCode, getAuthCodeByCode, removeAuthCodeByCode, getAuthCodeWithChat } from '~/server/utils/telegram-auth-codes'
import { bot } from '~/server/telegram/bot'

export default defineEventHandler(async (event) => {
  if (getMethod(event) !== 'POST') {
    throw createError({
      statusCode: 405,
      message: 'Method Not Allowed'
    })
  }

  try {
    await connectDB()
    
    const body = await readBody(event)
    const { telegramId, code } = body

    if (!code) {
      throw createError({
        statusCode: 400,
        message: '–ö–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      })
    }

    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–¥—É (–µ—Å–ª–∏ telegramId –Ω–µ —É–∫–∞–∑–∞–Ω)
    let storedAuth
    if (telegramId) {
      // –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± - –ø–æ telegramId
      storedAuth = getAuthCode(telegramId)
      
      if (!storedAuth || storedAuth.code !== code) {
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
        }
      }
    } else {
      // –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± - —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–¥—É
      const codeData = getAuthCodeByCode(code)
      
      if (!codeData) {
        return {
          success: false,
          message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.'
        }
      }
      
      storedAuth = getAuthCode(codeData.telegramId)
      
      if (!storedAuth) {
        return {
          success: false,
          message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.'
        }
      }
      
      if (storedAuth.code !== code) {
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(storedAuth.userId)
    
    if (!user) {
      return {
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
    user.lastTelegramAuth = new Date()
    await user.save()
    console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user._id)

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ
    let codeInfo = null
    if (telegramId) {
      codeInfo = getAuthCodeWithChat(telegramId)
    }
    
    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    if (telegramId) {
      removeAuthCode(telegramId)
    } else {
      removeAuthCodeByCode(code)
    }

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const { jwtSecret } = useRuntimeConfig()
    
    if (!jwtSecret) {
      throw createError({
        statusCode: 500,
        message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞'
      })
    }

    const token = jwt.sign(
      { userId: user._id, email: user.email },
      jwtSecret,
      { expiresIn: '7d' }
    )

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
    setCookie(event, 'token', token, {
      httpOnly: false,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
      path: '/'
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ –æ successful –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (bot && codeInfo?.chatId && codeInfo?.messageId) {
      try {
        console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ:', { chatId: codeInfo.chatId, messageId: codeInfo.messageId })
        
        await bot.editMessageText(
          `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü\\!\n\n‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\\.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/favorites \\- –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n/help \\- –°–ø—Ä–∞–≤–∫–∞\n\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
          {
            chat_id: codeInfo.chatId,
            message_id: codeInfo.messageId,
            parse_mode: 'MarkdownV2',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: 'favorites_category_all' }],
                [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]
              ]
            }
          }
        )
        
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ:', error)
      }
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö:', { hasBot: !!bot, hasChatId: !!codeInfo?.chatId, hasMessageId: !!codeInfo?.messageId })
    }

    return {
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      token,
      user: {
        _id: user._id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        telegram: user.telegram
      }
    }

  } catch (error: any) {
    console.error('Telegram verify code error:', error)
    return {
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞'
    }
  }
})

