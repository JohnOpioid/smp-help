import { defineEventHandler, readBody } from 'h3'
import connectDB from '~/server/utils/mongodb'
import Feedback from '~/server/models/Feedback'

export default defineEventHandler(async (event) => {
  await connectDB()
  const body = await readBody(event)
  
  const { 
    action, 
    messageId, 
    originalQuery, 
    aiResponse, 
    searchResults, 
    userFeedback,
    chatHistory,
    userIdentifier = 'anonymous'
  } = body

  console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', action, messageId)
  console.log('üìã –î–∞–Ω–Ω—ã–µ:', { originalQuery, aiResponse, userFeedback, userIdentifier, chatHistoryLength: chatHistory?.length })

  try {
    if (action === 'like') {
      // –ü—Ä–∏ –ª–∞–π–∫–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      if (!chatHistory || chatHistory.length === 0) {
        return {
          success: false,
          message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —á–∞—Ç–∞
      console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞:', chatHistory.length, '—Å–æ–æ–±—â–µ–Ω–∏–π')
      
      const lastUserMessage = chatHistory.filter((msg: any) => msg.isUser).pop()
      const lastAiMessage = chatHistory.filter((msg: any) => !msg.isUser).pop()
      
      console.log('üë§ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', lastUserMessage?.text?.substring(0, 100))
      console.log('ü§ñ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò:', lastAiMessage?.text?.substring(0, 100))
      
      if (!lastUserMessage || !lastAiMessage) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ò–ò')
        return {
          success: false,
          message: '–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞'
        }
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
      let analysis
      try {
        analysis = await Promise.race([
          analyzeChatForLearning(chatHistory),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout')), 15000)
          )
        ])
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞:', error)
        // Fallback –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ò–ò
        analysis = {
          intent: 'general',
          confidence: 0.7,
          issues: [],
          improvements: [],
          textAnalysis: `–£—Å–ø–µ—à–Ω—ã–π –¥–∏–∞–ª–æ–≥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${lastUserMessage.text}" –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç "${lastAiMessage.text?.substring(0, 100)}..."`,
          medicalTerms: extractMedicalTerms(lastUserMessage.text || ''),
          keywords: extractKeywords(lastUserMessage.text || ''),
          context: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
      const feedback = new Feedback({
        originalQuery: lastUserMessage.text || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
        aiResponse: lastAiMessage.text || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ò–ò',
        searchResults: lastAiMessage.results || [],
        userIdentifier,
        userFeedback: '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - —É—Å–ø–µ—à–Ω—ã–π –¥–∏–∞–ª–æ–≥',
        aiAnalysis: {
          intent: analysis.intent,
          confidence: analysis.confidence,
          issues: analysis.issues,
          improvements: analysis.improvements,
          textAnalysis: analysis.textAnalysis, // –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
          medicalTerms: analysis.medicalTerms,
          keywords: analysis.keywords,
          context: analysis.context
        },
        status: 'learned',
        learningData: {
          correctIntent: analysis.intent,
          correctResults: lastAiMessage.results || [],
          keywords: analysis.keywords || extractKeywords(lastUserMessage.text || ''),
          context: analysis.textAnalysis // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        }
      })
      
      await feedback.save()
      
      console.log('‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é "feedbacks":', feedback._id)
      console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', {
        originalQuery: feedback.originalQuery?.substring(0, 50),
        textAnalysis: feedback.aiAnalysis?.textAnalysis?.substring(0, 100),
        status: feedback.status
      })
      
      return {
        success: true,
        message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç—ã.',
        feedbackId: feedback._id
      }
    }

    if (action === 'dislike') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!originalQuery || !aiResponse) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', { originalQuery: !!originalQuery, aiResponse: !!aiResponse })
        return {
          success: false,
          message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
        }
      }

      // –ü—Ä–∏ –¥–∏–∑–ª–∞–π–∫–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      const feedback = new Feedback({
        originalQuery: originalQuery.trim(),
        aiResponse: aiResponse.trim(),
        searchResults,
        userIdentifier,
        userFeedback: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        status: 'pending'
      })
      
      await feedback.save()
      
      console.log('üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é "feedbacks":', feedback._id)
      
      return {
        success: true,
        feedbackId: feedback._id,
        message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –æ—Ç–≤–µ—Ç–µ?',
        askFeedback: true
      }
    }
    
    if (action === 'submit_feedback') {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      // messageId - —ç—Ç–æ timestamp, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –ø–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—é
      const feedback = await Feedback.findOne({ 
        $or: [
          { _id: messageId },
          { createdAt: { $gte: new Date(parseInt(messageId)) } }
        ]
      }).sort({ createdAt: -1 })
      
      if (!feedback) {
        return {
          success: false,
          message: '–ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      feedback.userFeedback = userFeedback
      feedback.status = 'analyzed'
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      const analysis = await analyzeFeedbackWithAI(originalQuery, aiResponse, userFeedback)
      
      feedback.aiAnalysis = analysis
      await feedback.save()
      
      console.log('üß† –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:', analysis)
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
      const aiReply = await generateFeedbackResponse(analysis, originalQuery)
      
      return {
        success: true,
        message: aiReply,
        analysis: analysis,
        askFeedback: false
      }
    }
    
    if (action === 'learn') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ –ë–î –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const feedback = await Feedback.findById(messageId)
      
      if (!feedback) {
        return {
          success: false,
          message: '–ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–∏–∑—É—á–µ–Ω–æ"
      feedback.status = 'learned'
      feedback.learningData = {
        correctIntent: feedback.aiAnalysis.intent,
        correctResults: feedback.searchResults,
        keywords: extractKeywords(feedback.originalQuery),
        context: feedback.userFeedback
      }
      
      await feedback.save()
      
      console.log('üéì –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:', feedback._id)
      
      return {
        success: true,
        message: '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –±—É–¥—É—â–µ–º.'
      }
    }
    
    return {
      success: false,
      message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error)
    return {
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
    }
  }
})

async function analyzeFeedbackWithAI(originalQuery: string, aiResponse: string, userFeedback: string) {
  const prompt = `
–¢—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–≤–µ—Ç–µ.

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–°: "${originalQuery}"
–û–¢–í–ï–¢ –ò–ò: "${aiResponse}"
–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${userFeedback}"

–ó–ê–î–ê–ß–ò:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò
2. –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è
3. –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. –û—Ü–µ–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{
  "issues": ["–ø—Ä–æ–±–ª–µ–º–∞1", "–ø—Ä–æ–±–ª–µ–º–∞2"],
  "improvements": ["—É–ª—É—á—à–µ–Ω–∏–µ1", "—É–ª—É—á—à–µ–Ω–∏–µ2"],
  "intent": "–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ_–Ω–∞–º–µ—Ä–µ–Ω–∏–µ",
  "confidence": 0.0-1.0
}
`

  // AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω
  return {
    issues: ['AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω'],
    improvements: ['–£–ª—É—á—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞'],
    intent: 'general',
    confidence: 0.1
  }
}

async function generateFeedbackResponse(analysis: any, originalQuery: string) {
  const prompt = `
–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.

–ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:
${JSON.stringify(analysis, null, 2)}

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–°: "${originalQuery}"

–ó–ê–î–ê–ß–ò:
1. –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
2. –ü—Ä–∏–∑–Ω–∞–π –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–≤–µ—Ç–µ
3. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –±—ã–ª–æ –Ω–µ —Ç–∞–∫
4. –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è
5. –°–∫–∞–∂–∏, —á—Ç–æ —É—á—Ç–µ—à—å —ç—Ç–æ –≤ –±—É–¥—É—â–µ–º

–°–¢–ò–õ–¨:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–π
- –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –≠–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
`

  // AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
  return '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –Ø —É—á—Ç—É –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±—É–¥—É—â–µ–º. üòä'
}

async function analyzeChatForLearning(chatHistory: any[]) {
  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON:
{
  "intent": "mkb|algo|drug|ls|substation|general",
  "confidence": 0.8,
  "textAnalysis": "–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞"
}

–î–∏–∞–ª–æ–≥: ${chatHistory.map(msg => `${msg.isUser ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ò–ò'}: ${msg.text}`).join(' | ')}`

  // AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω
  return {
    intent: 'general',
    confidence: 0.5,
    issues: [],
    improvements: [],
    textAnalysis: '–£—Å–ø–µ—à–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º',
    medicalTerms: [],
    keywords: [],
    context: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
  }
}

function extractKeywords(query: string): string[] {
  return query
    .toLowerCase()
    .replace(/[^\p{L}\s]/gu, ' ')
    .split(/\s+/)
    .filter(word => word.length >= 3)
    .slice(0, 5)
}

function extractMedicalTerms(query: string): string[] {
  // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
  const medicalWords = [
    '–≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏–≤–Ω–∞—è', '–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—á–µ—Å–∫–∞—è', '–±–æ–ª–µ–∑–Ω—å', '—Å–µ—Ä–¥—Ü–∞', '–¥–∏–∞–±–µ—Ç', '–∏–Ω—Å—É–ª–∏–Ω',
    '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–ª–µ—á–µ–Ω–∏–µ', '–¥–∏–∞–≥–Ω–æ–∑', '—Å–∏–º–ø—Ç–æ–º', '—Ç–µ—Ä–∞–ø–∏—è',
    '–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è', '–Ω–µ–≤—Ä–æ–ª–æ–≥–∏—è', '–ø–µ–¥–∏–∞—Ç—Ä–∏—è', '—Ö–∏—Ä—É—Ä–≥–∏—è', '–æ–Ω–∫–æ–ª–æ–≥–∏—è'
  ]
  
  const words = query.toLowerCase().split(/\s+/)
  return words.filter(word => 
    medicalWords.some(medical => medical.includes(word) || word.includes(medical))
  ).slice(0, 5)
}
