import { defineEventHandler, setHeader } from 'h3'
import connectDB from '~/server/utils/mongodb'

export default defineEventHandler(async (event) => {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ endpoint
  setHeader(event, 'Cache-Control', 'no-cache, no-store, must-revalidate')
  setHeader(event, 'Pragma', 'no-cache')
  setHeader(event, 'Expires', '0')
  
  try {
    console.log('üîç DB TEST: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...')
    
    const db = await connectDB()
    if (!db) {
      return {
        success: false,
        message: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        timestamp: new Date().toISOString()
      }
    }
    
    console.log('‚úÖ DB TEST: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const mongoose = await import('mongoose')
    const connectionState = mongoose.default.connection.readyState
    const connectionStates = ['disconnected', 'connected', 'connecting', 'disconnecting']
    
    console.log(`üîç DB TEST: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${connectionStates[connectionState]} (${connectionState})`)
    console.log(`üîç DB TEST: –ò–º—è –ë–î: ${mongoose.default.connection.name}`)
    console.log(`üîç DB TEST: –•–æ—Å—Ç –ë–î: ${mongoose.default.connection.host}`)
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const collections = await db.connection.db.listCollections().toArray()
    console.log(`üîç DB TEST: –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${collections.length}`)
    
    const collectionInfo = []
    for (const collection of collections) {
      try {
        const count = await db.connection.db.collection(collection.name).countDocuments()
        collectionInfo.push({
          name: collection.name,
          count: count
        })
        console.log(`üîç DB TEST: ${collection.name}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
      } catch (err) {
        console.error(`‚ùå DB TEST: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ ${collection.name}:`, err)
        collectionInfo.push({
          name: collection.name,
          count: 'error',
          error: err.message
        })
      }
    }
    
    return {
      success: true,
      message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ',
      timestamp: new Date().toISOString(),
      connection: {
        state: connectionStates[connectionState],
        stateCode: connectionState,
        database: mongoose.default.connection.name,
        host: mongoose.default.connection.host
      },
      collections: collectionInfo
    }
  } catch (error) {
    console.error('‚ùå DB TEST: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î:', error)
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î',
      error: error.message,
      timestamp: new Date().toISOString()
    }
  }
})
