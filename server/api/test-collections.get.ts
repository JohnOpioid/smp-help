import { defineEventHandler, setHeader } from 'h3'
import connectDB from '~/server/utils/mongodb'
import LocalStatus from '~/server/models/LocalStatus'
import MKB from '~/server/models/MKB'
import Algorithm from '~/server/models/Algorithm'
import Drug from '~/server/models/Drug'
import Substation from '~/server/models/Substation'

export default defineEventHandler(async (event) => {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ endpoint
  setHeader(event, 'Cache-Control', 'no-cache, no-store, must-revalidate')
  setHeader(event, 'Pragma', 'no-cache')
  setHeader(event, 'Expires', '0')
  
  try {
    console.log('üß™ TEST API: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...')
    await connectDB()
    console.log('‚úÖ TEST API: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ
    const results: any = {}
    
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º LocalStatus...')
      const localStatusCount = await LocalStatus.countDocuments()
      results.localStatuses = { count: localStatusCount, success: true }
      console.log(`‚úÖ LocalStatus: ${localStatusCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
    } catch (err) {
      console.error('‚ùå LocalStatus error:', err)
      results.localStatuses = { count: 0, success: false, error: err.message }
    }
    
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º MKB...')
      const mkbCount = await MKB.countDocuments()
      results.mkb = { count: mkbCount, success: true }
      console.log(`‚úÖ MKB: ${mkbCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
    } catch (err) {
      console.error('‚ùå MKB error:', err)
      results.mkb = { count: 0, success: false, error: err.message }
    }
    
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Algorithm...')
      const algorithmCount = await Algorithm.countDocuments()
      results.algorithms = { count: algorithmCount, success: true }
      console.log(`‚úÖ Algorithm: ${algorithmCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
    } catch (err) {
      console.error('‚ùå Algorithm error:', err)
      results.algorithms = { count: 0, success: false, error: err.message }
    }
    
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Drug...')
      const drugCount = await Drug.countDocuments()
      results.drugs = { count: drugCount, success: true }
      console.log(`‚úÖ Drug: ${drugCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
    } catch (err) {
      console.error('‚ùå Drug error:', err)
      results.drugs = { count: 0, success: false, error: err.message }
    }
    
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Substation...')
      const substationCount = await Substation.countDocuments()
      results.substations = { count: substationCount, success: true }
      console.log(`‚úÖ Substation: ${substationCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
    } catch (err) {
      console.error('‚ùå Substation error:', err)
      results.substations = { count: 0, success: false, error: err.message }
    }
    
    return {
      success: true,
      timestamp: new Date().toISOString(),
      results
    }
  } catch (error) {
    console.error('‚ùå TEST API: –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }
  }
})
