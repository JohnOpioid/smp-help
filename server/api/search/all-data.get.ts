import { defineEventHandler, setHeader } from 'h3'
import connectDB from '~/server/utils/mongodb'
import LocalStatus from '~/server/models/LocalStatus'
import MKB from '~/server/models/MKB'
import Algorithm from '~/server/models/Algorithm'
import Drug from '~/server/models/Drug'
import Substation from '~/server/models/Substation'
import Region from '~/server/models/Region'

export default defineEventHandler(async (event) => {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ endpoint
  setHeader(event, 'Cache-Control', 'no-cache, no-store, must-revalidate')
  setHeader(event, 'Pragma', 'no-cache')
  setHeader(event, 'Expires', '0')
  
  try {
    console.log('üîç API: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    console.log('üîç API: MONGODB_URI:', process.env.MONGODB_URI ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù')
    console.log('üîç API: NODE_ENV:', process.env.NODE_ENV)
    
    await connectDB()
    console.log('‚úÖ API: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const db = await connectDB()
    if (!db) {
      console.error('‚ùå API: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        data: null,
        totalItems: 0
      }
    }
    
    console.log('‚úÖ API: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞')
    console.log('üîç API: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', db.connection.readyState)
    console.log('üîç API: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', db.connection.name)
    
    console.log('üîç API: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞...')
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–¥–µ–ª—è–º
    console.log('üîç API: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏...')
    console.log('  - LocalStatus model:', !!LocalStatus)
    console.log('  - MKB model:', !!MKB)
    console.log('  - Algorithm model:', !!Algorithm)
    console.log('  - Drug model:', !!Drug)
    console.log('  - Substation model:', !!Substation)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
    try {
      const mongoose = await import('mongoose')
      console.log('üîç API: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', mongoose.default.connection.readyState)
      console.log('üîç API: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', mongoose.default.connection.name)
      console.log('üîç API: –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', mongoose.default.connection.host)
    } catch (err) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      const collections = await db.connection.db.listCollections().toArray()
      console.log('üîç API: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collections.map(c => c.name))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      for (const collection of collections) {
        try {
          const count = await db.connection.db.collection(collection.name).countDocuments()
          console.log(`üîç API: –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collection.name}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
        } catch (err) {
          console.error(`‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ ${collection.name}:`, err)
        }
      }
    } catch (err) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', err)
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('üîç API: –ó–∞–≥—Ä—É–∂–∞–µ–º LocalStatus...')
    let localStatuses = []
    try {
      localStatuses = await LocalStatus.find({}).populate('category', 'name url').lean()
      console.log('‚úÖ API: LocalStatus –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', localStatuses.length)
    } catch (err) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LocalStatus:', err)
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ populate
      try {
        localStatuses = await LocalStatus.find({}).lean()
        console.log('‚ö†Ô∏è API: LocalStatus –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ populate:', localStatuses.length)
      } catch (err2) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LocalStatus –±–µ–∑ populate:', err2)
        localStatuses = []
      }
    }
    
    console.log('üîç API: –ó–∞–≥—Ä—É–∂–∞–µ–º MKB...')
    let mkbCodes = []
    try {
      mkbCodes = await MKB.find({}).populate('category', 'name url').lean()
      console.log('‚úÖ API: MKB –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', mkbCodes.length)
    } catch (err) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MKB:', err)
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ populate
      try {
        mkbCodes = await MKB.find({}).lean()
        console.log('‚ö†Ô∏è API: MKB –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ populate:', mkbCodes.length)
      } catch (err2) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MKB –±–µ–∑ populate:', err2)
        mkbCodes = []
      }
    }
    
    console.log('üîç API: –ó–∞–≥—Ä—É–∂–∞–µ–º Algorithm...')
    let algorithms = []
    try {
      algorithms = await Algorithm.find({}).populate('category', 'name url').populate('section', 'name url').lean()
      console.log('‚úÖ API: Algorithm –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', algorithms.length)
    } catch (err) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Algorithm:', err)
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ populate
      try {
        algorithms = await Algorithm.find({}).lean()
        console.log('‚ö†Ô∏è API: Algorithm –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ populate:', algorithms.length)
      } catch (err2) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Algorithm –±–µ–∑ populate:', err2)
        algorithms = []
      }
    }
    
    console.log('üîç API: –ó–∞–≥—Ä—É–∂–∞–µ–º Drug...')
    let drugs = []
    try {
      drugs = await Drug.find({}).populate('categories', 'name url').lean()
      console.log('‚úÖ API: Drug –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', drugs.length)
    } catch (err) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Drug:', err)
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ populate
      try {
        drugs = await Drug.find({}).lean()
        console.log('‚ö†Ô∏è API: Drug –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ populate:', drugs.length)
      } catch (err2) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Drug –±–µ–∑ populate:', err2)
        drugs = []
      }
    }
    
    console.log('üîç API: –ó–∞–≥—Ä—É–∂–∞–µ–º Substation...')
    let substations = []
    try {
      substations = await Substation.find({}).populate('region', 'name').lean()
      console.log('‚úÖ API: Substation –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', substations.length)
    } catch (err) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Substation:', err)
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ populate
      try {
        substations = await Substation.find({}).lean()
        console.log('‚ö†Ô∏è API: Substation –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ populate:', substations.length)
      } catch (err2) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Substation –±–µ–∑ populate:', err2)
        substations = []
      }
    }
    
    console.log('üìä API: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:')
    console.log(`  - LocalStatus: ${localStatuses.length}`)
    console.log(`  - MKB: ${mkbCodes.length}`)
    console.log(`  - Algorithm: ${algorithms.length}`)
    console.log(`  - Drug: ${drugs.length}`)
    console.log(`  - Substation: ${substations.length}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (localStatuses.length === 0) {
      console.log('‚ö†Ô∏è API: LocalStatus –ø—É—Å—Ç—ã!')
    }
    if (mkbCodes.length === 0) {
      console.log('‚ö†Ô∏è API: MKB –ø—É—Å—Ç—ã!')
    }
    if (algorithms.length === 0) {
      console.log('‚ö†Ô∏è API: Algorithm –ø—É—Å—Ç—ã!')
    }
    if (drugs.length === 0) {
      console.log('‚ö†Ô∏è API: Drug –ø—É—Å—Ç—ã!')
    }
    if (substations.length === 0) {
      console.log('‚ö†Ô∏è API: Substation –ø—É—Å—Ç—ã!')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    try {
      const localStatusCount = await LocalStatus.countDocuments()
      const mkbCount = await MKB.countDocuments()
      const algorithmCount = await Algorithm.countDocuments()
      const drugCount = await Drug.countDocuments()
      const substationCount = await Substation.countDocuments()
      
      console.log('üìä API: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö:')
      console.log(`  - LocalStatus: ${localStatusCount}`)
      console.log(`  - MKB: ${mkbCount}`)
      console.log(`  - Algorithm: ${algorithmCount}`)
      console.log(`  - Drug: ${drugCount}`)
      console.log(`  - Substation: ${substationCount}`)
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      console.log('üìä API: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:')
      console.log(`  - LocalStatus: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${localStatuses.length}, –≤—Å–µ–≥–æ ${localStatusCount}`)
      console.log(`  - MKB: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${mkbCodes.length}, –≤—Å–µ–≥–æ ${mkbCount}`)
      console.log(`  - Algorithm: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${algorithms.length}, –≤—Å–µ–≥–æ ${algorithmCount}`)
      console.log(`  - Drug: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${drugs.length}, –≤—Å–µ–≥–æ ${drugCount}`)
      console.log(`  - Substation: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${substations.length}, –≤—Å–µ–≥–æ ${substationCount}`)
    } catch (err) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', err)
    }
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (localStatuses.length > 0) {
      console.log('üìù LocalStatus sample:', {
        _id: localStatuses[0]._id,
        title: localStatuses[0].title,
        category: localStatuses[0].category
      })
    }
    
    if (mkbCodes.length > 0) {
      console.log('üìù MKB sample:', {
        _id: mkbCodes[0]._id,
        title: mkbCodes[0].title,
        category: mkbCodes[0].category
      })
    }
    
    if (algorithms.length > 0) {
      console.log('üìù Algorithm sample:', {
        _id: algorithms[0]._id,
        title: algorithms[0].title,
        category: algorithms[0].category,
        section: algorithms[0].section
      })
    }
    
    if (drugs.length > 0) {
      console.log('üìù Drug sample:', {
        _id: drugs[0]._id,
        name: drugs[0].name,
        categories: drugs[0].categories
      })
    }
    
    if (substations.length > 0) {
      console.log('üìù Substation sample:', {
        _id: substations[0]._id,
        name: substations[0].name,
        region: substations[0].region
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
    const totalItems = localStatuses.length + mkbCodes.length + algorithms.length + drugs.length + substations.length
    if (totalItems === 0) {
      return {
        success: false,
        message: '–í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç—ã',
        data: {
          localStatuses: { items: [], total: 0 },
          mkbCodes: { items: [], total: 0 },
          algorithms: { items: [], total: 0 },
          drugs: { items: [], total: 0 },
          substations: { items: [], total: 0 }
        },
        totalItems: 0
      }
    }
    
    return {
      success: true,
      data: {
        localStatuses: {
          items: localStatuses,
          total: localStatuses.length
        },
        mkbCodes: {
          items: mkbCodes,
          total: mkbCodes.length
        },
        algorithms: {
          items: algorithms,
          total: algorithms.length
        },
        drugs: {
          items: drugs,
          total: drugs.length
        },
        substations: {
          items: substations,
          total: substations.length
        }
      },
      totalItems: totalItems
    }
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞:', error)
    return { 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞',
      data: {
        localStatuses: { items: [], total: 0 },
        mkbCodes: { items: [], total: 0 },
        algorithms: { items: [], total: 0 },
        drugs: { items: [], total: 0 },
        substations: { items: [], total: 0 }
      },
      totalItems: 0
    }
  }
})