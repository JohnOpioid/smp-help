import { defineEventHandler, readBody } from 'h3'
import connectDB from '~/server/utils/mongodb'
import LocalStatus from '~/server/models/LocalStatus'
import MKB from '~/server/models/MKB'
import Algorithm from '~/server/models/Algorithm'
import Drug from '~/server/models/Drug'
import DrugCategory from '~/server/models/DrugCategory'
import Substation from '~/server/models/Substation'

export default defineEventHandler(async (event) => {
  try {
    const { query, limit = 50 } = await readBody(event)
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    console.log('üîç Search API called with query:', query, 'type:', typeof query)
    
    if (!query || typeof query !== 'string' || query.trim().length < 3) {
      return {
        success: true,
        results: [],
        groupedResults: {
          mkb: [],
          ls: [],
          algorithm: [],
          drug: [],
          substation: []
        },
        totalResults: 0,
        query: query || ''
      }
    }

    await connectDB()
    console.log('üîç Connected to MongoDB')
    
    const searchQuery = query.trim()
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const createSearchPatterns = (query: string) => {
      const patterns = []
      
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      patterns.push(query)
      
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      patterns.push(query.replace(/\s+/g, ' ').trim())
      
      // –î–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π: "32 –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è" -> "–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ‚Ññ 32", "–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è 32"
      if (/^\d+\s+–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è/i.test(query)) {
        const match = query.match(/^(\d+)\s+–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è/i)
        if (match) {
          const number = match[1]
          patterns.push(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ‚Ññ ${number}`)
          patterns.push(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ${number}`)
          patterns.push(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è${number}`)
          patterns.push(`${number} –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è`)
          patterns.push(`${number} –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏`)
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–¥–∞—Ö —Å—Ç–∞–Ω—Ü–∏–π
          patterns.push(number)
        }
      }
      
      // –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫: "–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ‚Ññ 32" -> "32 –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è"
      if (/–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è\s*‚Ññ?\s*\d+/i.test(query)) {
        const match = query.match(/–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è\s*‚Ññ?\s*(\d+)/i)
        if (match) {
          const number = match[1]
          patterns.push(`${number} –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è`)
          patterns.push(`${number} –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏`)
          patterns.push(number)
        }
      }
      
      // –î–ª—è –ú–ö–ë: "I10 –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è" -> "–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è I10"
      if (/^[A-Z]\d+\s+\w+/i.test(query)) {
        const match = query.match(/^([A-Z]\d+)\s+(.+)/i)
        if (match) {
          patterns.push(`${match[2]} ${match[1]}`)
        }
      }
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
      const words = query.split(/\s+/).filter(word => word.length > 0)
      if (words.length > 1) {
        // –í—Å–µ —Å–ª–æ–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        patterns.push(words.reverse().join(' '))
        // –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–æ–≤
        for (let i = 0; i < words.length; i++) {
          const withoutWord = words.filter((_, index) => index !== i).join(' ')
          if (withoutWord.trim()) {
            patterns.push(withoutWord)
          }
        }
      }
      
      return [...new Set(patterns)] // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    }
    
    const searchPatterns = createSearchPatterns(searchQuery)
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    const searchRegexes = searchPatterns.map(pattern => 
      new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i')
    )
    
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const mainSearchRegex = new RegExp(searchQuery.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i')
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const getResultPriority = (item: any, query: string, patterns: string[]) => {
      let priority = 0
      const searchFields = ['title', 'name', 'description', 'note', 'content', 'mkbCode', 'stationCode', 'localis', 'latinName', 'synonyms', 'analogs', 'address', 'phones']
      const queryLower = query.toLowerCase()
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
      if (item.type === 'substation' && /^\d+\s+–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è/i.test(query)) {
        const match = query.match(/^(\d+)\s+–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è/i)
        if (match) {
          const number = match[1]
          const name = String(item.name || item.title || '').toLowerCase()
          
          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏
          if (name.includes(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ‚Ññ ${number}`) || 
              name.includes(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ${number}`) ||
              name.includes(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è${number}`) ||
              name.includes(`${number} –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è`)) {
            priority += 50000 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
          }
          
          // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
          else if (name.includes(number)) {
            priority += 10000
          }
        }
      }
      
      for (const field of searchFields) {
        if (item[field]) {
          const fieldValue = String(item[field]).toLowerCase()
          
          // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ/–Ω–∞–∑–≤–∞–Ω–∏–∏
          if ((field === 'title' || field === 'name') && fieldValue.includes(queryLower)) {
            priority += 1000
          }
          
          // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–∞ (–µ—â–µ –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
          if ((field === 'title' || field === 'name') && fieldValue.startsWith(queryLower)) {
            priority += 2000
          }
          
          // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
          if (fieldValue.includes(queryLower)) {
            priority += 100
          }
          
          // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
          for (const pattern of patterns) {
            if (fieldValue.includes(pattern.toLowerCase())) {
              priority += 50
            }
          }
        }
      }
      
      return priority
    }
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ MongoDB –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ú–ö–ë
    const mkbQuery = {
      $or: [
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
        { name: mainSearchRegex },
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
        { name: { $in: searchRegexes } },
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
        { description: mainSearchRegex },
        { note: mainSearchRegex },
        { mkbCode: mainSearchRegex },
        { stationCode: mainSearchRegex },
        { synonyms: mainSearchRegex },
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
        { description: { $in: searchRegexes } },
        { note: { $in: searchRegexes } },
        { mkbCode: { $in: searchRegexes } },
        { stationCode: { $in: searchRegexes } },
        { synonyms: { $in: searchRegexes } }
      ]
    }
    
    console.log('üîç Executing MongoDB queries...')
    
    const [mkbResults, lsResults, algorithmResults, drugResults, substationResults] = await Promise.all([
      // –ü–æ–∏—Å–∫ –ø–æ –ú–ö–ë - —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, –ø–æ—Ç–æ–º –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
      MKB.find(mkbQuery)
      .populate('category', 'name url')
      // –õ–∏–º–∏—Ç —É–±—Ä–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      .lean(),
      
      // –ü–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º
      LocalStatus.find({
        $or: [
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
          { name: mainSearchRegex },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
          { name: { $in: searchRegexes } },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
          { description: mainSearchRegex },
          { note: mainSearchRegex },
          { localis: mainSearchRegex },
          { code: mainSearchRegex },
          { stationCode: mainSearchRegex },
          { complaints: mainSearchRegex },
          { anamnesis: mainSearchRegex },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
          { description: { $in: searchRegexes } },
          { note: { $in: searchRegexes } },
          { localis: { $in: searchRegexes } },
          { code: { $in: searchRegexes } },
          { stationCode: { $in: searchRegexes } },
          { complaints: { $in: searchRegexes } },
          { anamnesis: { $in: searchRegexes } }
        ]
      })
      .populate('category', 'name url')
      // –õ–∏–º–∏—Ç —É–±—Ä–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      .lean(),
      
      // –ü–æ–∏—Å–∫ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º
      Algorithm.find({
        $or: [
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
          { title: mainSearchRegex },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
          { title: { $in: searchRegexes } },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
          { description: mainSearchRegex },
          { note: mainSearchRegex },
          { content: mainSearchRegex },
          { mkbCodes: mainSearchRegex },
          { mkbExclusions: mainSearchRegex },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
          { description: { $in: searchRegexes } },
          { note: { $in: searchRegexes } },
          { content: { $in: searchRegexes } },
          { mkbCodes: { $in: searchRegexes } },
          { mkbExclusions: { $in: searchRegexes } }
        ]
      })
      .populate('category', 'name url')
      .populate('section', 'name url')
      // –õ–∏–º–∏—Ç —É–±—Ä–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      .lean(),
      
      // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º
      Drug.find({
        $or: [
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
          { name: mainSearchRegex },
          { title: mainSearchRegex },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
          { name: { $in: searchRegexes } },
          { title: { $in: searchRegexes } },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
          { description: mainSearchRegex },
          { note: mainSearchRegex },
          { latinName: mainSearchRegex },
          { synonyms: mainSearchRegex },
          { analogs: mainSearchRegex },
          { groups: mainSearchRegex },
          { mechanism: mainSearchRegex },
          { indications: mainSearchRegex },
          { contraindications: mainSearchRegex },
          { adverse: mainSearchRegex },
          { interactions: mainSearchRegex },
          { antidotes: mainSearchRegex },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
          { description: { $in: searchRegexes } },
          { note: { $in: searchRegexes } },
          { latinName: { $in: searchRegexes } },
          { synonyms: { $in: searchRegexes } },
          { analogs: { $in: searchRegexes } },
          { groups: { $in: searchRegexes } },
          { mechanism: { $in: searchRegexes } },
          { indications: { $in: searchRegexes } },
          { contraindications: { $in: searchRegexes } },
          { adverse: { $in: searchRegexes } },
          { interactions: { $in: searchRegexes } },
          { antidotes: { $in: searchRegexes } }
        ]
      })
      .populate('categories', 'name url')
      // –õ–∏–º–∏—Ç —É–±—Ä–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      .lean(),
      
      // –ü–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è–º - –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤
      Substation.find({
        $or: [
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π
          { name: mainSearchRegex },
          { title: mainSearchRegex },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π
          { name: { $in: searchRegexes } },
          { title: { $in: searchRegexes } },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ stationCode)
          { stationCode: mainSearchRegex },
          { stationCode: { $in: searchRegexes } },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
          { description: mainSearchRegex },
          { address: mainSearchRegex },
          { phones: mainSearchRegex },
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
          { description: { $in: searchRegexes } },
          { address: { $in: searchRegexes } },
          { phones: { $in: searchRegexes } }
        ]
      })
      .populate('region', 'name')
      // –õ–∏–º–∏—Ç —É–±—Ä–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      .lean()
    ])

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    const mkbWithType = mkbResults.map(item => ({ 
      ...item, 
      type: 'mkb',
      priority: getResultPriority(item, searchQuery, searchPatterns)
    }))
    const lsWithType = lsResults.map(item => ({ 
      ...item, 
      type: 'ls',
      priority: getResultPriority(item, searchQuery, searchPatterns)
    }))
    const algorithmWithType = algorithmResults.map(item => ({ 
      ...item, 
      type: 'algorithm',
      priority: getResultPriority(item, searchQuery, searchPatterns)
    }))
    const drugWithType = drugResults.map(item => ({ 
      ...item, 
      type: 'drug',
      priority: getResultPriority(item, searchQuery, searchPatterns)
    }))
    const substationWithType = substationResults.map(item => ({ 
      ...item, 
      type: 'substation',
      priority: getResultPriority(item, searchQuery, searchPatterns)
    }))
    
    
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    const sortedResults = [
      ...mkbWithType,
      ...lsWithType,
      ...algorithmWithType,
      ...drugWithType,
      ...substationWithType
    ].sort((a, b) => b.priority - a.priority)
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allResults = sortedResults
    

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const groupedResults = {
      mkb: sortedResults.filter(item => item.type === 'mkb'),
      ls: sortedResults.filter(item => item.type === 'ls'),
      algorithm: sortedResults.filter(item => item.type === 'algorithm'),
      drug: sortedResults.filter(item => item.type === 'drug'),
      substation: sortedResults.filter(item => item.type === 'substation')
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    if (/^\d+\s+–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è/i.test(searchQuery)) {
      const match = searchQuery.match(/^(\d+)\s+–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è/i)
      if (match) {
        const targetNumber = match[1]
        groupedResults.substation.sort((a, b) => {
          const aName = String(a.name || a.title || '').toLowerCase()
          const bName = String(b.name || b.title || '').toLowerCase()
          
          const aExactMatch = aName.includes(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ‚Ññ ${targetNumber}`) || 
                              aName.includes(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ${targetNumber}`) ||
                              aName.includes(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è${targetNumber}`) ||
                              aName.includes(`${targetNumber} –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è`)
          
          const bExactMatch = bName.includes(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ‚Ññ ${targetNumber}`) || 
                              bName.includes(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ${targetNumber}`) ||
                              bName.includes(`–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è${targetNumber}`) ||
                              bName.includes(`${targetNumber} –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è`)
          
          // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
          if (aExactMatch && !bExactMatch) return -1
          if (!aExactMatch && bExactMatch) return 1
          
          // –ï—Å–ª–∏ –æ–±–∞ —Ç–æ—á–Ω—ã–µ –∏–ª–∏ –æ–±–∞ –Ω–µ—Ç–æ—á–Ω—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
          return b.priority - a.priority
        })
      }
    }
    
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const sortedGroupedResults = Object.entries(groupedResults)
      .filter(([_, results]) => results.length > 0) // –¢–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      .sort(([keyA, a], [keyB, b]) => {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
        if (/^\d+\s+–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è/i.test(searchQuery)) {
          if (keyA === 'substation' && keyB !== 'substation') return -1
          if (keyB === 'substation' && keyA !== 'substation') return 1
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ
        const avgPriorityA = a.reduce((sum, item) => sum + (item.priority || 0), 0) / a.length
        const avgPriorityB = b.reduce((sum, item) => sum + (item.priority || 0), 0) / b.length
        
        if (avgPriorityA !== avgPriorityB) {
          return avgPriorityB - avgPriorityA // –ü–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        }
        
        // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–≤–Ω—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        return b.length - a.length
      })
      .reduce((acc, [key, results]) => {
        acc[key] = results
        return acc
      }, {} as Record<string, any[]>)

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const orderedSections = Object.keys(sortedGroupedResults)


    return {
      success: true,
      results: allResults,
      groupedResults: sortedGroupedResults,
      orderedSections: orderedSections, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
      totalResults: allResults.length,
      query: searchQuery,
      timestamp: Date.now()
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error)
    return {
      success: false,
      results: [],
      groupedResults: {
        mkb: [],
        ls: [],
        algorithm: [],
        drug: [],
        substation: []
      },
      totalResults: 0,
      query: '',
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞'
    }
  }
})
