import { defineEventHandler, readBody } from 'h3'
import connectDB from '~/server/utils/mongodb'
import LocalStatus from '~/server/models/LocalStatus'
import MKB from '~/server/models/MKB'
import Algorithm from '~/server/models/Algorithm'
import Drug from '~/server/models/Drug'
import Substation from '~/server/models/Substation'

export default defineEventHandler(async (event) => {
  try {
    await connectDB()
    
    const { ids } = await readBody(event)
    
    if (!ids || !Array.isArray(ids)) {
      return {
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ ID'
      }
    }
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å ID: ${ids.join(', ')}`)
    
    const results = []
    
    for (const id of ids) {
      // –ò—â–µ–º –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const [mkbRecord, lsRecord, algorithmRecord, drugRecord, substationRecord] = await Promise.all([
        MKB.findById(id).lean(),
        LocalStatus.findById(id).lean(),
        Algorithm.findById(id).lean(),
        Drug.findById(id).lean(),
        Substation.findById(id).lean()
      ])
      
      const foundRecord = mkbRecord || lsRecord || algorithmRecord || drugRecord || substationRecord
      
      if (foundRecord) {
        let type = 'unknown'
        if (mkbRecord) type = 'mkb'
        else if (lsRecord) type = 'ls'
        else if (algorithmRecord) type = 'algorithm'
        else if (drugRecord) type = 'drug'
        else if (substationRecord) type = 'substation'
        
        results.push({
          id,
          type,
          title: foundRecord.title || foundRecord.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          description: foundRecord.description || '',
          note: foundRecord.note || '',
          mkbCode: foundRecord.mkbCode || '',
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å–ª–æ–≤–æ "–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç"
          containsPancreatitis: JSON.stringify(foundRecord).toLowerCase().includes('–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç')
        })
      } else {
        results.push({
          id,
          type: 'not_found',
          title: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          description: '',
          note: '',
          mkbCode: '',
          containsPancreatitis: false
        })
      }
    }
    
    console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ ID ${ids.join(', ')}:`, results)
    
    return {
      success: true,
      results
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–µ–π:', error)
    return {
      success: false,
      error: error.message
    }
  }
})
