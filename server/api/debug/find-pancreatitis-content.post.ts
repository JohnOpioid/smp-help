import { defineEventHandler, readBody } from 'h3'
import connectDB from '~/server/utils/mongodb'
import Algorithm from '~/server/models/Algorithm'

export default defineEventHandler(async (event) => {
  try {
    await connectDB()
    
    console.log(`üîç –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å "–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç" –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤`)
    
    // –ò—â–µ–º –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    const algorithmsWithPancreatitis = await Algorithm.find({
      content: { $regex: '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç', $options: 'i' }
    }).lean()
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å "–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç" –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º: ${algorithmsWithPancreatitis.length}`)
    
    return {
      success: true,
      count: algorithmsWithPancreatitis.length,
      algorithms: algorithmsWithPancreatitis.map(alg => ({
        id: alg._id,
        title: alg.title,
        hasPancreatitisInContent: alg.content.toLowerCase().includes('–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç'),
        contentPreview: alg.content.substring(0, 200) + '...'
      }))
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö:', error)
    return {
      success: false,
      error: error.message
    }
  }
})
