import { defineEventHandler, readBody } from 'h3'
import connectDB from '~/server/utils/mongodb'
import MKB from '~/server/models/MKB'

export default defineEventHandler(async (event) => {
  try {
    await connectDB()
    
    const searchTerms = [
      '–û—Å—Ç—Ä—ã–π –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–π —ç—Ç–∏–æ–ª–æ–≥–∏–∏',
      '–û—Å—Ç—Ä—ã–π –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç',
      '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç –∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–π —ç—Ç–∏–æ–ª–æ–≥–∏–∏',
      '–î—Ä—É–≥–∏–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç—ã'
    ]
    
    console.log(`üîç –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç–∞ –≤ –ú–ö–ë`)
    
    const results = []
    
    for (const term of searchTerms) {
      // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      const exactMatch = await MKB.findOne({ title: term }).lean()
      
      // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const partialMatches = await MKB.find({
        $or: [
          { title: { $regex: term, $options: 'i' } },
          { description: { $regex: term, $options: 'i' } },
          { note: { $regex: term, $options: 'i' } },
          { mkbCode: { $regex: term, $options: 'i' } }
        ]
      }).lean()
      
      results.push({
        searchTerm: term,
        exactMatch,
        partialMatches: partialMatches.slice(0, 5), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        totalPartialMatches: partialMatches.length
      })
    }
    
    // –¢–∞–∫–∂–µ –ø–æ–∏—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–æ–≤–æ "–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç"
    const allPancreatitis = await MKB.find({
      $or: [
        { title: { $regex: '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç', $options: 'i' } },
        { description: { $regex: '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç', $options: 'i' } },
        { note: { $regex: '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç', $options: 'i' } },
        { mkbCode: { $regex: '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç', $options: 'i' } }
      ]
    }).lean()
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å "–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç": ${allPancreatitis.length}`)
    
    return {
      success: true,
      specificSearches: results,
      allPancreatitisRecords: allPancreatitis.map(record => ({
        id: record._id,
        title: record.title,
        mkbCode: record.mkbCode,
        description: record.description,
        note: record.note
      }))
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç–∞:', error)
    return {
      success: false,
      error: error.message
    }
  }
})
