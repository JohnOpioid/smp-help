import { defineEventHandler, readBody } from 'h3'
import connectDB from '~/server/utils/mongodb'
import LocalStatus from '~/server/models/LocalStatus'
import MKB from '~/server/models/MKB'
import Algorithm from '~/server/models/Algorithm'
import Drug from '~/server/models/Drug'
import Substation from '~/server/models/Substation'

export default defineEventHandler(async (event) => {
  try {
    await connectDB()
    
    const searchTerm = '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç'
    const regex = new RegExp(searchTerm, 'i')
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å "${searchTerm}" –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏`)
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const [mkbCount, lsCount, algorithmCount, drugCount, substationCount] = await Promise.all([
      // –ú–ö–ë - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª—è–º
      MKB.countDocuments({
        $or: [
          { title: regex },
          { description: regex },
          { note: regex },
          { mkbCode: regex },
          { stationCode: regex },
          { synonyms: regex }
        ]
      }),
      
      // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      LocalStatus.countDocuments({
        $or: [
          { title: regex },
          { description: regex },
          { note: regex },
          { localis: regex },
          { synonyms: regex }
        ]
      }),
      
      // –ê–ª–≥–æ—Ä–∏—Ç–º—ã
      Algorithm.countDocuments({
        $or: [
          { title: regex },
          { description: regex },
          { note: regex },
          { content: regex }
        ]
      }),
      
      // –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã
      Drug.countDocuments({
        $or: [
          { name: regex },
          { title: regex },
          { description: regex },
          { note: regex },
          { latinName: regex },
          { synonyms: regex },
          { analogs: regex }
        ]
      }),
      
      // –ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏
      Substation.countDocuments({
        $or: [
          { name: regex },
          { title: regex },
          { description: regex },
          { address: regex },
          { phones: regex }
        ]
      })
    ])
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const [mkbExamples, lsExamples, algorithmExamples, drugExamples, substationExamples] = await Promise.all([
      MKB.find({
        $or: [
          { title: regex },
          { description: regex },
          { note: regex },
          { mkbCode: regex },
          { stationCode: regex },
          { synonyms: regex }
        ]
      }).limit(5).select('title description note mkbCode').lean(),
      
      LocalStatus.find({
        $or: [
          { title: regex },
          { description: regex },
          { note: regex },
          { localis: regex },
          { synonyms: regex }
        ]
      }).limit(5).select('title description note localis').lean(),
      
      Algorithm.find({
        $or: [
          { title: regex },
          { description: regex },
          { note: regex },
          { content: regex }
        ]
      }).limit(5).select('title description note').lean(),
      
      Drug.find({
        $or: [
          { name: regex },
          { title: regex },
          { description: regex },
          { note: regex },
          { latinName: regex },
          { synonyms: regex },
          { analogs: regex }
        ]
      }).limit(5).select('name title description note latinName').lean(),
      
      Substation.find({
        $or: [
          { name: regex },
          { title: regex },
          { description: regex },
          { address: regex },
          { phones: regex }
        ]
      }).limit(5).select('name title description address').lean()
    ])
    
    const result = {
      searchTerm,
      counts: {
        mkb: mkbCount,
        ls: lsCount,
        algorithm: algorithmCount,
        drug: drugCount,
        substation: substationCount,
        total: mkbCount + lsCount + algorithmCount + drugCount + substationCount
      },
      examples: {
        mkb: mkbExamples,
        ls: lsExamples,
        algorithm: algorithmExamples,
        drug: drugExamples,
        substation: substationExamples
      }
    }
    
    console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ "${searchTerm}":`, result.counts)
    
    return {
      success: true,
      ...result
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–µ–π:', error)
    return {
      success: false,
      error: error.message,
      counts: {
        mkb: 0,
        ls: 0,
        algorithm: 0,
        drug: 0,
        substation: 0,
        total: 0
      }
    }
  }
})
