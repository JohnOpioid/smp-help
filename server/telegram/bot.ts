import TelegramBot from 'node-telegram-bot-api'
import { ofetch } from 'ofetch'

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || ''

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ HTTPS) –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
// Webhook —Ç—Ä–µ–±—É–µ—Ç HTTPS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!BOT_TOKEN) {
  console.error('‚ùå ERROR: Telegram Bot Token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
  console.error('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN')
}

export const bot = BOT_TOKEN ? new TelegramBot(BOT_TOKEN, { 
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      allowed_updates: ['message', 'callback_query']
    }
  }
}) : null

// Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
if (bot) {
  bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.message)
  })

  bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error.message)
  })
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
if (bot) {
  bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
  const chatId = msg.chat.id
  const firstName = msg.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
  const command = match?.[1]
  
  // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å connect_, —ç—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
  if (command?.startsWith('connect_')) {
    const userId = command.replace('connect_', '')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId –Ω–µ –ø—É—Å—Ç–æ–π
    if (!userId || userId === 'user' || userId === 'unknown') {
      console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

ID: ${userId}

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram —Å–Ω–æ–≤–∞.`)
      return
    }
    
    try {
      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram
      const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || 'https://helpsmp.ru'
      const response = await ofetch(`${apiUrl}/api/auth/connect-telegram`, {
        method: 'POST',
        body: {
          userId,
          telegramId: msg.from?.id,
          username: msg.from?.username,
          firstName: msg.from?.first_name,
          lastName: msg.from?.last_name,
          photo_url: msg.from?.photo_url
        },
        rejectUnauthorized: false
      } as any)
      
      if (response.success) {
        const settingsUrl = `${apiUrl}/profile/settings?telegram_connected=true`
        
        await bot.sendMessage(chatId, `‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!

üë§ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç: ${msg.from?.first_name} ${msg.from?.last_name || ''}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ Telegram.

üîó –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', url: settingsUrl }],
              [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]
            ]
          }
        })
      } else {
        await bot.sendMessage(chatId, `‚ùå ${response.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}`)
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram:', error)
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram'
      
      if (error.data?.statusMessage) {
        errorMessage = error.data.statusMessage
      } else if (error.message) {
        errorMessage = error.message
      }
      
      await bot.sendMessage(chatId, `‚ùå ${errorMessage}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `auth_${msg.from?.id}` }]
          ]
        }
      })
    }
    return
  }
  
  try {
    // –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ /start
    // (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –Ω–∞ —Å–∞–π—Ç–µ)
    
    await bot.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü!

üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram.`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram', callback_data: `auth_${msg.from?.id}` }],
          [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]
        ]
      }
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
  }
})

bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id
  
  await bot.sendMessage(chatId, `
üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/login - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
/favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ

üåê –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç.
  `)
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
bot.onText(/\/favorites/, async (msg) => {
  const chatId = msg.chat.id
  const telegramId = msg.from?.id
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || 'https://helpsmp.ru'
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${telegramId}`, {
      method: 'GET',
      rejectUnauthorized: false
    } as any)
    
    if (!userCheck?.user) {
      await bot.sendMessage(chatId, `‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', callback_data: `auth_${telegramId}` }]
          ]
        }
      })
      return
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = userCheck.user._id
    const favorites = await ofetch(`${apiUrl}/api/bookmarks`, {
      method: 'GET',
      query: { userId },
      rejectUnauthorized: false
    } as any)
    
    if (!favorites?.items || favorites.items.length === 0) {
      await bot.sendMessage(chatId, `üìå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

–î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫–ª–∞–¥–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: `${apiUrl}/favorites` }]
          ]
        }
      })
      return
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ —Ç–∏–ø—É
    const grouped = favorites.items.reduce((acc: any, item: any) => {
      const type = item.type || 'other'
      if (!acc[type]) acc[type] = []
      acc[type].push(item)
      return acc
    }, {})
    
    const typeNames: any = {
      drug: 'üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã',
      'local-status': 'üè• –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã',
      calculator: 'üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã',
      codifier: 'üìã –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
      algorithm: 'üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã',
      other: 'üìå –î—Ä—É–≥–æ–µ'
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º
    let message = `üìå –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (${favorites.items.length})\n\n`
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for (const [type, items] of Object.entries(grouped)) {
      message += `${typeNames[type] || type}: ${items.length}\n`
    }
    
    message += `\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const buttons: any[][] = []
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const [type, items] of Object.entries(grouped)) {
      const categoryName = typeNames[type] || type
      buttons.push([{ 
        text: `${categoryName} (${items.length})`, 
        callback_data: `favorites_category_${type}|${chatId}` 
      }])
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ"
    buttons.push([{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url: `${apiUrl}/profile/bookmarks` }])
    
    await bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: buttons
      }
    })
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error)
    
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.`)
  }
})

bot.onText(/\/login/, async (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from?.id
  
  if (chatId && userId) {
    try {
      await bot.sendMessage(chatId, `üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ

–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚úÖ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
‚úÖ –ò—Å–∫–∞—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
‚úÖ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram', callback_data: `auth_${userId}` }],
            [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]
          ]
        }
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    }
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message?.chat.id
  const messageId = query.message?.message_id
  const data = query.data
  const userId = query.from?.id
  const username = query.from?.username
  const firstName = query.from?.first_name
  const lastName = query.from?.last_name
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (data?.startsWith('auth_')) {
    await bot.answerCallbackQuery(query.id, { text: '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...' })
    
    if (chatId && messageId && userId && firstName) {
      try {
        // –í—ã–∑—ã–≤–∞–µ–º API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || 'https://helpsmp.ru'
        const response = await ofetch(`${apiUrl}/api/auth/telegram-login`, {
          method: 'POST',
          body: {
            id: userId,
            first_name: firstName,
            last_name: lastName || firstName,
            username: username || '',
            photo_url: query.from?.photo_url || ''
          },
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
          rejectUnauthorized: false
        } as any)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if (response.success) {
          const loginUrl = `${process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || 'https://helpsmp.ru'}/auth/login?telegram=true&token=${response.token}`
          
          await bot.editMessageText(
            `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!

üë§ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.

üîó –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
${loginUrl}

–ò–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã.`,
            {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: loginUrl }],
                  [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]
                ]
              }
            }
          )
        } else {
          // –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          await bot.editMessageText(
            `‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

${response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'}`,
            {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `auth_${userId}` }],
                  [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]
                ]
              }
            }
          )
          
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, response.message)
        }
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
        
        await bot.editMessageText(
          `‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
          {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `auth_${userId}` }],
                [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]
              ]
            }
          }
        )
      }
    }
  } else if (data === 'help') {
    await bot.answerCallbackQuery(query.id)
    
    if (chatId) {
      await bot.sendMessage(chatId, `
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/login - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
/favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ

üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
      `)
    }
  } else if (data?.startsWith('favorites_category_')) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    const match = data.match(/^favorites_category_(.+?)\|(.+)$/)
    const categoryType = match ? match[1] : ''
    const targetChatId = match ? match[2] : ''
    
    await bot.answerCallbackQuery(query.id, { text: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' })
    
    if (chatId && userId && messageId) {
      try {
        const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || 'https://helpsmp.ru'
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, {
          method: 'GET',
          rejectUnauthorized: false
        } as any)
        
        if (!userCheck?.user) {
          await bot.editMessageText('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', {
            chat_id: chatId,
            message_id: messageId
          })
          return
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        const favorites = await ofetch(`${apiUrl}/api/bookmarks`, {
          method: 'GET',
          query: { userId: userCheck.user._id },
          rejectUnauthorized: false
        } as any)
        
        if (!favorites?.items || favorites.items.length === 0) {
          await bot.editMessageText('üìå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', {
            chat_id: chatId,
            message_id: messageId
          })
          return
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryItems = favorites.items.filter((item: any) => item.type === categoryType)
        
        const typeNames: any = {
          drug: 'üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã',
          'local-status': 'üè• –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã',
          calculator: 'üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã',
          codifier: 'üìã –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
          algorithm: 'üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã',
          other: 'üìå –î—Ä—É–≥–æ–µ'
        }
        
        const categoryName = typeNames[categoryType] || categoryType
        
        let message = `üìå ${categoryName}: ${categoryItems.length} –∑–∞–∫–ª–∞–¥–æ–∫\n\n`
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫
        categoryItems.slice(0, 10).forEach((item: any, index: number) => {
          const title = item.title || item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
          message += `${index + 1}. ${title}\n`
        })
        
        if (categoryItems.length > 10) {
          message += `\n...–∏ –µ—â–µ ${categoryItems.length - 10} –∑–∞–∫–ª–∞–¥–æ–∫`
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–ª–∞–¥–æ–∫
        const buttons: any[][] = []
        
        // –î–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
        if (categoryType === 'calculator') {
          categoryItems.forEach((item: any) => {
            const title = (item.title || item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').substring(0, 40)
            let url = item.url || ''
            if (url && !url.startsWith('http')) {
              url = `${apiUrl}${url.startsWith('/') ? '' : '/'}${url}`
            }
            if (!url) {
              url = `${apiUrl}/calculators`
            }
            buttons.push([{ text: title, url }])
          })
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–ª–∞–¥–æ–∫
          categoryItems.slice(0, 5).forEach((item: any) => {
            const title = (item.title || item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').substring(0, 30)
            const bookmarkId = item._id || item.id || ''
            // –ü–µ—Ä–µ–¥–∞–µ–º –∏ chatId –∏ categoryType –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
            buttons.push([{ text: title, callback_data: `favorites_item_${bookmarkId}|${chatId}|${categoryType}` }])
          })
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é)
        buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `favorites_back_categories|${chatId}` }])
        
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: buttons
          }
        })
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error)
      }
    }
  } else if (data === 'show_favorites') {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ callback
    await bot.answerCallbackQuery(query.id, { text: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' })
    
    if (!chatId) return
    
    try {
      const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || 'https://helpsmp.ru'
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, {
        method: 'GET',
        rejectUnauthorized: false
      } as any)
      
      if (!userCheck?.user) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if (messageId) {
          await bot.editMessageText('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É.', {
            chat_id: chatId,
            message_id: messageId
          })
        } else {
          await bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É.')
        }
        return
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      const favorites = await ofetch(`${apiUrl}/api/bookmarks`, {
        method: 'GET',
        query: { userId: userCheck.user._id },
        rejectUnauthorized: false
      } as any)
      
      if (!favorites?.items || favorites.items.length === 0) {
        const emptyMsg = `üìå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n\n–î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫–ª–∞–¥–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.`
        
        if (messageId) {
          await bot.editMessageText(emptyMsg, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: `${apiUrl}/profile/bookmarks` }]
              ]
            }
          })
        } else {
          await bot.sendMessage(chatId, emptyMsg, {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: `${apiUrl}/profile/bookmarks` }]
              ]
            }
          })
        }
        return
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const grouped = favorites.items.reduce((acc: any, item: any) => {
        const type = item.type || 'other'
        if (!acc[type]) acc[type] = []
        acc[type].push(item)
        return acc
      }, {})
      
      const typeNames: any = {
        drug: 'üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã',
        'local-status': 'üè• –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã',
        calculator: 'üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã',
        codifier: 'üìã –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
        algorithm: 'üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã',
        other: 'üìå –î—Ä—É–≥–æ–µ'
      }
      
      let message = `üìå –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (${favorites.items.length})\n\n`
      
      for (const [type, items] of Object.entries(grouped)) {
        message += `${typeNames[type] || type}: ${items.length}\n`
      }
      
      message += `\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`
      
      const buttons: any[][] = []
      
      for (const [type, items] of Object.entries(grouped)) {
        const categoryName = typeNames[type] || type
        buttons.push([{ 
          text: `${categoryName} (${items.length})`, 
          callback_data: `favorites_category_${type}|${chatId}` 
        }])
      }
      
      buttons.push([{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url: `${apiUrl}/profile/bookmarks` }])
      buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `favorites_back|${chatId}` }])
      
      if (messageId) {
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: buttons
          }
        })
      } else {
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            inline_keyboard: buttons
          }
        })
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error)
      const errorMsg = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
      if (messageId) {
        await bot.editMessageText(errorMsg, {
          chat_id: chatId,
          message_id: messageId
        })
      } else {
        await bot.sendMessage(chatId, errorMsg)
      }
    }
  } else if (data?.startsWith('favorites_item_')) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–ª–∞–¥–∫–∏
    await bot.answerCallbackQuery(query.id, { text: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' })
    
    if (!chatId || !userId || !messageId) return
    
    try {
      const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || 'https://helpsmp.ru'
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–ª–∞–¥–∫–∏
      const match = data.match(/^favorites_item_(.+?)\|(.+)$/)
      const bookmarkId = match ? match[1] : ''
      const originalChatId = match ? match[2] : ''
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, {
        method: 'GET',
        rejectUnauthorized: false
      } as any)
      
      if (!userCheck?.user) return
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const favorites = await ofetch(`${apiUrl}/api/bookmarks`, {
        method: 'GET',
        query: { userId: userCheck.user._id },
        rejectUnauthorized: false
      } as any)
      
      if (!favorites?.items) return
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É
      const bookmark = favorites.items.find((item: any) => item._id === bookmarkId || item.id === bookmarkId)
      
      if (!bookmark) {
        await bot.editMessageText('‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
          chat_id: chatId,
          message_id: messageId
        })
        return
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–ª–∞–¥–∫–µ
      let message = `<b>${bookmark.title}</b>`
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      if (bookmark.type === 'drug') {
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (bookmark.categories && bookmark.categories.length > 0) {
          message += `\n\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> ${bookmark.categories.join(', ')}`
        }
        
        // –õ–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if (bookmark.latinName) {
          message += `\n\n<b>–õ–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> ${bookmark.latinName}`
        }
        
        // –ü–æ–∫–∞–∑–∞–Ω–∏—è
        if (bookmark.indications && bookmark.indications.length > 0) {
          message += `\n\n<b>–ü–æ–∫–∞–∑–∞–Ω–∏—è:</b>`
          bookmark.indications.forEach(ind => {
            message += `\n‚Ä¢ ${ind}`
          })
        }
        
        // –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è
        if (bookmark.contraindications && bookmark.contraindications.length > 0) {
          message += `\n\n<b>–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:</b>`
          bookmark.contraindications.forEach(contr => {
            message += `\n‚Ä¢ ${contr}`
          })
        }
        
        // –î–æ–∑–∏—Ä–æ–≤–∫–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–Ω–∞—è –¥–æ–∑–∞, –∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
        if (bookmark.dosages && bookmark.dosages.length > 0) {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∑–∏—Ä–æ–≤–∫–∏: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ, —á—Ç–æ —è–≤–Ω–æ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏—è
          const validDosages = bookmark.dosages.filter((dos: string) => {
            const dosStr = String(dos).trim()
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è (–≤–µ—Ä–æ—è—Ç–Ω–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä)
            if (dosStr.length < 10 && /^\d+/.test(dosStr)) return false
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ "–°–¢–ê–†–®–ï" –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if (dosStr.toUpperCase().includes('–°–¢–ê–†–®–ï') && dosStr.length < 20) return false
            return dosStr.length > 3 // –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
          })
          
          if (validDosages.length > 0) {
            message += `\n\n<b>–î–æ–∑–∏—Ä–æ–≤–∫–∏:</b>`
            validDosages.forEach(dos => {
              message += `\n‚Ä¢ ${dos}`
            })
          }
        }
        
        // –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç adverse, –∑–∞—Ç–µ–º sideEffects)
        if (bookmark.adverse && bookmark.adverse.length > 0) {
          message += `\n\n<b>–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</b>`
          bookmark.adverse.forEach(side => {
            message += `\n‚Ä¢ ${side}`
          })
        } else if (bookmark.sideEffects && bookmark.sideEffects.length > 0) {
          message += `\n\n<b>–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:</b>`
          bookmark.sideEffects.forEach(side => {
            message += `\n‚Ä¢ ${side}`
          })
        }
        
        // –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç mechanism, –∑–∞—Ç–µ–º mechanismOfAction)
        if (bookmark.mechanism && bookmark.mechanism.length > 0) {
          message += `\n\n<b>–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:</b>`
          bookmark.mechanism.forEach(mech => {
            message += `\n‚Ä¢ ${mech}`
          })
        } else if (bookmark.mechanismOfAction && bookmark.mechanismOfAction.length > 0) {
          message += `\n\n<b>–ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è:</b>`
          bookmark.mechanismOfAction.forEach(mech => {
            message += `\n‚Ä¢ ${mech}`
          })
        }
        
        // –§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∞
        if (bookmark.pharmacokinetics) {
          message += `\n\n<b>–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∞:</b>`
          if (bookmark.pharmacokinetics.onset) {
            message += `\n–ù–∞—á–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏—è: ${bookmark.pharmacokinetics.onset}`
          } else if (bookmark.pharmacokinetics.startTime) {
            message += `\n–ù–∞—á–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏—è: ${bookmark.pharmacokinetics.startTime}`
          }
          if (bookmark.pharmacokinetics.duration) {
            message += `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${bookmark.pharmacokinetics.duration}`
          }
          if (bookmark.pharmacokinetics.half_life) {
            message += `\nT1/2: ${bookmark.pharmacokinetics.half_life}`
          } else if (bookmark.pharmacokinetics.halfLife) {
            message += `\nT1/2: ${bookmark.pharmacokinetics.halfLife}`
          }
          if (bookmark.pharmacokinetics.metabolism) {
            message += `\n–ú–µ—Ç–∞–±–æ–ª–∏–∑–º: ${bookmark.pharmacokinetics.metabolism}`
          }
          if (bookmark.pharmacokinetics.elimination) {
            message += `\n–í—ã–≤–µ–¥–µ–Ω–∏–µ: ${bookmark.pharmacokinetics.elimination}`
          } else if (bookmark.pharmacokinetics.excretion) {
            message += `\n–í—ã–≤–µ–¥–µ–Ω–∏–µ: ${bookmark.pharmacokinetics.excretion}`
          }
        }
        
        // –°–∏–Ω–æ–Ω–∏–º—ã
        if (bookmark.synonyms && bookmark.synonyms.length > 0) {
          message += `\n\n<b>–°–∏–Ω–æ–Ω–∏–º—ã:</b> ${bookmark.synonyms.join(', ')}`
        }
        
        // –ê–Ω–∞–ª–æ–≥–∏
        if (bookmark.analogs && bookmark.analogs.length > 0) {
          message += `\n\n<b>–ê–Ω–∞–ª–æ–≥–∏:</b> ${bookmark.analogs.join(', ')}`
        }
        
        // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        if (bookmark.interactions && bookmark.interactions.length > 0) {
          message += `\n\n<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:</b>`
          bookmark.interactions.forEach(int => {
            message += `\n‚Ä¢ ${int}`
          })
        }
        
        // –ê–Ω—Ç–∏–¥–æ—Ç—ã
        if (bookmark.antidotes && bookmark.antidotes.length > 0) {
          message += `\n\n<b>–ê–Ω—Ç–∏–¥–æ—Ç—ã:</b>`
          bookmark.antidotes.forEach(ant => {
            message += `\n‚Ä¢ ${ant}`
          })
        }
        
        // –ü–µ–¥–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏
        if (bookmark.pediatricDose && bookmark.pediatricDose.length > 0) {
          message += `\n\n<b>–ü–µ–¥–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏:</b>`
          bookmark.pediatricDose.forEach(ped => {
            message += `\n‚Ä¢ ${ped}`
          })
          if (bookmark.pediatricDoseUnit) {
            message += ` (${bookmark.pediatricDoseUnit})`
          }
        }
        
        // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if (bookmark.ageRestrictions) {
          message += `\n\n<b>–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b> ${bookmark.ageRestrictions}`
        }
        
        if (bookmark.category) {
          message += `\n\n<i>${bookmark.category}</i>`
        }
      }
      
      if (bookmark.type === 'codifier') {
        if (bookmark.description) {
          message += `\n\n${bookmark.description}`
        }
        if (bookmark.code) {
          message += `\n\n<b>–ö–æ–¥:</b> ${bookmark.code}`
        }
        if (bookmark.mkbCode) {
          message += `\n<b>–ö–æ–¥ –ú–ö–ë:</b> ${bookmark.mkbCode}`
        }
        if (bookmark.stationCode) {
          message += `\n<b>–ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏:</b> ${bookmark.stationCode}`
        }
        if (bookmark.category) {
          message += `\n\n<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${bookmark.category}</i>`
        }
      }
      
      if (bookmark.type === 'local-status') {
        if (bookmark.complaints) {
          const complaintsText = bookmark.complaints.replace(/\*\*(.+?)\*\*/g, '<b>$1</b>').replace(/\*(.+?)\*/g, '<i>$1</i>')
          message += `\n\n<b>–ñ–∞–ª–æ–±—ã:</b>\n${complaintsText}`
        }
        if (bookmark.anamnesis) {
          const anamnesisText = bookmark.anamnesis.replace(/\*\*(.+?)\*\*/g, '<b>$1</b>').replace(/\*(.+?)\*/g, '<i>$1</i>')
          message += `\n\n<b>–ê–Ω–∞–º–Ω–µ–∑:</b>\n${anamnesisText}`
        }
        if (bookmark.localis) {
          const localisText = bookmark.localis.replace(/\*\*(.+?)\*\*/g, '<b>$1</b>').replace(/\*(.+?)\*/g, '<i>$1</i>')
          message += `\n\n<b>Status localis:</b>\n${localisText}`
        }
        if (bookmark.category) {
          message += `\n\n<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${bookmark.category}</i>`
        }
      }
      
      if (bookmark.type === 'calculator' && bookmark.description) {
        message += `\n\n${bookmark.description}`
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
      let url = bookmark.url || ''
      if (url && !url.startsWith('http')) {
        url = `${apiUrl}${url.startsWith('/') ? '' : '/'}${url}`
      }
      
      if (!url) {
        url = `${apiUrl}/profile/bookmarks`
      }
      
      // –ö–Ω–æ–ø–∫–∏: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ" –∏ "–ù–∞–∑–∞–¥"
      const buttons: any[][] = [
        [{ text: 'üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url }],
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `favorites_category_${bookmark.type}|${originalChatId}` }]
      ]
      
      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: buttons
        }
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error)
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏', {
        chat_id: chatId,
        message_id: messageId
      })
    }
  } else if (data?.startsWith('favorites_back_categories|')) {
    // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    const backMatch = data.match(/^favorites_back_categories\|(.+)$/)
    const targetChatId = backMatch ? backMatch[1] : ''
    
    await bot.answerCallbackQuery(query.id, { text: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' })
    
    if (!chatId || !userId || !messageId) return
    
    try {
      const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || 'https://helpsmp.ru'
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, {
        method: 'GET',
        rejectUnauthorized: false
      } as any)
      
      if (!userCheck?.user) return
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      const favorites = await ofetch(`${apiUrl}/api/bookmarks`, {
        method: 'GET',
        query: { userId: userCheck.user._id },
        rejectUnauthorized: false
      } as any)
      
      if (!favorites?.items) return
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const grouped = favorites.items.reduce((acc: any, item: any) => {
        const type = item.type || 'other'
        if (!acc[type]) acc[type] = []
        acc[type].push(item)
        return acc
      }, {})
      
      const typeNames: any = {
        drug: 'üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã',
        'local-status': 'üè• –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã',
        calculator: 'üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã',
        codifier: 'üìã –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
        algorithm: 'üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã',
        other: 'üìå –î—Ä—É–≥–æ–µ'
      }
      
      let message = `üìå –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (${favorites.items.length})\n\n`
      
      for (const [type, items] of Object.entries(grouped)) {
        message += `${typeNames[type] || type}: ${items.length}\n`
      }
      
      message += `\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`
      
      const buttons: any[][] = []
      
      for (const [type, items] of Object.entries(grouped)) {
        const categoryName = typeNames[type] || type
        buttons.push([{ 
          text: `${categoryName} (${items.length})`, 
          callback_data: `favorites_category_${type}|${targetChatId}` 
        }])
      }
      
      buttons.push([{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url: `${apiUrl}/profile/bookmarks` }])
      buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `favorites_back|${targetChatId}` }])
      
      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: buttons
        }
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    }
  } else if (data?.startsWith('favorites_back|')) {
    // –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é /start
    
    await bot.answerCallbackQuery(query.id, { text: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' })
    
    if (chatId && userId && messageId) {
      try {
        const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || 'https://helpsmp.ru'
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, {
          method: 'GET',
          rejectUnauthorized: false
        } as any).catch(() => null)
        
        if (!userCheck?.user) {
          // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          await bot.editMessageText(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü!

üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
/login - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram', callback_data: `auth_${userId}` }],
                [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]
              ]
            }
          })
          return
        }
        
        // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await bot.editMessageText(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü!

‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
/help - –°–ø—Ä–∞–≤–∫–∞

–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: 'show_favorites' }],
              [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]
            ]
          }
        })
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error)
      }
    }
  }
})
} // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ if (bot)

export default bot

