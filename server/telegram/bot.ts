import { Telegraf } from 'telegraf'
import { ofetch } from 'ofetch'
import { generateTelegramAuthCode, checkTelegramAuth as checkTelegramAuthDirect } from '~/server/utils/telegram-auth-helpers'
import { storeAuthCodeWithChat, storeAuthCodeForSync } from '~/server/utils/telegram-auth-codes'

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || ''

if (!BOT_TOKEN) {
  console.error('‚ùå ERROR: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
}

// –°–æ–∑–¥–∞–µ–º Telegraf-–∏–Ω—Å—Ç–∞–Ω—Å –æ–¥–∏–Ω —Ä–∞–∑ (–¥–ª—è hot-reload –æ–∫—Ä—É–∂–µ–Ω–∏–π)
if (!(globalThis as any).telegramBot) {
  console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (Telegraf)')
  ;(globalThis as any).telegramBot = BOT_TOKEN ? new Telegraf(BOT_TOKEN) : null
}

export const bot: Telegraf | null = (globalThis as any).telegramBot

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
if (bot) {
  bot.catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', (err as any)?.message || err)
  })
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π
if (bot) {
  // /start (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /start connect_<id>)
  bot.start(async (ctx) => {
    const chatId = ctx.chat?.id
    const firstName = ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    const text = (ctx.message && 'text' in ctx.message ? (ctx.message as any).text : '') as string
    const commandArg = text.split(' ').slice(1).join(' ')

    if (commandArg?.startsWith('connect_')) {
      const userId = commandArg.replace('connect_', '')
      if (!userId || userId === 'user' || userId === 'unknown') {
        if (chatId) await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return
      }
      try {
        if (!ctx.from?.id) {
          if (chatId) await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
          return
        }
        const telegramUserId = String(ctx.from.id)
        const first = ctx.from?.first_name || 'User'
        const username = ctx.from?.username

        const connectCode = await generateTelegramAuthCode(telegramUserId, first, username as any)
        if (!connectCode.success || !connectCode.code) {
          if (chatId) await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞')
          return
        }

        const { addConnectCode } = await import('~/server/api/auth/verify-telegram-connect-code.post')
        addConnectCode(connectCode.code, telegramUserId)

        const codeValue = connectCode.code
        const connectMessage = `üîê –ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telegram\n\n–í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É:\nüî¢ <span class="tg-spoiler"><code>${codeValue}</code></span>\n\n‚è± –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç\n\n‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`
        if (chatId) {
          await bot.telegram.sendMessage(chatId, connectMessage, { parse_mode: 'HTML', reply_markup: { inline_keyboard: [] } } as any)
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞:', error)
        if (chatId) await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞')
      }
      return
    }

    try {
      const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : '')
      const telegramId = ctx.from?.id

      let hasActiveSession = false
      let isRegistered = false

      if (apiUrl && apiUrl !== 'https://192.168.1.40:3000') {
        try {
          const check = await ofetch(`${apiUrl}/api/auth/check-active-session?telegramId=${telegramId}`, { method: 'GET', rejectUnauthorized: false } as any)
          hasActiveSession = check?.hasActiveSession || false
          isRegistered = !!check?.user
        } catch (e) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ API:', e)
        }
      } else {
        try {
          const check = await checkTelegramAuthDirect(String(telegramId))
          isRegistered = check?.authenticated || false
          if (isRegistered && telegramId) {
            const { checkActiveSessionByTelegramId } = await import('~/server/utils/telegram-auth-helpers')
            hasActiveSession = await checkActiveSessionByTelegramId(String(telegramId))
          }
        } catch (e) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', e)
        }
      }

      if (hasActiveSession) {
        if (chatId) await bot.telegram.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü!\n\n‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n/help - –°–ø—Ä–∞–≤–∫–∞\n\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
          reply_markup: { inline_keyboard: [[{ text: '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: 'favorites_category_all' }], [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]] }
        } as any)
        return
      }

      if (isRegistered && !hasActiveSession) {
        if (chatId) await bot.telegram.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü!\n\nüîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.`, {
          reply_markup: { inline_keyboard: [[{ text: 'üîê –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', callback_data: `auth_${ctx.from?.id}` }], [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]] }
        } as any)
        return
      }

      if (chatId) await bot.telegram.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü!\n\nüîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram.`, {
        reply_markup: { inline_keyboard: [[{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram', callback_data: `auth_${ctx.from?.id}` }], [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]] }
      } as any)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    }
  })

  // /help
  bot.help(async (ctx) => {
    const chatId = ctx.chat?.id
    if (!chatId) return
    await bot.telegram.sendMessage(chatId, `\nüìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç.\n  `)
  })

  // /favorites
  bot.command('favorites', async (ctx) => {
    const chatId = ctx.chat?.id
    const telegramId = ctx.from?.id
    try {
      const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : '')
      const siteUrl = apiUrl && apiUrl.startsWith('https://') ? apiUrl : 'https://helpsmp.ru'
      if (!apiUrl) {
        if (chatId) await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞')
        return
      }

      const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${telegramId}`, { method: 'GET', rejectUnauthorized: false } as any)
      if (!userCheck?.user) {
        if (chatId) await bot.telegram.sendMessage(chatId, `‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.`, { reply_markup: { inline_keyboard: [[{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', callback_data: `auth_${telegramId}` }]] } } as any)
        return
      }

      const userId = userCheck.user._id
      const favorites = await ofetch(`${apiUrl}/api/bookmarks`, { method: 'GET', query: { userId }, rejectUnauthorized: false } as any)

      if (!favorites?.items || favorites.items.length === 0) {
        if (chatId) await bot.telegram.sendMessage(chatId, `üìå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n\n–î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫–ª–∞–¥–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.`, { reply_markup: { inline_keyboard: [[{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: `${siteUrl}/favorites` }]] } } as any)
        return
      }

      const grouped = favorites.items.reduce((acc: any, item: any) => {
        const type = item.type || 'other'
        if (!acc[type]) acc[type] = []
        acc[type].push(item)
        return acc
      }, {})
      const typeNames: any = { drug: 'üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã', 'local-status': 'üè• –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã', calculator: 'üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã', codifier: 'üìã –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä', algorithm: 'üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã', other: 'üìå –î—Ä—É–≥–æ–µ' }

      let message = `üìå –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (${favorites.items.length})\n\n`
      for (const [type, items] of Object.entries(grouped)) {
        message += `${typeNames[type] || type}: ${(items as any[]).length}\n`
      }
      message += `\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`

      const buttons: any[][] = []
      for (const [type, items] of Object.entries(grouped)) {
        const categoryName = typeNames[type] || type
        buttons.push([{ text: `${categoryName} (${(items as any[]).length})`, callback_data: `favorites_category_${type}|${chatId}` }])
      }
      buttons.push([{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url: `${siteUrl}/profile/bookmarks` }])

      if (chatId) await bot.telegram.sendMessage(chatId, message, { reply_markup: { inline_keyboard: buttons } } as any)
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error)
      const chatId = ctx.chat?.id
      if (chatId) await bot.telegram.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.`)
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–≤—Å–µ –∫–µ–π—Å—ã –∏–∑ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏)
  bot.on('callback_query', async (ctx: any) => {
    const query = ctx.callbackQuery
    const chatId = (query as any).message?.chat.id
    const messageId = (query as any).message?.message_id
    const data = (query as any).data
    const userId = (query as any).from?.id
    const username = (query as any).from?.username
    const firstName = (query as any).from?.first_name

    // auth_
    if (data?.startsWith('auth_')) {
      await ctx.answerCbQuery('‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞...')
      if (chatId && messageId && userId && firstName) {
        try {
          const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : '')
          let response
          if (!apiUrl || apiUrl === 'https://192.168.1.40:3000') {
            response = await generateTelegramAuthCode(String(userId), firstName, username || '')
          } else {
            response = await ofetch(`${apiUrl}/api/auth/telegram-request-code`, { method: 'POST', body: { id: userId, first_name: firstName, username: username || '' }, rejectUnauthorized: false } as any)
          }

          if (response.success) {
            storeAuthCodeWithChat(String(userId), chatId, messageId)
            storeAuthCodeForSync(String(userId), response.code)
            const loginMessage = `üîê –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç:\n\n<code>${response.code}</code>\n\n‚è± –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç\n\n‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –≤–∞—à–µ–π –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞!\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`
            await bot.telegram.editMessageText(chatId, messageId, undefined, loginMessage, { parse_mode: 'HTML', reply_markup: { inline_keyboard: [] } } as any)
          } else {
            await bot.telegram.editMessageText(chatId, messageId, undefined, `‚ùå –û—à–∏–±–∫–∞\n\n${response.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'}`, { reply_markup: { inline_keyboard: [[{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `auth_${userId}` }], [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]] } } as any)
          }
        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:', error)
          await bot.telegram.editMessageText(chatId, messageId, undefined, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', { reply_markup: { inline_keyboard: [[{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `auth_${userId}` }], [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]] } } as any)
        }
      }
      return
    }

    // help
    if (data === 'help') {
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...')
      if (chatId && messageId) {
        const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : 'https://helpsmp.ru')
        const siteUrl = apiUrl && apiUrl.startsWith('https://') ? apiUrl : 'https://helpsmp.ru'
        const helpMessage = `üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü\n\nüîç –û –ø—Ä–æ–µ–∫—Ç–µ:\n–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü ‚Äî —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Å–ª—É–∂–±—ã —Å–∫–æ—Ä–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏.\n\nüìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ üß™ –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Å –¥–æ–∑–∏—Ä–æ–≤–∫–∞–º–∏ –∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏\n‚Ä¢ üè• –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤\n‚Ä¢ üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–∫–∞–∑–∞–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏\n‚Ä¢ üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑\n‚Ä¢ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\nüåê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.\n\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`
        await bot.telegram.editMessageText(chatId, messageId, undefined, helpMessage, { reply_markup: { inline_keyboard: [[{ text: 'üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã', url: `${siteUrl}/algorithms/adults` }],[{ text: 'üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã', url: `${siteUrl}/drugs` }, { text: 'üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã', url: `${siteUrl}/calculators` }],[{ text: 'üìã –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä', url: `${siteUrl}/codifier` }, { text: 'üè• –î–µ–∂—É—Ä—Å—Ç–≤–∞', url: `${siteUrl}/substations` }],[{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'help_back' }]] } } as any)
      }
      return
    }

    if (data === 'help_back') {
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...')
      if (chatId && messageId) {
        try {
          const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : '')
          if (!apiUrl) return
          const check = await checkTelegramAuthDirect(String(userId))
          const isRegistered = check?.authenticated || false
          let hasActiveSession = false
          if (isRegistered && userId) {
            const { checkActiveSessionByTelegramId } = await import('~/server/utils/telegram-auth-helpers')
            hasActiveSession = await checkActiveSessionByTelegramId(String(userId))
          }

          if (hasActiveSession) {
            await bot.telegram.editMessageText(chatId, messageId, undefined, `üëã –ü—Ä–∏–≤–µ—Ç!\n\n‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n/help - –°–ø—Ä–∞–≤–∫–∞\n\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, { reply_markup: { inline_keyboard: [[{ text: '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: 'favorites_category_all' }],[{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]] } } as any)
          } else {
            await bot.telegram.editMessageText(chatId, messageId, undefined, `üëã –ü—Ä–∏–≤–µ—Ç!\n\nüîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.`, { reply_markup: { inline_keyboard: [[{ text: 'üîê –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', callback_data: `auth_${userId}` }],[{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]] } } as any)
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞:', error)
          await bot.telegram.editMessageText(chatId, messageId, undefined, `üëã –ü—Ä–∏–≤–µ—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/favorites - –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n/help - –ü–æ–º–æ—â—å`)
        }
      }
      return
    }

    if (data?.startsWith('favorites_category_') && data !== 'favorites_category_all') {
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...')
      try {
        const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : '')
        const siteUrl = apiUrl && apiUrl.startsWith('https://') ? apiUrl : 'https://helpsmp.ru'
        if (!apiUrl) {
          if (chatId) await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞')
          return
        }
        const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, { method: 'GET', rejectUnauthorized: false } as any)
        if (!userCheck?.user) {
          if (chatId && messageId) await bot.telegram.editMessageText(chatId, messageId, undefined, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
          return
        }
        const favorites = await ofetch(`${apiUrl}/api/bookmarks`, { method: 'GET', query: { userId: userCheck.user._id }, rejectUnauthorized: false } as any)
        if (!favorites?.items || favorites.items.length === 0) {
          if (chatId && messageId) await bot.telegram.editMessageText(chatId, messageId, undefined, 'üìå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ')
          return
        }
        const match = (data as string).match(/^favorites_category_(.+?)\|(.+)$/)
        const categoryType = match ? match[1] : ''
        const buttons: any[][] = []
        const categoryItems = favorites.items.filter((item: any) => item.type === categoryType)
        if (categoryType === 'calculator') {
          for (const item of categoryItems) {
            const title = (item.title || item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').substring(0, 40)
            let url = item.url || ''
            if (url && !url.startsWith('http')) {
              url = `${siteUrl}${url.startsWith('/') ? '' : '/'}${url}`
            }
            if (!url || url.startsWith('http://')) url = `${siteUrl}/calculators`
            buttons.push([{ text: title, url }])
          }
        } else {
          categoryItems.slice(0, 5).forEach((item: any) => {
            const title = (item.title || item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').substring(0, 30)
            const bookmarkId = item._id || item.id || ''
            buttons.push([{ text: title, callback_data: `favorites_item_${bookmarkId}|${chatId}|${categoryType}` }])
          })
        }
        buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `favorites_back_categories|${chatId}` }])

        let message = `üìå ${(categoryType)}: ${categoryItems.length} –∑–∞–∫–ª–∞–¥–æ–∫\n\n`
        categoryItems.slice(0, 10).forEach((item: any, i: number) => {
          const title = item.title || item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
          message += `${i + 1}. ${title}\n`
        })
        if (chatId && messageId) await bot.telegram.editMessageText(chatId, messageId, undefined, message, { reply_markup: { inline_keyboard: buttons } } as any)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error)
      }
      return
    }

    if (data === 'show_favorites' || data === 'favorites_category_all') {
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...')
      if (!chatId) return
      try {
        const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : '')
        if (!apiUrl) {
          await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞')
          return
        }
        const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, { method: 'GET', rejectUnauthorized: false } as any)
        if (!userCheck?.user) {
          if (messageId) {
            await bot.telegram.editMessageText(chatId, messageId, undefined, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É.')
          } else {
            await bot.telegram.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É.')
          }
          return
        }
        const favorites = await ofetch(`${apiUrl}/api/bookmarks`, { method: 'GET', query: { userId: userCheck.user._id }, rejectUnauthorized: false } as any)
        if (!favorites?.items || favorites.items.length === 0) {
          const emptyMsg = `üìå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n\n–î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫–ª–∞–¥–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.`
          if (messageId) {
            await bot.telegram.editMessageText(chatId, messageId, undefined, emptyMsg, { reply_markup: { inline_keyboard: [[{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: `${siteUrl}/profile/bookmarks` }]] } } as any)
          } else {
            await bot.telegram.sendMessage(chatId, emptyMsg, { reply_markup: { inline_keyboard: [[{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url: `${siteUrl}/profile/bookmarks` }]] } } as any)
          }
          return
        }

        const grouped = favorites.items.reduce((acc: any, item: any) => {
          const type = item.type || 'other'
          if (!acc[type]) acc[type] = []
          acc[type].push(item)
          return acc
        }, {})
        const typeNames: any = { drug: 'üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã', 'local-status': 'üè• –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã', calculator: 'üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã', codifier: 'üìã –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä', algorithm: 'üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã', other: 'üìå –î—Ä—É–≥–æ–µ' }

        let message = `üìå –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (${favorites.items.length})\n\n`
        for (const [type, items] of Object.entries(grouped)) {
          message += `${typeNames[type] || type}: ${(items as any[]).length}\n`
        }
        message += `\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`

        const buttons: any[][] = []
        for (const [type, items] of Object.entries(grouped)) {
          const categoryName = typeNames[type] || type
          buttons.push([{ text: `${categoryName} (${(items as any[]).length})`, callback_data: `favorites_category_${type}|${chatId}` }])
        }
        buttons.push([{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url: `${siteUrl}/profile/bookmarks` }])
        buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `favorites_back|${chatId}` }])

        if (messageId) {
          await bot.telegram.editMessageText(chatId, messageId, undefined, message, { reply_markup: { inline_keyboard: buttons } } as any)
        } else {
          await bot.telegram.sendMessage(chatId, message, { reply_markup: { inline_keyboard: buttons } } as any)
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error)
        const errorMsg = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
        if (messageId) {
          await bot.telegram.editMessageText(chatId, messageId, undefined, errorMsg)
        } else {
          await bot.telegram.sendMessage(chatId, errorMsg)
        }
      }
      return
    }

    if (data?.startsWith('favorites_item_')) {
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...')
      if (!chatId || !userId || !messageId) return
      try {
        const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : '')
        if (!apiUrl) {
          await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞')
          return
        }
        const match = (data as string).match(/^favorites_item_(.+?)\|(.+)$/)
        const bookmarkId = match ? match[1] : ''
        const originalChatId = match ? match[2] : ''
        const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, { method: 'GET', rejectUnauthorized: false } as any)
        if (!userCheck?.user) return
        const favorites = await ofetch(`${apiUrl}/api/bookmarks`, { method: 'GET', query: { userId: userCheck.user._id }, rejectUnauthorized: false } as any)
        if (!favorites?.items) return
        const bookmark = favorites.items.find((item: any) => item._id === bookmarkId || item.id === bookmarkId)
        if (!bookmark) {
          await bot.telegram.editMessageText(chatId, messageId, undefined, '‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
          return
        }

        let message = `<b>${bookmark.title}</b>`
        if (bookmark.type === 'codifier') {
          if (bookmark.description) message += `\n\n${bookmark.description}`
          if (bookmark.code) message += `\n\n<b>–ö–æ–¥:</b> ${bookmark.code}`
          if (bookmark.mkbCode) message += `\n<b>–ö–æ–¥ –ú–ö–ë:</b> ${bookmark.mkbCode}`
          if (bookmark.stationCode) message += `\n<b>–ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏:</b> ${bookmark.stationCode}`
          if (bookmark.category) message += `\n\n<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${bookmark.category}</i>`
        }
        if (bookmark.type === 'local-status') {
          if (bookmark.complaints) message += `\n\n<b>–ñ–∞–ª–æ–±—ã:</b>\n${bookmark.complaints.replace(/\*\*(.+?)\*\*/g, '<b>$1<\/b>').replace(/\*(.+?)\*/g, '<i>$1<\/i>')}`
          if (bookmark.anamnesis) message += `\n\n<b>–ê–Ω–∞–º–Ω–µ–∑:</b>\n${bookmark.anamnesis.replace(/\*\*(.+?)\*\*/g, '<b>$1<\/b>').replace(/\*(.+?)\*/g, '<i>$1<\/i>')}`
          if (bookmark.localis) message += `\n\n<b>Status localis:</b>\n${bookmark.localis.replace(/\*\*(.+?)\*\*/g, '<b>$1<\/b>').replace(/\*(.+?)\*/g, '<i>$1<\/i>')}`
          if (bookmark.category) message += `\n\n<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${bookmark.category}</i>`
        }
        if (bookmark.type === 'calculator' && bookmark.description) {
          message += `\n\n${bookmark.description}`
        }

        let url = bookmark.url || ''
        if (url && !url.startsWith('http')) url = `${siteUrl}${url.startsWith('/') ? '' : '/'}${url}`
        if (!url || url.startsWith('http://')) url = `${siteUrl}/profile/bookmarks`

        const buttons: any[][] = [
          [{ text: 'üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url }],
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `favorites_category_${bookmark.type}|${originalChatId}` }]
        ]

        await bot.telegram.editMessageText(chatId, messageId, undefined, message, { parse_mode: 'HTML', reply_markup: { inline_keyboard: buttons } } as any)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error)
        await bot.telegram.editMessageText(chatId, messageId, undefined, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–∫–∏')
      }
      return
    }

    if (data?.startsWith('favorites_back_categories|')) {
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...')
      try {
        const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : '')
        if (!apiUrl) {
          if (chatId) await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞')
          return
        }
        const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, { method: 'GET', rejectUnauthorized: false } as any)
        if (!userCheck?.user) return
        const favorites = await ofetch(`${apiUrl}/api/bookmarks`, { method: 'GET', query: { userId: userCheck.user._id }, rejectUnauthorized: false } as any)
        if (!favorites?.items) return
        const grouped = favorites.items.reduce((acc: any, item: any) => { const t = item.type || 'other'; (acc[t] ||= []).push(item); return acc }, {})
        const typeNames: any = { drug: 'üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã', 'local-status': 'üè• –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã', calculator: 'üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã', codifier: 'üìã –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä', algorithm: 'üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã', other: 'üìå –î—Ä—É–≥–æ–µ' }
        let message = `üìå –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (${favorites.items.length})\n\n`
        for (const [type, items] of Object.entries(grouped)) message += `${typeNames[type] || type}: ${(items as any[]).length}\n`
        message += `\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`
        const buttons: any[][] = []
        for (const [type, items] of Object.entries(grouped)) {
          const categoryName = typeNames[type] || type
          buttons.push([{ text: `${categoryName} (${(items as any[]).length})`, callback_data: `favorites_category_${type}|${chatId}` }])
        }
        buttons.push([{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url: `${siteUrl}/profile/bookmarks` }])
        buttons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `favorites_back|${chatId}` }])
        if (chatId && messageId) await bot.telegram.editMessageText(chatId, messageId, undefined, message, { reply_markup: { inline_keyboard: buttons } } as any)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error)
      }
      return
    }

    if (data?.startsWith('favorites_back|')) {
      await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...')
      if (chatId && userId && messageId) {
        try {
          const apiUrl = process.env.NUXT_PUBLIC_APP_URL || process.env.NUXT_PUBLIC_SITE_URL || (process.env.NODE_ENV === 'development' ? 'https://192.168.1.40:3000' : '')
          if (!apiUrl) {
            await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞')
            return
          }
          const userCheck = await ofetch(`${apiUrl}/api/auth/find-by-telegram/${userId}`, { method: 'GET', rejectUnauthorized: false } as any).catch(() => null)
          if (!userCheck?.user) {
            await bot.telegram.editMessageText(chatId, messageId, undefined, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü!\n\nüîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/favorites - –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n/help - –ü–æ–º–æ—â—å`, { reply_markup: { inline_keyboard: [[{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram', callback_data: `auth_${userId}` }],[{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]] } } as any)
            return
          }
          await bot.telegram.editMessageText(chatId, messageId, undefined, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –°–ú–ü!\n\n‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n/help - –°–ø—Ä–∞–≤–∫–∞\n\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, { reply_markup: { inline_keyboard: [[{ text: '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: 'favorites_category_all' }],[{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }]] } } as any)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞:', error)
        }
      }
      return
    }
  })
}

export default bot
