import connectDB from '~/server/utils/mongodb'
import User from '~/server/models/User'
import { storeAuthCode, getAuthCode, removeAuthCode, getAuthCodeWithChat } from './telegram-auth-codes'
import jwt from 'jsonwebtoken'
import { bot } from '~/server/telegram/bot'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ bot.ts –±–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function generateTelegramAuthCode(telegramId: string, firstName: string, username?: string) {
  try {
    await connectDB()
    
    const telegramIdStr = String(telegramId)
    const usernameValue = username || ''
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö
    const telegramEmail = usernameValue 
      ? `telegram_${usernameValue}@smp.local` 
      : `telegram_${telegramId}@smp.local`

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await User.findOne({ 
      $or: [
        { email: telegramEmail },
        { 'telegram.id': telegramIdStr }
      ]
    })

    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const crypto = await import('crypto')
      user = await User.create({
        email: telegramEmail,
        password: crypto.randomBytes(32).toString('hex'),
        firstName: firstName,
        lastName: firstName,
        role: 'user',
        telegram: {
          id: telegramIdStr,
          username: usernameValue,
          photo_url: ''
        }
      })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    const code = Math.floor(100000 + Math.random() * 900000).toString()
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 –º–∏–Ω—É—Ç (–±–µ–∑ chatId/messageId - –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –±–æ—Ç–æ–º)
    storeAuthCode(telegramIdStr, user._id.toString(), code, 600)

    console.log(`üîê –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramIdStr}: ${code}`)

    return {
      success: true,
      code,
      message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
      userId: user._id.toString()
    }

  } catch (error: any) {
    console.error('Telegram request code error:', error)
    return {
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞'
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω
 */
export async function verifyTelegramAuthCode(telegramId: string, code: string) {
  try {
    await connectDB()
    
    if (!telegramId || !code) {
      return {
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    const storedAuth = getAuthCode(telegramId)
    
    if (!storedAuth) {
      return {
        success: false,
        message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.'
      }
    }

    if (storedAuth.code !== code) {
      return {
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(storedAuth.userId)
    
    if (!user) {
      return {
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const codeInfo = getAuthCodeWithChat(telegramId)
    console.log('üìù –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', codeInfo)
    
    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    removeAuthCode(telegramId)

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const config = useRuntimeConfig()
    const jwtSecret = config.jwtSecret
    
    if (!jwtSecret) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞'
      }
    }

    const token = jwt.sign(
      { userId: user._id, email: user.email },
      jwtSecret,
      { expiresIn: '7d' }
    )

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ –æ successful –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (bot && codeInfo?.chatId && codeInfo?.messageId) {
      try {
        console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ:', { chatId: codeInfo.chatId, messageId: codeInfo.messageId })
        
        await bot.editMessageText(
          `‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\nüë§ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚úÖ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–π—Ç–∞\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.`,
          {
            chat_id: codeInfo.chatId,
            message_id: codeInfo.messageId,
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'help' }],
                [{ text: '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: 'favorites_category_all' }]
              ]
            }
          }
        )
        
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ:', error)
      }
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö:', { hasBot: !!bot, hasChatId: !!codeInfo?.chatId, hasMessageId: !!codeInfo?.messageId })
    }

    return {
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      token,
      user: {
        _id: user._id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        telegram: user.telegram
      }
    }

  } catch (error: any) {
    console.error('Telegram verify code error:', error)
    return {
      success: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞'
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ Telegram ID
 * –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –Ω–µ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
 * –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω JWT —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
 */
export async function checkTelegramAuth(telegramId: string) {
  try {
    await connectDB()
    
    if (!telegramId) {
      return {
        authenticated: false,
        message: 'Telegram ID –Ω–µ —É–∫–∞–∑–∞–Ω'
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const user = await User.findOne({ 'telegram.id': telegramId })

    if (!user) {
      return {
        authenticated: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }
    }

    // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç–µ
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –ë–î
    // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ —Ç—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç
    return {
      authenticated: true,
      user: {
        _id: user._id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        telegram: user.telegram
      }
    }

  } catch (error: any) {
    console.error('Check telegram auth error:', error)
    return {
      authenticated: false,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    }
  }
}

export async function checkActiveSessionByTelegramId(telegramId: string): Promise<boolean> {
  try {
    await connectDB()
    const user = await User.findOne({ 'telegram.id': telegramId })
    
    if (!user) {
      return false
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
    if (!user.lastTelegramAuth) {
      return false
    }
    
    const now = new Date()
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000)
    
    const isActive = user.lastTelegramAuth > oneHourAgo
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { telegramId, lastTelegramAuth: user.lastTelegramAuth, now, isActive })
    
    return isActive
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error)
    return false
  }
}
