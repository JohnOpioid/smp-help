import { Ollama } from 'ollama'

export interface OllamaAnalysisResult {
  message: string
  results: any[]
  fullResults: {
    mkb: any[]
    ls: any[]
    algo: any[]
    drug: any[]
    substation: any[]
  }
  forceExpand: string | null
  intent: string
  availableSections: string[]
  clarifyingQuestions: string[]
  aiIntent: string
  aiConfidence: number
}

export class OllamaMedicalAI {
  private ollama: Ollama
  private model: string = 'llama3.1:8b'
  private fallbackMode: boolean = false
  private cache: Map<string, any> = new Map() // –ö—ç—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤

  constructor() {
    this.ollama = new Ollama({
      host: process.env.OLLAMA_HOST || 'http://localhost:11434'
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.checkOllamaAvailability()
  }

  private async checkOllamaAvailability() {
    try {
      const response = await fetch('http://localhost:11434/api/tags', {
        signal: AbortSignal.timeout(3000)
      })
      if (!response.ok) {
        throw new Error('Ollama not available')
      }
      console.log('‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω')
    } catch (error) {
      console.warn('‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ fallback —Ä–µ–∂–∏–º')
      this.fallbackMode = true
    }
  }

  async analyzeQuery(
    query: string, 
    fuseResults: any[], 
    history: any[] = []
  ): Promise<OllamaAnalysisResult> {
    console.log('ü§ñ Ollama AI: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å:', query)

    // –ï—Å–ª–∏ Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if (this.fallbackMode) {
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º')
      return this.getFallbackResponse(query, fuseResults)
    }

    try {
      // –ë—ã—Å—Ç—Ä—ã–π fallback –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      if (fuseResults.length === 0) {
        console.log('üîÑ –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Fuse, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback')
        return this.getFallbackResponse(query, fuseResults)
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Fuse, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
      if (fuseResults.length > 0 && fuseResults.some(r => r.score < 0.3)) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Fuse, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é')
        return this.processFuseResultsDirectly(query, fuseResults)
      }

            // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Ollama (—Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º)
            const intent = await Promise.race([
              this.predictIntent(query, history),
              new Promise((resolve) => 
                setTimeout(() => resolve({
                  intent: 'general',
                  confidence: 0.3,
                  reasoning: 'Timeout fallback'
                }), 15000) // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 15 —Å–µ–∫—É–Ω–¥
              )
            ]) as any

      console.log('üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ:', intent)

      // –ï—Å–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (intent.confidence < 0.4) {
        console.log('üîÑ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback')
        return this.getFallbackResponse(query, fuseResults)
      }

      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
      const feedbackContext = await this.loadFeedbackContext(query, intent.intent)
      
      // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Fuse —Å –ø–æ–º–æ—â—å—é AI
      let analysis
      try {
        analysis = await this.analyzeFuseResults(query, fuseResults, intent, feedbackContext)
        console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Fuse –∑–∞–≤–µ—Ä—à–µ–Ω')
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error)
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Fuse')
        return this.processFuseResultsDirectly(query, fuseResults)
      }

      // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      let response
      try {
        response = await this.generateIntelligentResponse(query, analysis, intent)
        console.log('üí¨ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error)
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Fuse')
        return this.processFuseResultsDirectly(query, fuseResults)
      }

      return response

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Ollama AI:', error)
      console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Fuse')
      this.fallbackMode = true
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Fuse, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
      if (fuseResults.length > 0) {
        return this.processFuseResultsDirectly(query, fuseResults)
      }
      
      return this.getFallbackResponse(query, fuseResults)
    }
  }

  private async loadFeedbackContext(query: string, intent: string) {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Feedback –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      const { default: Feedback } = await import('~/server/models/Feedback')
      
      // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
      const similarFeedback = await Feedback.find({
        status: 'learned',
        $or: [
          { 'learningData.keywords': { $in: query.toLowerCase().split(' ') } },
          { 'aiAnalysis.intent': intent }
        ]
      })
      .sort({ timestamp: -1 })
      .limit(3)
      .lean()

      if (similarFeedback.length > 0) {
        console.log('üìö –ù–∞–π–¥–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:', similarFeedback.length)
        return similarFeedback.map(fb => ({
          originalQuery: fb.originalQuery,
          userFeedback: fb.userFeedback,
          correctIntent: fb.learningData?.correctIntent,
          correctResults: fb.learningData?.correctResults
        }))
      }

      return []
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error)
      return []
    }
  }

  private async predictIntent(query: string, history: any[]): Promise<{
    intent: string
    confidence: number
    reasoning: string
  }> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `intent:${query.toLowerCase().trim()}`
    if (this.cache.has(cacheKey)) {
      console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ')
      return this.cache.get(cacheKey)
    }

    const prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: "${query}"

–í–∞—Ä–∏–∞–Ω—Ç—ã: mkb, ls, algo, drug, substation, general

JSON: {"intent": "mkb", "confidence": 0.8, "reasoning": "–∫—Ä–∞—Ç–∫–æ"}`

    try {
            const response = await Promise.race([
              this.ollama.chat({
                model: this.model,
                messages: [{ role: 'user', content: prompt }],
                options: { temperature: 0.1 }
              }),
              new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout')), 8000) // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 8 —Å–µ–∫—É–Ω–¥
              )
            ])

      const content = (response as any).message.content
      const parsed = JSON.parse(content)
      
      const result = {
        intent: parsed.intent || 'general',
        confidence: parsed.confidence || 0.5,
        reasoning: parsed.reasoning || ''
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
      this.cache.set(cacheKey, result)
      return result

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è:', error)
      const fallback = {
        intent: 'general',
        confidence: 0.3,
        reasoning: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –≤ –∫—ç—à
      this.cache.set(cacheKey, fallback)
      return fallback
    }
  }

  private async analyzeFuseResults(
    query: string, 
    fuseResults: any[], 
    intent: any,
    feedbackContext: any[] = []
  ): Promise<{
    mkb: any[]
    ls: any[]
    algo: any[]
    drug: any[]
    substation: any[]
    extractedDrugs: any[]
    summary: string
  }> {
    const prompt = `
–¢—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.

–ó–ê–ü–†–û–°: "${query}"
–ù–ê–ú–ï–†–ï–ù–ò–ï: ${intent.intent} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${intent.confidence})

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:
${JSON.stringify(fuseResults, null, 2)}

–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:
${feedbackContext.length > 0 ? JSON.stringify(feedbackContext, null, 2) : '–ù–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'}

–ó–ê–î–ê–ß–ò:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–ï –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã —Å –¥–æ–∑–∏—Ä–æ–≤–∫–∞–º–∏
2. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
3. –°–≥—Ä—É–ø–ø–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
4. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
5. –£—á—Ç–∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{
  "mkb": [—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ú–ö–ë],
  "ls": [–ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã],
  "algo": [–∞–ª–≥–æ—Ä–∏—Ç–º—ã],
  "drug": [–ø—Ä–µ–ø–∞—Ä–∞—Ç—ã],
  "substation": [–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏],
  "extractedDrugs": [
    {
      "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞",
      "dosage": "–¥–æ–∑–∏—Ä–æ–≤–∫–∞",
      "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è",
      "indication": "–ø–æ–∫–∞–∑–∞–Ω–∏–µ"
    }
  ],
  "summary": "–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ"
}

–í–ê–ñ–ù–û:
- –ò—â–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤–æ –í–°–ï–• –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö
- –ò–∑–≤–ª–µ–∫–∞–π —Ç–æ—á–Ω—ã–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏
- –£–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
- –£—á—Ç–∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
`

    try {
      const response = await Promise.race([
        this.ollama.chat({
          model: this.model,
          messages: [{ role: 'user', content: prompt }],
          options: { temperature: 0.1 }
        }),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout')), 15000)
        )
      ])

      const content = (response as any).message.content
      const parsed = JSON.parse(content)
      
      return {
        mkb: parsed.mkb || [],
        ls: parsed.ls || [],
        algo: parsed.algo || [],
        drug: parsed.drug || [],
        substation: parsed.substation || [],
        extractedDrugs: parsed.extractedDrugs || [],
        summary: parsed.summary || ''
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error)
      return this.fallbackAnalysis(fuseResults)
    }
  }

  private async generateIntelligentResponse(
    query: string,
    analysis: any,
    intent: any
  ): Promise<OllamaAnalysisResult> {
    const prompt = `
–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –°–æ–∑–¥–∞–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å—Ç–∏–ª–µ –±–µ—Å–µ–¥—ã.

–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${query}"
–ù–ê–ú–ï–†–ï–ù–ò–ï: ${intent.intent}

–ê–ù–ê–õ–ò–ó:
${JSON.stringify(analysis, null, 2)}

–ó–ê–î–ê–ß–ò:
1. –°–æ–∑–¥–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –±–µ—Å–µ–¥—ã
2. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–æ
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
4. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
5. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:
- –ö–∞–∫ –≤ –±–µ—Å–µ–¥–µ —Å –∫–æ–ª–ª–µ–≥–æ–π
- –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –≠–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
- –ò—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{
  "message": "–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ markdown",
  "availableSections": ["algo", "drug", "mkb", "ls"],
  "clarifyingQuestions": ["–≤–æ–ø—Ä–æ—Å1", "–≤–æ–ø—Ä–æ—Å2"],
  "humanResponse": "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
}
`

    try {
      const response = await Promise.race([
        this.ollama.chat({
          model: this.model,
          messages: [{ role: 'user', content: prompt }],
          options: { temperature: 0.7 }
        }),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout')), 20000)
        )
      ])

      const content = (response as any).message.content
      const parsed = JSON.parse(content)

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const results = [
        ...analysis.mkb.map((item: any) => this.mapToResult(item, 'mkb')),
        ...analysis.ls.map((item: any) => this.mapToResult(item, 'ls')),
        ...analysis.algo.map((item: any) => this.mapToResult(item, 'algorithm')),
        ...analysis.drug.map((item: any) => this.mapToResult(item, 'drug')),
        ...analysis.substation.map((item: any) => this.mapToResult(item, 'substation'))
      ]

      return {
        message: parsed.message || analysis.summary,
        results,
        fullResults: {
          mkb: analysis.mkb.map((item: any) => this.mapToResult(item, 'mkb')),
          ls: analysis.ls.map((item: any) => this.mapToResult(item, 'ls')),
          algo: analysis.algo.map((item: any) => this.mapToResult(item, 'algorithm')),
          drug: analysis.drug.map((item: any) => this.mapToResult(item, 'drug')),
          substation: analysis.substation.map((item: any) => this.mapToResult(item, 'substation'))
        },
        forceExpand: null,
        intent: intent.intent,
        availableSections: parsed.availableSections || [],
        clarifyingQuestions: parsed.clarifyingQuestions || [],
        aiIntent: intent.intent,
        aiConfidence: intent.confidence
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error)
      return this.getFallbackResponse(query, [])
    }
  }

  private mapToResult(item: any, type: string): any {
    const base = {
      id: String(item._id || item.id || Math.random()),
      title: item.title || item.name || '',
      description: item.description || item.note || '',
      type,
      url: this.buildUrl(item, type),
      data: item
    }

    if (type === 'mkb') {
      base.codes = { mkbCode: item.mkbCode, stationCode: item.stationCode }
      base.category = item.category?.name
    }

    if (type === 'ls') {
      base.localis = item.localis || item.description || item.note || ''
    }

    if (type === 'drug' && item.extractedDosage) {
      base.dosage = item.extractedDosage
      base.context = item.extractedContext
    }

    return base
  }

  private buildUrl(item: any, type: string): string {
    switch (type) {
      case 'mkb': return `/codifier/${item.category?.url}?id=${item._id}`
      case 'ls': return `/local-statuses/${item.category?.url}?id=${item._id}`
      case 'algorithm': return `/algorithms/${item.section?.url}/${item.category?.url}/${item._id}`
      case 'drug': return `/drugs?id=${item._id}`
      case 'substation': return `/substations?select=${encodeURIComponent(item.title || item.name || '')}`
      default: return ''
    }
  }

  private async findSimilarDiagnoses(diagnosisTitle: string, mkbCode: string, limit: number = 3) {
    try {
      const { default: MKB } = await import('~/server/models/MKB')
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –¥–∏–∞–≥–Ω–æ–∑–∞
      const excludeWords = ['–±–æ–ª–µ–∑–Ω—å', '—Å–∏–Ω–¥—Ä–æ–º', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ø–∞—Ç–æ–ª–æ–≥–∏—è', '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ']
      const keywords = diagnosisTitle.toLowerCase()
        .replace(/[\[\]()]/g, '')
        .split(/[\s,]+/)
        .filter((word: string) => word.length > 3 && !excludeWords.includes(word))
        .slice(0, 3)
      
      let similarDiagnoses: any[] = []
      
      if (keywords.length > 0) {
        // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–≥–Ω–æ–∑—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        similarDiagnoses = await MKB.find({
          $and: [
            { mkbCode: { $ne: mkbCode } }, // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–≥–Ω–æ–∑ –ø–æ –ú–ö–ë –∫–æ–¥—É
            {
              $or: [
                { name: { $regex: keywords.join('|'), $options: 'i' } },
                { note: { $regex: keywords.join('|'), $options: 'i' } }
              ]
            }
          ]
        })
        .populate('category', 'name url')
        .limit(limit)
        .lean()
      }
      
      return similarDiagnoses
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤:', error)
      return []
    }
  }

  private fallbackAnalysis(fuseResults: any[]): any {
    const grouped = {
      mkb: fuseResults.filter(r => r.type === 'mkb'),
      ls: fuseResults.filter(r => r.type === 'ls'),
      algo: fuseResults.filter(r => r.type === 'algorithm'),
      drug: fuseResults.filter(r => r.type === 'drug'),
      substation: fuseResults.filter(r => r.type === 'substation'),
      extractedDrugs: [],
      summary: `–ù–∞–π–¥–µ–Ω–æ ${fuseResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`
    }

    return grouped
  }

  private async processFuseResultsDirectly(query: string, fuseResults: any[]): Promise<OllamaAnalysisResult> {
    console.log('üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Fuse –Ω–∞–ø—Ä—è–º—É—é')
    
    const results = fuseResults.map(item => this.mapToResult(item, item.type))
    
    // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const qLower = query.toLowerCase()
    let intent = 'general'
    let confidence = 0.7 // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä—è–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Fuse
    
    if (qLower.includes('–º–∫–±') || qLower.includes('–∫–æ–¥') || qLower.includes('–¥–∏–∞–≥–Ω–æ–∑')) {
      intent = 'mkb'
    } else if (qLower.includes('–ø—Ä–µ–ø–∞—Ä–∞—Ç') || qLower.includes('–ª–µ–∫–∞—Ä—Å—Ç–≤–æ') || qLower.includes('–¥–æ–∑–∏—Ä–æ–≤–∫')) {
      intent = 'drug'
    } else if (qLower.includes('–∞–ª–≥–æ—Ä–∏—Ç–º') || qLower.includes('–ª–µ—á–µ–Ω–∏–µ') || qLower.includes('–ø—Ä–æ—Ç–æ–∫–æ–ª')) {
      intent = 'algo'
    } else if (qLower.includes('—Å—Ç–∞—Ç—É—Å') || qLower.includes('–ª–æ–∫–∞–ª–∏—Å') || qLower.includes('–æ–ø–∏—Å–∞–Ω–∏–µ')) {
      intent = 'ls'
    } else if (qLower.includes('–ø–æ–¥—Å—Ç–∞–Ω—Ü') || qLower.includes('—Å—Ç–∞–Ω—Ü–∏—è')) {
      intent = 'substation'
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const availableSections = []
    if (results.some(r => r.type === 'mkb')) availableSections.push('mkb')
    if (results.some(r => r.type === 'ls')) availableSections.push('ls')
    if (results.some(r => r.type === 'algorithm')) availableSections.push('algo')
    if (results.some(r => r.type === 'drug')) availableSections.push('drug')
    if (results.some(r => r.type === 'substation')) availableSections.push('substation')
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let message = `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n`
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    const mkbResults = results.filter(r => r.type === 'mkb')
    const lsResults = results.filter(r => r.type === 'ls')
    const algoResults = results.filter(r => r.type === 'algorithm')
    const drugResults = results.filter(r => r.type === 'drug')
    const substationResults = results.filter(r => r.type === 'substation')
    
    if (mkbResults.length > 0) {
      message += `**üè• –ú–ö–ë –∫–æ–¥—ã –∏ –¥–∏–∞–≥–Ω–æ–∑—ã (${mkbResults.length}):**\n`
      mkbResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.codes?.mkbCode) message += ` ‚Äî –ú–ö–ë: ${result.codes.mkbCode}`
        if (result.codes?.stationCode) message += `; –°—Ç–∞–Ω—Ü–∏—è: ${result.codes.stationCode}`
        message += `\n`
      })
      if (mkbResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${mkbResults.length - 3} –¥–∏–∞–≥–Ω–æ–∑–æ–≤\n`
      message += `\n`
    }
    
    if (algoResults.length > 0) {
      message += `**üìã –ê–ª–≥–æ—Ä–∏—Ç–º—ã –ª–µ—á–µ–Ω–∏—è (${algoResults.length}):**\n`
      algoResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.category) message += ` ‚Äî ${result.category}`
        message += `\n`
      })
      if (algoResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${algoResults.length - 3} –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\n`
      message += `\n`
    }
    
    if (drugResults.length > 0) {
      message += `**üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã (${drugResults.length}):**\n`
      drugResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.latinName) message += ` (${result.latinName})`
        message += `\n`
      })
      if (drugResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${drugResults.length - 3} –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤\n`
      message += `\n`
    }
    
    if (lsResults.length > 0) {
      message += `**üìç –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (${lsResults.length}):**\n`
      lsResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.localis) message += ` ‚Äî ${result.localis}`
        message += `\n`
      })
      if (lsResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${lsResults.length - 3} —Å—Ç–∞—Ç—É—Å–æ–≤\n`
      message += `\n`
    }
    
    if (substationResults.length > 0) {
      message += `**üöë –ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â–∏ (${substationResults.length}):**\n`
      substationResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.address) message += ` ‚Äî ${result.address}`
        message += `\n`
      })
      if (substationResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${substationResults.length - 3} –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π\n`
      message += `\n`
    }
    
    return {
      message,
      results,
      fullResults: {
        mkb: results.filter(r => r.type === 'mkb'),
        ls: results.filter(r => r.type === 'ls'),
        algo: results.filter(r => r.type === 'algorithm'),
        drug: results.filter(r => r.type === 'drug'),
        substation: results.filter(r => r.type === 'substation')
      },
      forceExpand: null,
      intent,
      availableSections,
      clarifyingQuestions: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å', '–ü–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ú–ö–ë', '–ü–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã'],
      aiIntent: intent,
      aiConfidence: confidence
    }
  }

  private getFallbackResponse(query: string, fuseResults: any[]): OllamaAnalysisResult {
    const results = fuseResults.map(item => this.mapToResult(item, item.type))
    
    // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const qLower = query.toLowerCase()
    let intent = 'general'
    let confidence = 0.5
    
    if (qLower.includes('–º–∫–±') || qLower.includes('–∫–æ–¥') || qLower.includes('–¥–∏–∞–≥–Ω–æ–∑')) {
      intent = 'mkb'
      confidence = 0.7
    } else if (qLower.includes('–ø—Ä–µ–ø–∞—Ä–∞—Ç') || qLower.includes('–ª–µ–∫–∞—Ä—Å—Ç–≤–æ') || qLower.includes('–¥–æ–∑–∏—Ä–æ–≤–∫')) {
      intent = 'drug'
      confidence = 0.7
    } else if (qLower.includes('–∞–ª–≥–æ—Ä–∏—Ç–º') || qLower.includes('–ª–µ—á–µ–Ω–∏–µ') || qLower.includes('–ø—Ä–æ—Ç–æ–∫–æ–ª')) {
      intent = 'algo'
      confidence = 0.7
    } else if (qLower.includes('—Å—Ç–∞—Ç—É—Å') || qLower.includes('–ª–æ–∫–∞–ª–∏—Å') || qLower.includes('–æ–ø–∏—Å–∞–Ω–∏–µ')) {
      intent = 'ls'
      confidence = 0.7
    } else if (qLower.includes('–ø–æ–¥—Å—Ç–∞–Ω—Ü') || qLower.includes('—Å—Ç–∞–Ω—Ü–∏—è')) {
      intent = 'substation'
      confidence = 0.7
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const availableSections = []
    if (results.some(r => r.type === 'mkb')) availableSections.push('mkb')
    if (results.some(r => r.type === 'ls')) availableSections.push('ls')
    if (results.some(r => r.type === 'algorithm')) availableSections.push('algo')
    if (results.some(r => r.type === 'drug')) availableSections.push('drug')
    if (results.some(r => r.type === 'substation')) availableSections.push('substation')
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    let message = `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n`
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    const mkbResults = results.filter(r => r.type === 'mkb')
    const lsResults = results.filter(r => r.type === 'ls')
    const algoResults = results.filter(r => r.type === 'algorithm')
    const drugResults = results.filter(r => r.type === 'drug')
    const substationResults = results.filter(r => r.type === 'substation')
    
    if (mkbResults.length > 0) {
      message += `**üè• –ú–ö–ë –∫–æ–¥—ã –∏ –¥–∏–∞–≥–Ω–æ–∑—ã (${mkbResults.length}):**\n`
      mkbResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.codes?.mkbCode) message += ` ‚Äî –ú–ö–ë: ${result.codes.mkbCode}`
        if (result.codes?.stationCode) message += `; –°—Ç–∞–Ω—Ü–∏—è: ${result.codes.stationCode}`
        message += `\n`
      })
      if (mkbResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${mkbResults.length - 3} –¥–∏–∞–≥–Ω–æ–∑–æ–≤\n`
      message += `\n`
    }
    
    if (algoResults.length > 0) {
      message += `**üìã –ê–ª–≥–æ—Ä–∏—Ç–º—ã –ª–µ—á–µ–Ω–∏—è (${algoResults.length}):**\n`
      algoResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.category) message += ` ‚Äî ${result.category}`
        message += `\n`
      })
      if (algoResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${algoResults.length - 3} –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\n`
      message += `\n`
    }
    
    if (drugResults.length > 0) {
      message += `**üíä –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã (${drugResults.length}):**\n`
      drugResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.latinName) message += ` (${result.latinName})`
        message += `\n`
      })
      if (drugResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${drugResults.length - 3} –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤\n`
      message += `\n`
    }
    
    if (lsResults.length > 0) {
      message += `**üìç –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (${lsResults.length}):**\n`
      lsResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.localis) message += ` ‚Äî ${result.localis}`
        message += `\n`
      })
      if (lsResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${lsResults.length - 3} —Å—Ç–∞—Ç—É—Å–æ–≤\n`
      message += `\n`
    }
    
    if (substationResults.length > 0) {
      message += `**üöë –ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â–∏ (${substationResults.length}):**\n`
      substationResults.slice(0, 3).forEach(result => {
        message += `‚Ä¢ ${result.title}`
        if (result.address) message += ` ‚Äî ${result.address}`
        message += `\n`
      })
      if (substationResults.length > 3) message += `‚Ä¢ ... –∏ –µ—â–µ ${substationResults.length - 3} –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π\n`
      message += `\n`
    }
    
    message += `üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞.`
    
    return {
      message,
      results,
      fullResults: {
        mkb: results.filter(r => r.type === 'mkb'),
        ls: results.filter(r => r.type === 'ls'),
        algo: results.filter(r => r.type === 'algorithm'),
        drug: results.filter(r => r.type === 'drug'),
        substation: results.filter(r => r.type === 'substation')
      },
      forceExpand: null,
      intent,
      availableSections,
      clarifyingQuestions: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å', '–ü–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ú–ö–ë', '–ü–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã'],
      aiIntent: intent,
      aiConfidence: confidence
    }
  }
}

export const ollamaAI = new OllamaMedicalAI()
