import connectDB from '~/server/utils/mongodb'
import MKB from '~/server/models/MKB'
import LocalStatus from '~/server/models/LocalStatus'
import Algorithm from '~/server/models/Algorithm'
import Drug from '~/server/models/Drug'

export interface ComprehensiveAnalysis {
  diagnosis: {
    mkb: any[]
    summary: string
  }
  treatment: {
    algorithms: any[]
    drugs: any[]
    localStatuses: any[]
    summary: string
  }
  recommendations: string[]
  humanResponse: string
}

export class DatabaseAnalyzer {
  
  async analyzeQuery(query: string): Promise<ComprehensiveAnalysis> {
    console.log('üß† –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', query)
    
    try {
      await connectDB()
      
      // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      const queryAnalysis = this.analyzeQueryIntent(query)
      console.log('üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', queryAnalysis)
      
      // 2. –ò—â–µ–º –¥–∏–∞–≥–Ω–æ–∑—ã –ú–ö–ë
      const mkbResults = await this.findMKBDiagnoses(query, queryAnalysis)
      
      // 3. –ò—â–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ª–µ—á–µ–Ω–∏—è
      const algorithmResults = await this.findTreatmentAlgorithms(query, queryAnalysis, mkbResults)
      
      // 4. –ò—â–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
      const drugResults = await this.findDrugs(query, queryAnalysis, algorithmResults)
      
      // 5. –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      const localStatusResults = await this.findLocalStatuses(query, queryAnalysis)
      
      // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç–≤–µ—Ç
      const analysis = this.generateComprehensiveAnalysis({
        query,
        mkbResults,
        algorithmResults,
        drugResults,
        localStatusResults,
        queryAnalysis
      })
      
      console.log('‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω')
      return analysis
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error)
      return this.getErrorAnalysis(query)
    }
  }
  
  private analyzeQueryIntent(query: string) {
    const qLower = query.toLowerCase()
    
    return {
      // –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
      isCode: /^\d{4}$/.test(query.trim()) || /^[A-Z]\d{2}(\.\d+)?$/i.test(query.trim()),
      isDrugQuery: /–ø—Ä–µ–ø–∞—Ä–∞—Ç|–ª–µ–∫–∞—Ä—Å—Ç–≤–æ|–¥–æ–∑–∏—Ä–æ–≤–∫|–¥–æ–∑—É/i.test(qLower),
      isAlgorithmQuery: /–∞–ª–≥–æ—Ä–∏—Ç–º|–ª–µ—á–µ–Ω–∏–µ|—Ç–µ—Ä–∞–ø–∏—è|–ø—Ä–æ—Ç–æ–∫–æ–ª/i.test(qLower),
      isDiagnosisQuery: /–¥–∏–∞–≥–Ω–æ–∑|–º–∫–±|–∫–æ–¥/i.test(qLower),
      
      // –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      medicalTerms: this.extractMedicalTerms(query),
      
      // –ö–æ–Ω—Ç–µ–∫—Å—Ç
      isEmergency: /–∫—Ä–∏–∑|–æ—Å—Ç—Ä—ã–π|–Ω–µ–æ—Ç–ª–æ–∂–Ω|—ç–∫—Å—Ç—Ä–µ–Ω–Ω/i.test(qLower),
      isPediatric: /–¥–µ—Ç|—Ä–µ–±–µ–Ω|–ø–µ–¥–∏–∞—Ç—Ä|–º–ª–∞–¥–µ–Ω/i.test(qLower),
      isAdult: /–≤–∑—Ä–æ—Å–ª|–≤–∑—Ä–æ—Å–ª—ã–π/i.test(qLower)
    }
  }
  
  private extractMedicalTerms(query: string): string[] {
    const terms = query
      .toLowerCase()
      .replace(/[^\p{L}\s]/gu, ' ')
      .split(/\s+/)
      .filter(term => term.length >= 3)
      .filter(term => !['–ø—Ä–∏', '–¥–ª—è', '–ª–µ—á–µ–Ω–∏—è', '—Ç–µ—Ä–∞–ø–∏–∏', '—Å–∏–º–ø—Ç–æ–º–æ–≤'].includes(term))
    
    return [...new Set(terms)]
  }
  
  private async findMKBDiagnoses(query: string, analysis: any) {
    console.log('üîç –ò—â–µ–º –¥–∏–∞–≥–Ω–æ–∑—ã –ú–ö–ë...')
    
    const results: any[] = []
    
    // –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É
    if (analysis.isCode) {
      const stationCode = /^\d{4}$/.test(query.trim()) ? query.trim() : null
      const mkbCode = /^[A-Z]\d{2}(\.\d+)?$/i.test(query.trim()) ? query.trim() : null
      
      if (stationCode) {
        const exact = await MKB.find({ stationCode })
          .populate('category', 'name url')
          .lean()
        results.push(...exact)
      }
      
      if (mkbCode) {
        const exact = await MKB.find({ mkbCode })
          .populate('category', 'name url')
          .lean()
        results.push(...exact)
      }
    }
    
    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (results.length === 0 && analysis.medicalTerms.length > 0) {
      const searchTerms = analysis.medicalTerms.join('|')
      const semantic = await MKB.find({
        $or: [
          { name: { $regex: searchTerms, $options: 'i' } },
          { note: { $regex: searchTerms, $options: 'i' } }
        ]
      })
        .populate('category', 'name url')
        .limit(5)
        .lean()
      
      results.push(...semantic)
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –ú–ö–ë: ${results.length}`)
    return results
  }
  
  private async findTreatmentAlgorithms(query: string, analysis: any, mkbResults: any[]) {
    console.log('üîç –ò—â–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ª–µ—á–µ–Ω–∏—è...')
    
    const results: any[] = []
    
    // –ü–æ–∏—Å–∫ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º –ú–ö–ë
    if (mkbResults.length > 0) {
      const diagnosisTerms = mkbResults
        .map(mkb => mkb.name)
        .join(' ')
        .toLowerCase()
        .replace(/[^\p{L}\s]/gu, ' ')
        .split(/\s+/)
        .filter(term => term.length >= 4)
        .slice(0, 3)
      
      if (diagnosisTerms.length > 0) {
        const searchTerms = diagnosisTerms.join('|')
        const algorithms = await Algorithm.find({
          $or: [
            { title: { $regex: searchTerms, $options: 'i' } },
            { description: { $regex: searchTerms, $options: 'i' } },
            { content: { $regex: searchTerms, $options: 'i' } }
          ]
        })
          .populate('category', 'name url')
          .populate('section', 'name url')
          .limit(5)
          .lean()
        
        results.push(...algorithms)
      }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º –∑–∞–ø—Ä–æ—Å–∞
    if (results.length === 0 && analysis.medicalTerms.length > 0) {
      const searchTerms = analysis.medicalTerms.join('|')
      const algorithms = await Algorithm.find({
        $or: [
          { title: { $regex: searchTerms, $options: 'i' } },
          { description: { $regex: searchTerms, $options: 'i' } },
          { content: { $regex: searchTerms, $options: 'i' } }
        ]
      })
        .populate('category', 'name url')
        .populate('section', 'name url')
        .limit(5)
        .lean()
      
      results.push(...algorithms)
    }
    
    console.log(`üî¨ –ù–∞–π–¥–µ–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤: ${results.length}`)
    return results
  }
  
  private async findDrugs(query: string, analysis: any, algorithmResults: any[]) {
    console.log('üîç –ò—â–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã...')
    
    const results: any[] = []
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    if (algorithmResults.length > 0) {
      const extractedDrugs = await this.extractDrugsFromAlgorithms(algorithmResults)
      
      if (extractedDrugs.length > 0) {
        // –ò—â–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤ –ë–î
        const drugNames = extractedDrugs.map(d => d.name)
        const searchConditions = drugNames.flatMap(name => [
          { name: { $regex: name, $options: 'i' } },
          { latinName: { $regex: name, $options: 'i' } },
          { synonyms: { $elemMatch: { $regex: name, $options: 'i' } } }
        ])
        
        const foundDrugs = await Drug.find({
          $or: searchConditions
        }).limit(10).lean()
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
        results.push(...foundDrugs.map(drug => {
          const extractedDrug = extractedDrugs.find(ed => 
            ed.name.toLowerCase() === drug.name.toLowerCase()
          )
          
          return {
            ...drug,
            extractedDosage: extractedDrug?.dosage || '',
            extractedContext: extractedDrug?.context || ''
          }
        }))
      }
    }
    
    // –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    if (analysis.isDrugQuery && analysis.medicalTerms.length > 0) {
      const searchTerms = analysis.medicalTerms.join('|')
      const directDrugs = await Drug.find({
        $or: [
          { name: { $regex: searchTerms, $options: 'i' } },
          { latinName: { $regex: searchTerms, $options: 'i' } },
          { synonyms: { $elemMatch: { $regex: searchTerms, $options: 'i' } } }
        ]
      }).limit(5).lean()
      
      results.push(...directDrugs)
    }
    
    console.log(`üíä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤: ${results.length}`)
    return results
  }
  
  private async findLocalStatuses(query: string, analysis: any) {
    console.log('üîç –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã...')
    
    const results: any[] = []
    
    if (analysis.medicalTerms.length > 0) {
      const searchTerms = analysis.medicalTerms.join('|')
      const localStatuses = await LocalStatus.find({
        $or: [
          { name: { $regex: searchTerms, $options: 'i' } },
          { description: { $regex: searchTerms, $options: 'i' } },
          { localis: { $regex: searchTerms, $options: 'i' } },
          { note: { $regex: searchTerms, $options: 'i' } }
        ]
      })
        .populate('category', 'name url')
        .limit(3)
        .lean()
      
      results.push(...localStatuses)
    }
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: ${results.length}`)
    return results
  }
  
  private async extractDrugsFromAlgorithms(algorithms: any[]) {
    const drugPatterns = [
      /\|\s*([–ê-–Ø–Å][–∞-—è—ë\s]+)\s*\|\s*([^|]+)/g,
      /(?:^|\n)\s*[-‚Ä¢*]\s*([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)/gi,
      /\(([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)\)/gi,
      /:\s*([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)/gi,
      /([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*-\s*\d+[.,]?\d*\s*–º–≥)/gi,
      /- ([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)/g,
      /([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)/g
    ]
    
    const foundDrugs = new Map<string, {dosage: string, context: string}>()
    
    for (const algo of algorithms) {
      const content = algo.content || algo.description || ''
      
      for (const pattern of drugPatterns) {
        let match
        while ((match = pattern.exec(content)) !== null) {
          const drugName = match[1] ? match[1].trim() : match[0].trim()
          const dosage = match[2] ? match[2].trim() : ''
          
          if (this.isValidDrugName(drugName)) {
            const context = this.extractContext(content, match.index, match[0].length)
            foundDrugs.set(drugName, { dosage, context })
          }
        }
      }
    }
    
    return Array.from(foundDrugs.entries()).map(([name, info]) => ({
      name,
      dosage: info.dosage,
      context: info.context
    }))
  }
  
  private isValidDrugName(name: string): boolean {
    const lowerName = name.toLowerCase()
    
    if (name.length < 3 || name.length > 50) return false
    
    const excludeTerms = [
      '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '—Å—Ä–µ–¥—Å—Ç–≤–æ', '—Ç–∞–±–ª–µ—Ç–∫–∞', '–∫–∞–ø—Å—É–ª–∞', '—Ä–∞—Å—Ç–≤–æ—Ä',
      '–∏–Ω—ä–µ–∫—Ü–∏—è', '—É–∫–æ–ª', '–∫–∞–ø–µ–ª—å–Ω–∏—Ü–∞', '–¥–æ–∑–∏—Ä–æ–≤–∫–∞', '–¥–æ–∑–∞', '–º–≥', '–º–ª',
      '–≤–Ω—É—Ç—Ä—å', '–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ', '–ø–æ–¥–∫–æ–∂–Ω–æ', '–≤–Ω—É—Ç—Ä–∏–º—ã—à–µ—á–Ω–æ', '–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ',
      '–ø—Ä–∏', '–¥–ª—è', '–ª–µ—á–µ–Ω–∏—è', '—Ç–µ—Ä–∞–ø–∏–∏', '—Å–∏–º–ø—Ç–æ–º–æ–≤', '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è',
      '–±–æ–ª–µ–∑–Ω–∏', '–ø–∞—Ç–æ–ª–æ–≥–∏–∏', '—Å–æ—Å—Ç–æ—è–Ω–∏—è', '—Å–∏–Ω–¥—Ä–æ–º–∞', '—Å–∏–º–ø—Ç–æ–º–∞',
      '–ø–∞—Ü–∏–µ–Ω—Ç', '–±–æ–ª—å–Ω–æ–π', '—á–µ–ª–æ–≤–µ–∫', '–≤–∑—Ä–æ—Å–ª—ã–π', '—Ä–µ–±–µ–Ω–æ–∫'
    ]
    
    if (excludeTerms.some(term => lowerName.includes(term))) return false
    if (!/[–∞-—è—ë]/i.test(name)) return false
    
    return true
  }
  
  private extractContext(content: string, matchIndex: number, matchLength: number): string {
    const contextStart = Math.max(0, matchIndex - 150)
    const contextEnd = Math.min(content.length, matchIndex + matchLength + 150)
    const context = content.substring(contextStart, contextEnd)
    
    const contextPatterns = [
      /–ø—Ä–∏\s+([^-\n]+?)(?=\s*-\s*[–ê-–Ø–Å]|$)/gi,
      /–¥–ª—è\s+([^-\n]+?)(?=\s*-\s*[–ê-–Ø–Å]|$)/gi,
      /–≤\s+—Å–ª—É—á–∞–µ\s+([^-\n]+?)(?=\s*-\s*[–ê-–Ø–Å]|$)/gi
    ]
    
    for (const pattern of contextPatterns) {
      const match = pattern.exec(context)
      if (match) {
        return match[1].trim()
      }
    }
    
    return ''
  }
  
  private generateComprehensiveAnalysis(data: any): ComprehensiveAnalysis {
    const { query, mkbResults, algorithmResults, drugResults, localStatusResults, queryAnalysis } = data
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ–∑
    const diagnosis = {
      mkb: mkbResults,
      summary: this.generateDiagnosisSummary(mkbResults, query)
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–µ—á–µ–Ω–∏–µ
    const treatment = {
      algorithms: algorithmResults,
      drugs: drugResults,
      localStatuses: localStatusResults,
      summary: this.generateTreatmentSummary(algorithmResults, drugResults, queryAnalysis)
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = this.generateRecommendations(queryAnalysis, mkbResults, drugResults)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
    const humanResponse = this.generateHumanResponse(query, {
      diagnosis,
      treatment,
      recommendations
    })
    
    return {
      diagnosis,
      treatment,
      recommendations,
      humanResponse
    }
  }
  
  private generateDiagnosisSummary(mkbResults: any[], query: string): string {
    if (mkbResults.length === 0) {
      return `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –¥–∏–∞–≥–Ω–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`
    }
    
    const primaryDiagnosis = mkbResults[0]
    return `–û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑: ${primaryDiagnosis.name} (–ú–ö–ë: ${primaryDiagnosis.mkbCode || 'N/A'})`
  }
  
  private generateTreatmentSummary(algorithms: any[], drugs: any[], analysis: any): string {
    const parts = []
    
    if (algorithms.length > 0) {
      parts.push(`–ù–∞–π–¥–µ–Ω–æ ${algorithms.length} –∞–ª–≥–æ—Ä–∏—Ç–º(–æ–≤) –ª–µ—á–µ–Ω–∏—è`)
    }
    
    if (drugs.length > 0) {
      parts.push(`${drugs.length} –ø—Ä–µ–ø–∞—Ä–∞—Ç(–æ–≤) –¥–ª—è —Ç–µ—Ä–∞–ø–∏–∏`)
    }
    
    if (analysis.isEmergency) {
      parts.push('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å')
    }
    
    return parts.length > 0 ? parts.join(', ') : '–õ–µ—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
  }
  
  private generateRecommendations(analysis: any, mkbResults: any[], drugResults: any[]): string[] {
    const recommendations = []
    
    if (analysis.isEmergency) {
      recommendations.push('üö® –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–µ–æ—Ç–ª–æ–∂–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é')
    }
    
    if (analysis.isPediatric) {
      recommendations.push('üë∂ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤')
    }
    
    if (drugResults.length > 0) {
      recommendations.push('üíä –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤')
    }
    
    if (mkbResults.length > 0) {
      recommendations.push('üìã –£—Ç–æ—á–Ω–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ —Å –ø–æ–º–æ—â—å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π')
    }
    
    return recommendations
  }
  
  private generateHumanResponse(query: string, data: any): string {
    const { diagnosis, treatment, recommendations } = data
    
    let response = `–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å "${query}" –∏ –≤–æ—Ç —á—Ç–æ –Ω–∞—à–ª–∞:\n\n`
    
    // –î–∏–∞–≥–Ω–æ–∑
    if (diagnosis.mkb.length > 0) {
      response += `üìã **–î–∏–∞–≥–Ω–æ–∑:**\n${diagnosis.summary}\n\n`
    }
    
    // –õ–µ—á–µ–Ω–∏–µ
    if (treatment.algorithms.length > 0 || treatment.drugs.length > 0) {
      response += `üî¨ **–õ–µ—á–µ–Ω–∏–µ:**\n${treatment.summary}\n\n`
      
      if (treatment.drugs.length > 0) {
        response += `üíä **–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã:**\n`
        treatment.drugs.slice(0, 5).forEach((drug: any) => {
          response += `‚Ä¢ ${drug.name}${drug.extractedDosage ? ` ‚Äî ${drug.extractedDosage}` : ''}\n`
        })
        response += '\n'
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (recommendations.length > 0) {
      response += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`
      recommendations.forEach(rec => {
        response += `${rec}\n`
      })
      response += '\n'
    }
    
    response += `–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–≤–∞–π—Ç–µ! üòä`
    
    return response
  }
  
  private getErrorAnalysis(query: string): ComprehensiveAnalysis {
    return {
      diagnosis: {
        mkb: [],
        summary: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞'
      },
      treatment: {
        algorithms: [],
        drugs: [],
        localStatuses: [],
        summary: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
      },
      recommendations: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å'],
      humanResponse: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞ "${query}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üòî`
    }
  }
}

export const dbAnalyzer = new DatabaseAnalyzer()
