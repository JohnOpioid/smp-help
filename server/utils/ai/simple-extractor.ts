// –ü—Ä–æ—Å—Ç–æ–π AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Node.js –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞

export interface DrugInfo {
  name: string
  dosage: string
  context: string
  indication: string
}

export interface AnalysisResult {
  drugs: DrugInfo[]
  summary: string
}

export class SimpleDrugExtractor {
  
  async extractDrugsFromAlgorithm(algorithmContent: string, diagnosis: string): Promise<AnalysisResult> {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞')
    
    try {
      // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
      const drugPatterns = [
        // –¢–∞–±–ª–∏—Ü—ã —Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç: | –ü—Ä–µ–ø–∞—Ä–∞—Ç | –î–æ–∑–∞ |)
        /\|\s*([–ê-–Ø–Å][–∞-—è—ë\s]+)\s*\|\s*([^|]+)/g,
        
        // –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã —Å –¥–æ–∑–∏—Ä–æ–≤–∫–∞–º–∏ –≤ —Å–ø–∏—Å–∫–∞—Ö
        /(?:^|\n)\s*[-‚Ä¢*]\s*([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)/gi,
        
        // –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤ —Å–∫–æ–±–∫–∞—Ö —Å –¥–æ–∑–∏—Ä–æ–≤–∫–∞–º–∏
        /\(([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)\)/gi,
        
        // –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
        /:\s*([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)/gi,
        
        // –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–æ–∑–∏—Ä–æ–≤–æ–∫
        /([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*-\s*\d+[.,]?\d*\s*–º–≥)/gi,
        
        // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        /- ([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)/g,
        /([–ê-–Ø–Å][–∞-—è—ë\s]+)\s+(\d+[.,]?\d*\s*–º–≥)/g
      ]
      
      const foundDrugs = new Map<string, DrugInfo>()
      
      // –ò—â–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –ø–æ –≤—Å–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
      for (const pattern of drugPatterns) {
        let match
        while ((match = pattern.exec(algorithmContent)) !== null) {
          const drugName = match[1] ? match[1].trim() : match[0].trim()
          const dosage = match[2] ? match[2].trim() : ''
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          if (this.isValidDrugName(drugName)) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            const context = this.extractContext(algorithmContent, match.index, match[0].length)
            
            foundDrugs.set(drugName, {
              name: drugName,
              dosage: dosage,
              context: context,
              indication: this.inferIndication(drugName, diagnosis)
            })
          }
        }
      }
      
      const drugs = Array.from(foundDrugs.values())
      const summary = this.generateSummary(diagnosis, drugs)
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤: ${drugs.length}`)
      console.log(`üìã –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã: ${drugs.map(d => d.name).join(', ')}`)
      
      return {
        drugs,
        summary
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:', error)
      return {
        drugs: [],
        summary: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞'
      }
    }
  }
  
  private isValidDrugName(name: string): boolean {
    const lowerName = name.toLowerCase()
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (name.length < 3 || name.length > 50) return false
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    const excludeTerms = [
      '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '—Å—Ä–µ–¥—Å—Ç–≤–æ', '—Ç–∞–±–ª–µ—Ç–∫–∞', '–∫–∞–ø—Å—É–ª–∞', '—Ä–∞—Å—Ç–≤–æ—Ä',
      '–∏–Ω—ä–µ–∫—Ü–∏—è', '—É–∫–æ–ª', '–∫–∞–ø–µ–ª—å–Ω–∏—Ü–∞', '–¥–æ–∑–∏—Ä–æ–≤–∫–∞', '–¥–æ–∑–∞', '–º–≥', '–º–ª',
      '–≤–Ω—É—Ç—Ä—å', '–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ', '–ø–æ–¥–∫–æ–∂–Ω–æ', '–≤–Ω—É—Ç—Ä–∏–º—ã—à–µ—á–Ω–æ', '–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ',
      '–ø—Ä–∏', '–¥–ª—è', '–ª–µ—á–µ–Ω–∏—è', '—Ç–µ—Ä–∞–ø–∏–∏', '—Å–∏–º–ø—Ç–æ–º–æ–≤', '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è',
      '–±–æ–ª–µ–∑–Ω–∏', '–ø–∞—Ç–æ–ª–æ–≥–∏–∏', '—Å–æ—Å—Ç–æ—è–Ω–∏—è', '—Å–∏–Ω–¥—Ä–æ–º–∞', '—Å–∏–º–ø—Ç–æ–º–∞',
      '–ø–∞—Ü–∏–µ–Ω—Ç', '–±–æ–ª—å–Ω–æ–π', '—á–µ–ª–æ–≤–µ–∫', '–≤–∑—Ä–æ—Å–ª—ã–π', '—Ä–µ–±–µ–Ω–æ–∫'
    ]
    
    if (excludeTerms.some(term => lowerName.includes(term))) return false
    
    // –î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
    if (!/[–∞-—è—ë]/i.test(name)) return false
    
    return true
  }
  
  private extractContext(content: string, matchIndex: number, matchLength: number): string {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
    const contextStart = Math.max(0, matchIndex - 150)
    const contextEnd = Math.min(content.length, matchIndex + matchLength + 150)
    const context = content.substring(contextStart, contextEnd)
    
    // –ò—â–µ–º —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    const contextPatterns = [
      /–ø—Ä–∏\s+([^-\n]+?)(?=\s*-\s*[–ê-–Ø–Å]|$)/gi,
      /–¥–ª—è\s+([^-\n]+?)(?=\s*-\s*[–ê-–Ø–Å]|$)/gi,
      /–≤\s+—Å–ª—É—á–∞–µ\s+([^-\n]+?)(?=\s*-\s*[–ê-–Ø–Å]|$)/gi
    ]
    
    for (const pattern of contextPatterns) {
      const match = pattern.exec(context)
      if (match) {
        return match[1].trim()
      }
    }
    
    return ''
  }
  
  private inferIndication(drugName: string, diagnosis: string): string {
    const lowerDrug = drugName.toLowerCase()
    const lowerDiagnosis = diagnosis.toLowerCase()
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
    if (lowerDiagnosis.includes('–≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏–≤–Ω–∞—è') || lowerDiagnosis.includes('–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—á–µ—Å–∫–∞—è')) {
      if (lowerDrug.includes('–º–æ–∫—Å–æ–Ω–∏–¥–∏–Ω') || lowerDrug.includes('–∫–ª–æ–Ω–∏–¥–∏–Ω')) {
        return '–ü—Ä–∏ –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—á–µ—Å–∫–æ–º –∫—Ä–∏–∑–µ'
      }
      if (lowerDrug.includes('–∫–∞–ø—Ç–æ–ø—Ä–∏–ª') || lowerDrug.includes('—ç–Ω–∞–ª–∞–ø—Ä–∏–ª')) {
        return '–ü—Ä–∏ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏–∏'
      }
      if (lowerDrug.includes('–º–µ—Ç–æ–ø—Ä–æ–ª–æ–ª') || lowerDrug.includes('–ø—Ä–æ–ø—Ä–∞–Ω–æ–ª–æ–ª')) {
        return '–ü—Ä–∏ —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏–∏'
      }
    }
    
    return '–ü–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º'
  }
  
  private generateSummary(diagnosis: string, drugs: DrugInfo[]): string {
    if (drugs.length === 0) {
      return `–î–ª—è –¥–∏–∞–≥–Ω–æ–∑–∞ "${diagnosis}" –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö.`
    }
    
    const drugNames = drugs.map(d => d.name).join(', ')
    return `–î–ª—è –¥–∏–∞–≥–Ω–æ–∑–∞ "${diagnosis}" —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã: ${drugNames}.`
  }
  
  async generateHumanResponse(query: string, results: any[]): Promise<string> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç
    const hasResults = results && results.length > 0
    
    if (!hasResults) {
      return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòî\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.`
    }
    
    const resultTypes = [...new Set(results.map(r => r.type))]
    let response = `–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞—à–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${query}". üéâ\n\n`
    
    if (resultTypes.includes('mkb')) {
      const mkbResults = results.filter(r => r.type === 'mkb')
      response += `üìã **–î–∏–∞–≥–Ω–æ–∑—ã –ú–ö–ë (${mkbResults.length}):**\n`
      mkbResults.forEach(r => {
        response += `‚Ä¢ ${r.title} ‚Äî –ú–ö–ë: ${r.data?.mkbCode || 'N/A'}\n`
      })
      response += '\n'
    }
    
    if (resultTypes.includes('algorithm')) {
      const algoResults = results.filter(r => r.type === 'algorithm')
      response += `üî¨ **–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ª–µ—á–µ–Ω–∏—è (${algoResults.length}):**\n`
      algoResults.forEach(r => {
        response += `‚Ä¢ ${r.title}\n`
      })
      response += '\n'
    }
    
    if (resultTypes.includes('drug')) {
      const drugResults = results.filter(r => r.type === 'drug')
      response += `üíä **–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã (${drugResults.length}):**\n`
      drugResults.forEach(r => {
        response += `‚Ä¢ ${r.title}${r.dosage ? ` ‚Äî ${r.dosage}` : ''}\n`
      })
      response += '\n'
    }
    
    response += `–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏? –ó–∞–¥–∞–≤–∞–π—Ç–µ! üòä`
    
    return response
  }
}

export const simpleExtractor = new SimpleDrugExtractor()
