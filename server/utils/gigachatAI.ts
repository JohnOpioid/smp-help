// GigaChat AI Integration
// –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.sber.ru/docs/ru/gigachat/overview

interface GigaChatMessage {
  role: 'system' | 'user' | 'assistant'
  content: string
}

interface GigaChatRequest {
  model: string
  messages: GigaChatMessage[]
  max_tokens?: number
  temperature?: number
}

interface GigaChatResponse {
  choices: Array<{
    message: {
      content: string
      role: string
    }
    finish_reason: string
  }>
  usage: {
    prompt_tokens: number
    completion_tokens: number
    total_tokens: number
  }
}

export class GigaChatAI {
  private apiKey: string
  private clientId: string
  private scope: string
  private baseUrl: string = 'https://gigachat.devices.sberbank.ru/api/v1'
  private accessToken: string | null = null
  private tokenExpiry: number = 0

  constructor(apiKey: string, clientId?: string, scope?: string) {
    this.apiKey = apiKey
    this.clientId = clientId || ''
    this.scope = scope || 'GIGACHAT_API_PERS'
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
  private async getAccessToken(): Promise<string> {
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (this.accessToken && Date.now() < this.tokenExpiry) {
      return this.accessToken
    }

    try {
      // –°–æ–∑–¥–∞–µ–º fetch —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º SSL –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      console.log('üîë GigaChat: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...')
      console.log('üìã GigaChat: Scope:', this.scope)
      console.log('üîê GigaChat: API Key (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):', this.apiKey.substring(0, 20) + '...')
      
      const fetchOptions: RequestInit = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json',
          'RqUID': crypto.randomUUID(),
          'Authorization': `Basic ${this.apiKey}`  // API –∫–ª—é—á —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
        },
        body: new URLSearchParams({
          scope: this.scope
        }).toString()
      }

      // –í Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ SSL
      if (typeof process !== 'undefined' && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0') {
        console.log('üîß GigaChat: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...')
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
      }

      const response = await fetch('https://ngw.devices.sberbank.ru:9443/api/v2/oauth', fetchOptions)

      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå GigaChat: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
          status: response.status,
          statusText: response.statusText,
          body: errorText,
          apiKey: this.apiKey.substring(0, 20) + '...',
          scope: this.scope
        })
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${response.status} ${response.statusText} - ${errorText}`)
      }

      const data = await response.json()
      this.accessToken = data.access_token
      this.tokenExpiry = Date.now() + (data.expires_in * 1000) - 60000 // -1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

      console.log('‚úÖ GigaChat: –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞')
      return this.accessToken
    } catch (error) {
      console.error('‚ùå GigaChat: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
      throw error
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
  async run(model: string = 'GigaChat', options: { prompt: string; max_tokens?: number }): Promise<any> {
    let retryCount = 0
    const maxRetries = 3

    while (retryCount < maxRetries) {
      try {
        const accessToken = await this.getAccessToken()
      
        const messages: GigaChatMessage[] = [
          {
            role: 'system',
            content: '–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –°–ú–ü. –û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –±–µ—Å–µ–¥—É, –¥–æ–±–∞–≤–ª—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã. –î–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π - —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –∫—Ä–∏—Ç–∏—á–Ω–∞!'
          },
          {
            role: 'user',
            content: options.prompt
          }
        ]

      const requestBody: GigaChatRequest = {
        model: model,
        messages: messages,
        max_tokens: options.max_tokens || 2000,
        temperature: 0.1  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—Ä–æ–≥–∏—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
      }

      console.log('üöÄ GigaChat: –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å...')

      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ SSL –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (typeof process !== 'undefined' && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0') {
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
      }

      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${accessToken}`
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå GigaChat: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API:', {
          status: response.status,
          statusText: response.statusText,
          body: errorText,
          promptLength: options.prompt.length
        })
        throw new Error(`–û—à–∏–±–∫–∞ GigaChat API: ${response.status} ${response.statusText} - ${errorText}`)
      }

      const data: GigaChatResponse = await response.json()
      
      if (!data.choices || data.choices.length === 0) {
        throw new Error('GigaChat –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç')
      }

      const aiResponse = data.choices[0].message.content

      console.log('‚úÖ GigaChat: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç')
      console.log('üìä GigaChat: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:', data.usage?.total_tokens || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

      return {
        response: aiResponse,
        usage: data.usage,
        success: true
      }

      } catch (error: any) {
        retryCount++
        console.error(`‚ùå GigaChat: –ü–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message)
        
        if (retryCount >= maxRetries) {
          console.error('‚ùå GigaChat: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã')
          throw error
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount))
        console.log(`üîÑ GigaChat: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries}...`)
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
  async healthCheck(): Promise<boolean> {
    try {
      await this.getAccessToken()
      return true
    } catch (error) {
      return false
    }
  }
}

// –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ GigaChat
export function createGigaChatAI(apiKey?: string, clientId?: string, scope?: string): GigaChatAI | null {
  if (!apiKey) {
    console.log('‚ö†Ô∏è GigaChat: API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω')
    return null
  }

  try {
    return new GigaChatAI(apiKey, clientId, scope)
  } catch (error) {
    console.error('‚ùå GigaChat: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:', error)
    return null
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
export function gigaChatAI() {
  const runtimeConfig = useRuntimeConfig()
  const apiKey = runtimeConfig.gigachatApiKey
  const clientId = runtimeConfig.gigachatClientId
  const scope = runtimeConfig.gigachatScope
  
  if (!apiKey) {
    throw new Error('GigaChat API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
  }
  
  return createGigaChatAI(apiKey, clientId, scope)
}
