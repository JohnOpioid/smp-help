// Mock AI –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ NuxtHub
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–¥—É–±–ª–∏—Ä—É–µ–º –∏–∑ API)
function generateContextualSuggestions(searchTerm: string, results: any[] = []): string[] {
  const suggestions: string[] = []
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
  const isTraumaContext = /—Ç—Ä–∞–≤–º|–ø–µ—Ä–µ–ª–æ–º|—É—à–∏–±|—Ä–∞–Ω–∞|–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏|–æ–∂–æ–≥|–ø–æ—Ä–µ–∑|—Å—Å–∞–¥–∏–Ω|–≥–µ–º–∞—Ç–æ–º|–≤—ã–≤–∏—Ö|—Ä–∞—Å—Ç—è–∂–µ–Ω–∏/i.test(searchTerm)
  const isDiagnosisContext = results.some(r => r.type === 'mkb' || r.type === 'codifier') || /–¥–∏–∞–≥–Ω–æ–∑|–±–æ–ª–µ–∑–Ω|—Å–∏–Ω–¥—Ä–æ–º|—Å–æ—Å—Ç–æ—è–Ω–∏/i.test(searchTerm)
  const isDrugContext = results.some(r => r.type === 'drug') || /–ø—Ä–µ–ø–∞—Ä–∞—Ç|–ª–µ–∫–∞—Ä—Å—Ç–≤|–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç|–¥–æ–∑–∏—Ä–æ–≤–∫/i.test(searchTerm)
  const isEmergencyContext = /–Ω–µ–æ—Ç–ª–æ–∂–Ω|—ç–∫—Å—Ç—Ä–µ–Ω–Ω|—Å—Ä–æ—á–Ω|–∫—Ä–∏—Ç–∏—á–µ—Å–∫|—Ä–µ–∞–Ω–∏–º–∞—Ü–∏|—à–æ–∫|–æ—Å—Ç–∞–Ω–æ–≤–∫|–ø—Ä–∏—Å—Ç—É–ø/i.test(searchTerm)
  const isSubstationContext = results.some(r => r.type === 'substation') || /–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏|—Å—Ç–∞–Ω—Ü–∏|–∞–¥—Ä–µ—Å|—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä.*\d+/i.test(searchTerm)
  
  // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  if (isDiagnosisContext) {
    suggestions.push('–¢–∞–∫—Ç–∏–∫–∞ –ª–µ—á–µ–Ω–∏—è')
  }
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∞–≤–º
  if (isTraumaContext) {
    suggestions.push('–õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
  }
  
  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–µ–æ—Ç–ª–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (isEmergencyContext) {
    suggestions.push('–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–∞')
  } else if (!isSubstationContext) {
    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–∞" –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è—Ö
    suggestions.push('–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–∞')
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  if (isDrugContext) {
    suggestions.push('–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã')
  } else if (isDiagnosisContext) {
    suggestions.push('–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')
  } else if (isSubstationContext) {
    suggestions.push('–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏')
  }
  
  // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ (–Ω–æ –Ω–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π)
  if (suggestions.length < 3 && !isSubstationContext) {
    const generalSuggestions = [
      '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      '–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π',
      '–ü–æ–∫–∞–∑–∞–Ω–∏—è –∫ –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏'
    ]
    
    for (const suggestion of generalSuggestions) {
      if (!suggestions.includes(suggestion) && suggestions.length < 4) {
        suggestions.push(suggestion)
      }
    }
  }
  
  return suggestions.slice(0, 4) // –ú–∞–∫—Å–∏–º—É–º 4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
}

export function createMockAI() {
  return {
    run: async (model: string, options: { prompt: string; max_tokens?: number; realData?: any }) => {
      const { prompt, realData } = options
      
      console.log('ü§ñ Mock AI: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å...')
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
      const searchTerm = extractSearchTerm(prompt)
      console.log('üîç Mock AI: –ò–∑–≤–ª–µ—á–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω:', searchTerm)
      
      const response = generateMedicalResponse(searchTerm, prompt, realData)
      const suggestions = generateContextualSuggestions(searchTerm, realData?.allResults || [])
      
      console.log('‚úÖ Mock AI: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç —Å', suggestions.length, '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏')
      
      return {
        response,
        suggestions,
        success: true
      }
    }
  }
}

function extractSearchTerm(prompt: string): string {
  const match = prompt.match(/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "([^"]+)"/i)
  return match ? match[1] : ''
}

function extractDatabaseFromPrompt(prompt: string): any {
  try {
    // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
    const drugsMatch = prompt.match(/–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã: (\[[\s\S]*?\])\s*(?:–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:|–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:|–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏:|$)/i)
    const mkbMatch = prompt.match(/–ú–ö–ë –∫–æ–¥—ã: (\[[\s\S]*?\])\s*(?:–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã:|–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:|–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:|–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏:|$)/i)
    const instructionsMatch = prompt.match(/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: (\[[\s\S]*?\])\s*(?:–ú–ö–ë –∫–æ–¥—ã:|–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã:|–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:|–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏:|$)/i)
    const localStatusesMatch = prompt.match(/–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: (\[[\s\S]*?\])\s*(?:–ú–ö–ë –∫–æ–¥—ã:|–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã:|–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:|–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏:|$)/i)
    const substationsMatch = prompt.match(/–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏: (\[[\s\S]*?\])\s*(?:–ú–ö–ë –∫–æ–¥—ã:|–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã:|–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:|–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:|$)/i)
    
    const result = {
      drugs: [],
      mkb: [],
      instructions: [],
      localStatuses: [],
      substations: []
    }
    
    if (drugsMatch) {
      try {
        result.drugs = JSON.parse(drugsMatch[1])
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤')
      }
    }
    
    if (mkbMatch) {
      try {
        result.mkb = JSON.parse(mkbMatch[1])
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ú–ö–ë, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤')
      }
    }
    
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    return result
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ–º–ø—Ç–∞:', error)
    return { drugs: [], mkb: [], instructions: [], localStatuses: [], substations: [] }
  }
}

function generateMedicalResponse(searchTerm: string, fullPrompt: string, realData?: any): string {
  const introVariants = [
    '–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:',
    '–ù–∞—à—ë–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏:',
    '–ü–æ–¥–±–æ—Ä–∫–∞ —Ç–æ—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î:',
    '–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:',
    '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:'
  ]
  const intro = () => introVariants[Math.floor(Math.random() * introVariants.length)]
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏–Ω–∞—á–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
  const dbData = realData || extractDatabaseFromPrompt(fullPrompt)
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 4-–∑–Ω–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–æ–¥—ã —Å—Ç–∞–Ω—Ü–∏–π)
  const fourDigitCodeMatch = searchTerm.match(/^(\d{4})$/)
  if (fourDigitCodeMatch) {
    const stationCode = fourDigitCodeMatch[1]
    console.log(`Mock AI: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –ø–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏: ${stationCode}`)
    const relevantCodes = dbData.mkb.filter((code: any) => 
      code.stationCode === stationCode || 
      code.stationCode === `${stationCode}*` ||
      (code.stationCode && code.stationCode.startsWith(stationCode))
    )
    
    if (relevantCodes.length > 0) {
      let response: string = `${intro()}\n\n`
      response += `<mkb-cards>\n`
      relevantCodes.forEach((code: any) => {
        const mkbCode = (code.mkbCode || '–ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω').toString().trim()
        const codeName = (code.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ').toString().trim()
        const categoryName = (code.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏').toString().trim()
        const codeNote = (code.note || '').toString().trim()
        const stationCode = (code.stationCode || '').toString().trim()
        
        if (mkbCode.length > 0 && mkbCode !== 'undefined' && 
            codeName.length > 0 && codeName !== 'undefined' && codeName !== ',' &&
            !mkbCode.includes('|') && !codeName.includes('|')) {
          response += `${mkbCode}|${codeName}|${categoryName}|${codeNote}|${stationCode}\n`
        }
      })
      response += `</mkb-cards>\n\n`
      return response
    } else {
      return `${intro()}\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ú–ö–ë –∫–æ–¥–æ–≤ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationCode}.`
    }
  }
  
  console.log('Mock AI: –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å:', searchTerm)
  console.log('Mock AI: –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤:', dbData.drugs?.length || 0)
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
  let learningInsights = ''
  if (dbData.learningData && dbData.learningData.length > 0) {
    console.log('Mock AI: –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è:', dbData.learningData.length, '–∑–∞–ø–∏—Å–µ–π')
    
    const positiveFeedback = dbData.learningData.filter((f: any) => f.rating === 'positive')
    const negativeFeedback = dbData.learningData.filter((f: any) => f.rating === 'negative')
    
    if (positiveFeedback.length > 0) {
      learningInsights += `\n\nüéØ **–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n`
    }
    
    if (negativeFeedback.length > 0) {
      learningInsights += `\n<learning-note>–£—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</learning-note>\n`
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Ç–µ–º–∞—Ç–∏–∫—É
  const isDosageQuery = /–¥–æ–∑–∏—Ä–æ–≤–∫|–¥–æ–∑—É|—Ä–∞—Å—Å—á–∏—Ç–∞|—Ä–∞—Å—á–µ—Ç.*–∫–≥|–º–≥.*–∫–≥|–º–ª.*–∫–≥/i.test(searchTerm)
  const weightMatch = searchTerm.match(/(\d+)\s*–∫–≥/i)
  const drugMatch = searchTerm.match(/(—ç—É—Ñ–∏–ª–ª–∏–Ω|–∞–º–∏–Ω–æ—Ñ–∏–ª–ª–∏–Ω|aminophylline|eufillin|—Ç–µ–æ—Ñ–∏–ª–ª–∏–Ω|theophylline|–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω|adrenaline|epinephrine|–∞—Ç—Ä–æ–ø–∏–Ω|atropine|–º–æ—Ä—Ñ–∏–Ω|morphine|–¥–µ–∫—Å–∞–º–µ—Ç–∞–∑–æ–Ω|dexamethasone)/i)
  
  // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∑–∏—Ä–æ–≤–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –≤–µ—Å–æ–º –∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
  if (isDosageQuery && weightMatch && drugMatch) {
    console.log('Mock AI: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∑–∏—Ä–æ–≤–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–ø—É—Å–∫–∞—é –ú–ö–ë –∞–Ω–∞–ª–∏–∑')
    return handleDosageQuery(searchTerm, weightMatch, drugMatch, dbData, learningInsights)
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
  const isMKBQuery = /–¥–∏–∞–≥–Ω–æ–∑|–º–∫–±|–∫–æ–¥|–±–æ–ª–µ–∑–Ω—å|–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å|–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å|–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏|–¥–∞–≤–ª–µ–Ω–∏|–∏–Ω—Ñ–∞—Ä–∫—Ç|—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏|–¥–∏–∞–±–µ—Ç|–ø–Ω–µ–≤–º–æ–Ω–∏|–±–µ—Ä–µ–º–µ–Ω–Ω|—è–∑–≤–∞|—è–∑–≤–µ–Ω–Ω|–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç|—Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç|–≥–∞—Å—Ç—Ä–∏—Ç|–∞–ø–ø–µ–Ω–¥–∏—Ü–∏—Ç|–û–ö–°|–æ–∫—Å|–æ—Å—Ç—Ä—ã–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º|–û–ù–ú–ö|–æ–Ω–º–∫|–∏–Ω—Å—É–ª—å—Ç|\d{4}.*–∫–æ–¥|\d{4}.*–¥–∏–∞–≥–Ω–æ–∑|—Å—Ç–∞–Ω—Ü–∏—è.*\d{4}|–∫–æ–¥.*—Å—Ç–∞–Ω—Ü–∏/i.test(searchTerm)
  const isDrugQuery = /–ø—Ä–µ–ø–∞—Ä–∞—Ç|–ª–µ–∫–∞—Ä—Å—Ç–≤–æ|–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç|–¥–æ–∑–∏—Ä–æ–≤–∫/i.test(searchTerm) || drugMatch
  const isSubstationQuery = /–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏|—Å—Ç–∞–Ω—Ü–∏|–Ω–æ–º–µ—Ä.*\d+|—Å—Ç–∞–Ω—Ü–∏—è.*\d+/i.test(searchTerm)
  const isNearbyQuery = /–±–ª–∏–∂–∞–π—à|–±–ª–∏–∑–∫|—Ä—è–¥–æ–º|–æ–∫–æ–ª–æ|–≤–æ–∑–ª–µ/i.test(searchTerm) && /–ø–æ–¥—Å—Ç–∞–Ω—Ü/i.test(searchTerm)
  
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∑–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
function handleDosageQuery(searchTerm: string, weightMatch: RegExpMatchArray, drugMatch: RegExpMatchArray, dbData: any, learningInsights: string): string {
  const weight = parseInt(weightMatch[1])
  const drugName = drugMatch[1]
    
    console.log('Mock AI: –∏—â—É –ø—Ä–µ–ø–∞—Ä–∞—Ç:', drugName, '–¥–ª—è –≤–µ—Å–∞:', weight, '–∫–≥')
    
    // –ò—â–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ë–î —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    let foundDrug = null
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    foundDrug = dbData.drugs?.find((drug: any) => 
      drug.name?.toLowerCase() === drugName.toLowerCase()
    )
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    if (!foundDrug) {
      foundDrug = dbData.drugs?.find((drug: any) => 
        drug.name?.toLowerCase().includes(drugName.toLowerCase())
      )
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    if (!foundDrug) {
      foundDrug = dbData.drugs?.find((drug: any) => 
        drug.latinName?.toLowerCase().includes(drugName.toLowerCase())
      )
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –∞–Ω–∞–ª–æ–≥–∞–º
    if (!foundDrug) {
      foundDrug = dbData.drugs?.find((drug: any) => 
        drug.analogs?.toLowerCase().includes(drugName.toLowerCase())
      )
    }
    
    console.log('Mock AI: –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–ø–∞—Ä–∞—Ç:', foundDrug?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    if (foundDrug) {
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –¥–ª—è –¥–æ–∑–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      let response: string = `${intro()}\n\n`
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
      response += `<drug-cards>\n`
      const drugName = foundDrug.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
      const latinName = foundDrug.latinName || ''
      const forms = foundDrug.forms ? `${foundDrug.forms.doseValue || ''}${foundDrug.forms.doseUnit || '–º–≥'}/${foundDrug.forms.volumeMl || ''}–º–ª` : ''
      const analogs = foundDrug.analogs || ''
      response += `${drugName}|${latinName}|${forms}|${analogs}|${foundDrug._id || ''}\n`
      response += `</drug-cards>\n\n`
      
      response += `**–í–µ—Å —Ä–µ–±–µ–Ω–∫–∞:** ${weight} –∫–≥\n\n`
      
      if (foundDrug.pediatricDose && foundDrug.pediatricDose.length > 0) {
        response += `üíä **–ü–µ–¥–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏:**\n`
        
        foundDrug.pediatricDose.forEach((dose: string) => {
          const doseMatch = dose.match(/(\d+(?:[.,]\d+)?)\s*-?\s*(\d+(?:[.,]\d+)?)?/)
          if (doseMatch) {
            const minDose = parseFloat(doseMatch[1].replace(',', '.'))
            const maxDose = doseMatch[2] ? parseFloat(doseMatch[2].replace(',', '.')) : minDose
            
            const minResult = (minDose * weight).toFixed(1)
            const maxResult = (maxDose * weight).toFixed(1)
            
            response += `- ${dose} ${foundDrug.pediatricDoseUnit || '–º–≥/–∫–≥'}: **${minResult}${maxDose !== minDose ? ` - ${maxResult}` : ''} –º–≥**\n`
          }
        })
        
        // –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞ –≤—ã–ø—É—Å–∫–∞
        if (foundDrug.forms && foundDrug.forms.doseValue && foundDrug.forms.volumeMl) {
          const concentration = foundDrug.forms.doseValue / foundDrug.forms.volumeMl
          response += `\nüìã **–§–æ—Ä–º–∞ –≤—ã–ø—É—Å–∫–∞:** ${foundDrug.forms.doseValue}${foundDrug.forms.doseUnit || '–º–≥'} –≤ ${foundDrug.forms.volumeMl}–º–ª\n`
          response += `**–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è:** ${concentration.toFixed(1)} –º–≥/–º–ª\n\n`
          response += `üíâ **–û–±—ä–µ–º –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è:**\n`
          
          foundDrug.pediatricDose.forEach((dose: string) => {
            const doseMatch = dose.match(/(\d+(?:[.,]\d+)?)\s*-?\s*(\d+(?:[.,]\d+)?)?/)
            if (doseMatch) {
              const minDose = parseFloat(doseMatch[1].replace(',', '.'))
              const maxDose = doseMatch[2] ? parseFloat(doseMatch[2].replace(',', '.')) : minDose
              
              const minMg = minDose * weight
              const maxMg = maxDose * weight
              const minMl = (minMg / concentration).toFixed(2)
              const maxMl = (maxMg / concentration).toFixed(2)
              
              response += `- –î–ª—è –¥–æ–∑—ã ${dose}: **${minMl}${maxDose !== minDose ? ` - ${maxMl}` : ''} –º–ª**\n`
            }
          })
        }
        
        if (foundDrug.ageRestrictions) {
          response += `\n‚ö†Ô∏è **–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:** ${foundDrug.ageRestrictions}\n`
        }
        
        response += `\nüè• **–í–∞–∂–Ω–æ:** –î–æ–∑–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤—Ä–∞—á–æ–º —Å —É—á–µ—Ç–æ–º –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞.`
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        response += learningInsights
        
        return response
      }
    }
    
    // Fallback –µ—Å–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
    return `–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ ${drugName} –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –≤–µ—Å–æ–º ${weight} –∫–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–µ–¥–∏–∞—Ç—Ä–∏—á–µ—Å–∫–æ–π –¥–æ–∑–∏—Ä–æ–≤–∫–µ. –ü—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ.`
}
  
  // –û–±—ã—á–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
  if (/–ø—Ä–µ–ø–∞—Ä–∞—Ç|–ª–µ–∫–∞—Ä—Å—Ç–≤–æ|–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç/i.test(searchTerm)) {
    return `–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–∞–π–¥–µ–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞.`
  }
  
  // –ê–Ω–∞–ª–∏–∑ –ú–ö–ë –∫–æ–¥–æ–≤ –∏ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞—Ö)
  if (isMKBQuery && !isDrugQuery) {
    return analyzeMKBQuery(searchTerm, dbData, learningInsights)
  }
  
  if (/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è|–ø—Ä–æ—Ü–µ–¥—É—Ä–∞|–∞–ª–≥–æ—Ä–∏—Ç–º/i.test(searchTerm)) {
    return `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–∞–π–¥–µ–Ω—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π.`
  }
  
  if (isSubstationQuery) {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è—Ö - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    if (isNearbyQuery) {
      console.log('Mock AI: –∑–∞–ø—Ä–æ—Å –æ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è—Ö - –Ω—É–∂–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è')
      return `–î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.

<geolocation-request>
–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ –°–ú–ü –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ.
</geolocation-request>

–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–∫–∞–∂—É –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ –ø—É—Ç–∏.${learningInsights}`
    }
    
    return analyzeSubstationQuery(searchTerm, dbData, learningInsights)
  }
  
  // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
  return `–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –°–ú–ü. –ò–∑—É—á–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`
}

function analyzeMKBQuery(searchTerm: string, dbData: any, learningInsights: string): string {
  console.log('Mock AI: –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ú–ö–ë –∑–∞–ø—Ä–æ—Å:', searchTerm)
  console.log('Mock AI: –¥–æ—Å—Ç—É–ø–Ω–æ –ú–ö–ë –∫–æ–¥–æ–≤:', dbData.mkb?.length || 0)
  
  if (!dbData.mkb || dbData.mkb.length === 0) {
    return `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ú–ö–ë –∫–æ–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É.`
  }
  
  // –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ú–ö–ë –∫–æ–¥—ã
  const relevantCodes = findRelevantMKBCodes(searchTerm, dbData.mkb)
  
  if (relevantCodes.length === 0) {
    return `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ú–ö–ë –∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ—Ä–º–∏–Ω—ã.${learningInsights}`
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  const isPregnancyContext = /–±–µ—Ä–µ–º–µ–Ω–Ω|—Ä–æ–¥—ã|–ø–æ—Å–ª–µ—Ä–æ–¥–æ–≤|–≥–µ—Å—Ç–∞—Ü/i.test(searchTerm)
  const isDiabetesContext = /–¥–∏–∞–±–µ—Ç|—Å–∞—Ö–∞—Ä–Ω/i.test(searchTerm)
  const isHeartContext = /–∏–Ω—Ñ–∞—Ä–∫—Ç|–º–∏–æ–∫–∞—Ä–¥|—Å–µ—Ä–¥—Ü/i.test(searchTerm)
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ú–ö–ë –∫–æ–¥–æ–≤
  let response = `–í–æ—Ç —á—Ç–æ –Ω–∞—à–µ–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n`
  
  // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
  
  // –ë–µ—Ä–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const topResults = relevantCodes.slice(0, 5)
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ú–ö–ë
  response += `<mkb-cards>\n`
  topResults.forEach((code: any) => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const mkbCode = (code.mkbCode || code.code || '–ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω').toString().trim()
    const codeName = (code.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ').toString().trim()
    const categoryName = (code.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏').toString().trim()
    const codeNote = (code.note || '').toString().trim()
    const stationCode = (code.stationCode || '').toString().trim()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
    if (mkbCode.length > 0 && mkbCode !== 'undefined' && 
        codeName.length > 0 && codeName !== 'undefined' && codeName !== ',' &&
        !mkbCode.includes('|') && !codeName.includes('|')) {
      response += `${mkbCode}|${codeName}|${categoryName}|${codeNote}|${stationCode}\n`
    }
  })
  response += `</mkb-cards>\n\n`
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—é
  response += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—é:**\n`
  
  if (isPregnancyContext) {
    response += `- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ O (–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å, —Ä–æ–¥—ã, –ø–æ—Å–ª–µ—Ä–æ–¥–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥)\n`
    response += `- –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ä–æ–∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n`
    response += `- –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–ª–æ–¥\n`
  } else if (isDiabetesContext) {
    response += `- –†–∞–∑–ª–∏—á–∞–π—Ç–µ –∏–Ω—Å—É–ª–∏–Ω–∑–∞–≤–∏—Å–∏–º—ã–π (E10) –∏ –∏–Ω—Å—É–ª–∏–Ω–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π (E11) –¥–∏–∞–±–µ—Ç\n`
    response += `- –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π\n`
    response += `- –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞\n`
  } else {
    response += `- –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–¥\n`
    response += `- –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è\n`
  }
  
  response += `- –ü—Ä–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º\n`
  
  response += learningInsights
  
  return response
}

function analyzeSubstationQuery(searchTerm: string, dbData: any, learningInsights: string): string {
  console.log('Mock AI: –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏:', searchTerm)
  console.log('Mock AI: –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π:', dbData.substations?.length || 0)
  
  if (!dbData.substations || dbData.substations.length === 0) {
    return `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±–µ.`
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–∏–∂–∞–π—à—É—é –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—é
  const isNearestQuery = /–±–ª–∏–∂–∞–π—à|–±–ª–∏–∑–∫|—Ä—è–¥–æ–º|–æ–∫–æ–ª–æ|–Ω–µ–¥–∞–ª–µ–∫–æ/i.test(searchTerm)
  
  let relevantSubstations
  let response: string
  
  if (isNearestQuery) {
    // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è—Ö –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    response = `**–î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–π –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:**\n\n`
    response += `<geolocation-request>\n`
    response += `–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–µ–∑–¥–∞.\n`
    response += `</geolocation-request>\n\n`
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    relevantSubstations = dbData.substations.slice(0, 3)
    response += `**–ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –°–ú–ü:**\n\n`
  } else {
    // –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–Ω–æ–º–µ—Ä—É
    relevantSubstations = findRelevantSubstations(searchTerm, dbData.substations)
    
    if (relevantSubstations.length === 0) {
      return `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.${learningInsights}`
    }
    
    response = `–ù–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏:\n\n`
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π
  response += '<substation-cards>\n'
  relevantSubstations.forEach((substation: any) => {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    let phones = '–ù–µ —É–∫–∞–∑–∞–Ω'
    if (Array.isArray(substation.phones) && substation.phones.length > 0) {
      phones = substation.phones.join(', ')
    } else if (substation.phone && substation.phone.trim()) {
      phones = substation.phone
    }
    
    const coords = substation.location?.coordinates ? `${substation.location.coordinates[1]},${substation.location.coordinates[0]}` : ''
    
    console.log(`üìû –ü–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ${substation.name}: —Ç–µ–ª–µ—Ñ–æ–Ω—ã = ${phones}`)
    
    response += `${substation.name}|${substation.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}|${phones}|${coords}\n`
  })
  response += '</substation-cards>\n\n'
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  response += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`
  response += `- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n`
  
  response += learningInsights
  
  return response
}

function findRelevantSubstations(searchTerm: string, substations: any[]): any[] {
  const searchWords = searchTerm.toLowerCase()
    .replace(/[^\w–∞-—è—ë\s]/gi, ' ')
    .split(/\s+/)
    .filter(word => word.length > 1)
  
  console.log('Mock AI: –∏—â—É –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ —Å–ª–æ–≤–∞–º:', searchWords)
  
  const scored = substations.map((substation: any) => {
    let score = 0
    const substationText = `${substation.name} ${substation.address || ''} ${substation.phone || ''} ${Array.isArray(substation.phones) ? substation.phones.join(' ') : ''}`.toLowerCase()
    
    // –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!)
    const numberMatch = searchTerm.match(/–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è.*?(\d+)|(\d+).*?–ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è/i)
    if (numberMatch) {
      const searchNumber = numberMatch[1] || numberMatch[2]
      
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      if (substation.name?.includes(`‚Ññ ${searchNumber}`) || 
          substation.name?.includes(`‚Ññ${searchNumber}`) ||
          substation.name?.includes(`–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏—è ${searchNumber}`) ||
          substation.name?.endsWith(` ${searchNumber}`)) {
        score += 1000  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        console.log(`üéØ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ ${searchNumber}:`, substation.name)
      }
      // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      else if (substation.name?.includes(searchNumber)) {
        score += 50
        console.log(`üìç –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ ${searchNumber}:`, substation.name)
      }
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
    searchWords.forEach(word => {
      if (substationText.includes(word)) {
        score += 10
      }
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      if (substation.name && substation.name.toLowerCase().includes(word)) {
        score += 20
      }
      // –ü–æ–∏—Å–∫ –≤ –∞–¥—Ä–µ—Å–µ
      if (substation.address && substation.address.toLowerCase().includes(word)) {
        score += 15
      }
    })
    
    return { ...substation, score }
  })
  
  const minScore = 10
  let filtered = scored
    .filter(item => item.score >= minScore)
    .sort((a, b) => b.score - a.score)
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É (score >= 100), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
  const exactMatch = filtered.find(item => item.score >= 100)
  if (exactMatch) {
    console.log('Mock AI: –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É:', exactMatch.name)
    filtered = [exactMatch]
  } else {
    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π
    filtered = filtered.slice(0, 5)
  }
  
  console.log('Mock AI: –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π:', filtered.length)
  if (filtered.length > 0) {
    console.log('Mock AI: —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', filtered[0].name, 'score:', filtered[0].score)
  }
  
  return filtered
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
function expandSearchTerms(searchTerm: string): string[] {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã (–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ)
  let comprehensiveMedicalSynonyms: any = {}
  let morphologicalVariants: any = {}
  
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (typeof require !== 'undefined') {
      const synonyms = require('./comprehensiveMedicalSynonyms')
      comprehensiveMedicalSynonyms = synonyms.comprehensiveMedicalSynonyms || {}
      morphologicalVariants = synonyms.morphologicalVariants || {}
    }
  } catch (error: any) {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã:', error.message)
  }
  
  const terms = [searchTerm.toLowerCase()]
  const searchLower = searchTerm.toLowerCase()
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  Object.entries(comprehensiveMedicalSynonyms).forEach(([area, data]: [string, any]) => {
    const { primary, secondary, conditions, abbreviations, morphological } = data
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    if (primary.some((term: string) => searchLower.includes(term))) {
      terms.push(...primary, ...secondary, ...conditions.slice(0, 5))
      if (abbreviations) terms.push(...abbreviations)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è/–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
    if (conditions.some((condition: string) => searchLower.includes(condition))) {
      terms.push(...conditions, ...primary.slice(0, 3))
      if (abbreviations) terms.push(...abbreviations)
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if (morphological) {
      Object.entries(morphological).forEach(([base, variants]: [string, any]) => {
        if (searchLower.includes(base)) {
          terms.push(...variants)
        }
      })
    }
  })
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  Object.entries(morphologicalVariants).forEach(([base, variants]: [string, any]) => {
    if (searchLower.includes(base)) {
      terms.push(...variants)
    }
  })
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const basicSynonyms: { [key: string]: string[] } = {
    '–∞–ø–ø–µ–Ω–¥–∏—Ü–∏—Ç': ['–∞–ø–ø–µ–Ω–¥–∏—Ü–∏—Ç', '–∞–ø–ø–µ–Ω–¥–∏–∫—Å', '—á–µ—Ä–≤–µ–æ–±—Ä–∞–∑–Ω—ã–π –æ—Ç—Ä–æ—Å—Ç–æ–∫'],
    '–∏–Ω—Å—É–ª—å—Ç': ['–∏–Ω—Å—É–ª—å—Ç', '–∫—Ä–æ–≤–æ–∏–∑–ª–∏—è–Ω–∏–µ', '–∏–Ω—Ñ–∞—Ä–∫—Ç –º–æ–∑–≥–∞', '–û–ù–ú–ö', '–æ—Å—Ç—Ä–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –º–æ–∑–≥–æ–≤–æ–≥–æ –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è'],
    '–û–ù–ú–ö': ['–û–ù–ú–ö', '–æ–Ω–º–∫', '–æ—Å—Ç—Ä–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –º–æ–∑–≥–æ–≤–æ–≥–æ –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è', '–∏–Ω—Å—É–ª—å—Ç', '–∫—Ä–æ–≤–æ–∏–∑–ª–∏—è–Ω–∏–µ', '—Ü–µ—Ä–µ–±—Ä–∞–ª—å–Ω', '–º–æ–∑–≥'],
    '–∏–Ω—Ñ–∞—Ä–∫—Ç': ['–∏–Ω—Ñ–∞—Ä–∫—Ç', '–º–∏–æ–∫–∞—Ä–¥', '–∫–æ—Ä–æ–Ω–∞—Ä–Ω', '–û–ö–°', '–æ—Å—Ç—Ä—ã–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º'],
    '–û–ö–°': ['–û–ö–°', '–æ–∫—Å', '–æ—Å—Ç—Ä—ã–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º', '–∏–Ω—Ñ–∞—Ä–∫—Ç', '–º–∏–æ–∫–∞—Ä–¥', '–∫–æ—Ä–æ–Ω–∞—Ä–Ω', '–∏—à–µ–º–∏—á–µ—Å–∫', '—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏'],
    '–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è': ['–≥–∏–ø–µ—Ä—Ç–µ–Ω–∑', '–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏', '–¥–∞–≤–ª–µ–Ω–∏', '–ê–ì'],
    '–¥–∏–∞–±–µ—Ç': ['–¥–∏–∞–±–µ—Ç', '—Å–∞—Ö–∞—Ä–Ω', '–≥–ª—é–∫–æ–∑', '–°–î'],
    '–ø–Ω–µ–≤–º–æ–Ω–∏—è': ['–ø–Ω–µ–≤–º–æ–Ω–∏', '–≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ –ª–µ–≥–∫–∏—Ö', '–ª–µ–≥–æ—á–Ω'],
    '—è–∑–≤–∞': ['—è–∑–≤–∞', '—è–∑–≤–µ–Ω–Ω', '–ø–µ–ø—Ç–∏—á–µ—Å–∫', '—ç—Ä–æ–∑–∏–≤–Ω'],
    '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç': ['–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç', '–ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω', '–ø–∞–Ω–∫—Ä–µ–∞—Å'],
    '—Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç': ['—Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç', '–∂–µ–ª—á–Ω', '—Ö–æ–ª–µ–¥–æ—Ö']
  }
  
  for (const [key, synonyms] of Object.entries(basicSynonyms)) {
    if (new RegExp(key, 'i').test(searchTerm)) {
      terms.push(...synonyms)
    }
  }
  
  return [...new Set(terms)] // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
}

function findRelevantMKBCodes(searchTerm: string, mkbCodes: any[]): any[] {
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
  let specialSearchRules: any = {}
  let exclusionRules: any = { –æ–±—â–∏–µ: [] }
  let contextModifiers: any = {}
  
  try {
    if (typeof require !== 'undefined') {
      const rules = require('./comprehensiveMedicalSynonyms')
      specialSearchRules = rules.specialSearchRules || {}
      exclusionRules = rules.exclusionRules || { –æ–±—â–∏–µ: [] }
      contextModifiers = rules.contextModifiers || {}
    }
  } catch (error: any) {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–∏—Å–∫–∞:', error.message)
  }
  
  // –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
  const expandedTerms = expandSearchTerms(searchTerm)
  console.log('Mock AI: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø–æ–∏—Å–∫–∞:', expandedTerms.slice(0, 10), '...')
  
  const searchWords = expandedTerms.flatMap(term => 
    term.toLowerCase()
      .replace(/[^\w–∞-—è—ë\s]/gi, ' ')
      .split(/\s+/)
      .filter(word => word.length > 2)
  )
  
  console.log('Mock AI: –∏—â—É –ø–æ —Å–ª–æ–≤–∞–º:', [...new Set(searchWords)].slice(0, 10), '...')
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  let activeRule: any = null
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –µ—Å–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
  if (Object.keys(specialSearchRules).length === 0) {
    specialSearchRules = {
      '—è–∑–≤–µ–Ω–Ω—ã–µ_–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è': {
        triggers: ['—è–∑–≤–∞', '—è–∑–≤–µ–Ω–Ω', '–ø–µ–ø—Ç–∏—á–µ—Å–∫', '—ç—Ä–æ–∑–∏–≤–Ω'],
        target_codes: ['K25', 'K26', 'K27', 'K28'],
        boost_terms: ['–∂–µ–ª—É–¥–∫', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–∏–ø–µ—Ä—Å—Ç–Ω', '–¥—É–æ–¥–µ–Ω–∞–ª—å–Ω', '–ø–µ–ø—Ç–∏—á–µ—Å–∫'],
        exclude_terms: ['–≤–∞—Ä–∏–∫–æ–∑–Ω', '—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫', '–∫–æ–∂–Ω', '–≤–µ–Ω–æ–∑–Ω']
      },
      '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç': {
        triggers: ['–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç', '–ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω', '–ø–∞–Ω–∫—Ä–µ–∞—Ç'],
        target_codes: ['K85', 'K86', 'K87'],
        boost_terms: ['–æ—Å—Ç—Ä—ã–π', '—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π', '–≤–æ—Å–ø–∞–ª–µ–Ω–∏', '–ø–æ–¥–∂–µ–ª—É–¥–æ—á–Ω', '–ø–∞–Ω–∫—Ä–µ–∞—Ç', '–Ω–µ–∫—Ä–æ—Ç–∏–∑–∏—Ä—É—é—â–∏–π', '–≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫–∏–π'],
        exclude_terms: ['–¥–∏–∞–±–µ—Ç', '–∏–Ω—Å—É–ª–∏–Ω', '—ç–Ω–¥–æ–∫—Ä–∏–Ω', '—Ä–∞–∫', '–æ–ø—É—Ö–æ–ª']
      },
      '–∞–ø–ø–µ–Ω–¥–∏—Ü–∏—Ç': {
        triggers: ['–∞–ø–ø–µ–Ω–¥–∏—Ü–∏—Ç', '–∞–ø–ø–µ–Ω–¥–∏–∫—Å', '—á–µ—Ä–≤–µ–æ–±—Ä–∞–∑–Ω'],
        target_codes: ['K35', 'K36', 'K37'],
        boost_terms: ['–æ—Å—Ç—Ä—ã–π', '–ø–µ—Ä—Ñ–æ—Ä–∞—Ç–∏–≤–Ω', '–≥–∞–Ω–≥—Ä–µ–Ω–æ–∑–Ω', '—á–µ—Ä–≤–µ–æ–±—Ä–∞–∑–Ω'],
        exclude_terms: ['—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π', '–¥—Ä—É–≥–∏–µ', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–Ω']
      },
      '—Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç': {
        triggers: ['—Ö–æ–ª–µ—Ü–∏—Å—Ç–∏—Ç', '–∂–µ–ª—á–Ω'],
        target_codes: ['K80', 'K81', 'K82', 'K83'],
        boost_terms: ['–æ—Å—Ç—Ä—ã–π', '—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π', '–∂–µ–ª—á–Ω', '—Ö–æ–ª–µ–¥–æ—Ö'],
        exclude_terms: ['–ø–∞–Ω–∫—Ä–µ–∞—Ç', '–ø–µ—á–µ–Ω', '–≥–µ–ø–∞—Ç–∏—Ç']
      },
      '–∏–Ω—Ñ–∞—Ä–∫—Ç': {
        triggers: ['–∏–Ω—Ñ–∞—Ä–∫—Ç', '–º–∏–æ–∫–∞—Ä–¥', '–û–ö–°', '–æ–∫—Å', '–æ—Å—Ç—Ä—ã–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º'],
        target_codes: ['I20', 'I21', 'I22', 'I24', 'I25'],
        boost_terms: ['–æ—Å—Ç—Ä—ã–π', '–º–∏–æ–∫–∞—Ä–¥', '–∫–æ—Ä–æ–Ω–∞—Ä–Ω', '—Å–µ—Ä–¥–µ—á–Ω', '–∏—à–µ–º–∏—á–µ—Å–∫', '—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏'],
        exclude_terms: ['–º–æ–∑–≥', '—Ü–µ—Ä–µ–±—Ä–∞–ª—å–Ω', '–∏–Ω—Å—É–ª—å—Ç', '–ª–µ–≥–∫', '—Ç–æ–∫—Å–∏—á–µ—Å–∫', '–∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω']
      },
      '–∏–Ω—Å—É–ª—å—Ç': {
        triggers: ['–∏–Ω—Å—É–ª—å—Ç', '–û–ù–ú–ö', '–æ–Ω–º–∫', '–æ—Å—Ç—Ä–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –º–æ–∑–≥–æ–≤–æ–≥–æ –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è', '–∫—Ä–æ–≤–æ–∏–∑–ª–∏—è–Ω–∏–µ', '—Ü–µ—Ä–µ–±—Ä–∞–ª—å–Ω'],
        target_codes: ['I60', 'I61', 'I62', 'I63', 'I64'],
        boost_terms: ['–æ—Å—Ç—Ä—ã–π', '–º–æ–∑–≥', '—Ü–µ—Ä–µ–±—Ä–∞–ª—å–Ω', '–≥–µ–º–æ—Ä—Ä–∞–≥–∏—á–µ—Å–∫', '–∏—à–µ–º–∏—á–µ—Å–∫', '—Ç—Ä–æ–º–±–æ—Ç–∏—á–µ—Å–∫', '–∫—Ä–æ–≤–æ–∏–∑–ª–∏—è–Ω–∏'],
        exclude_terms: ['—Å–µ—Ä–¥—Ü', '–º–∏–æ–∫–∞—Ä–¥', '–∫–æ—Ä–æ–Ω–∞—Ä–Ω', '–ª–µ–≥–∫', '—Ç–æ–∫—Å–∏—á–µ—Å–∫', '–∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω']
      },
      '–ø–æ–∏—Å–∫_–ø–æ_—Å—Ç–∞–Ω—Ü–∏–∏': {
        triggers: [/\d{4}.*–∫–æ–¥/, /\d{4}.*–¥–∏–∞–≥–Ω–æ–∑/, /—Å—Ç–∞–Ω—Ü–∏—è.*\d{4}/, /–∫–æ–¥.*—Å—Ç–∞–Ω—Ü–∏/],
        target_codes: [], // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        boost_terms: [],
        exclude_terms: []
      }
    }
  }
  
  Object.entries(specialSearchRules).forEach(([ruleName, rule]: [string, any]) => {
    if (rule.triggers && rule.triggers.some((trigger: string | RegExp) => {
      if (trigger instanceof RegExp) {
        return trigger.test(searchTerm)
      } else {
        return new RegExp(trigger, 'i').test(searchTerm)
      }
    })) {
      activeRule = rule
      console.log('Mock AI: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:', ruleName)
    }
  })
  
  const scored = mkbCodes.map(code => {
    let score = 0
    const mkbCode = code.mkbCode || code.code || ''
    const codeText = `${code.name} ${code.note || code.description || ''} ${mkbCode}`.toLowerCase()
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–¥–∞
    if (mkbCode && searchTerm.toUpperCase().includes(mkbCode.toUpperCase())) {
      score += 100
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    if (activeRule) {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏
      if (activeRule === specialSearchRules['–ø–æ–∏—Å–∫_–ø–æ_—Å—Ç–∞–Ω—Ü–∏–∏']) {
        const stationCodeMatch = searchTerm.match(/(\d{4})/i)
        if (stationCodeMatch) {
          const stationCode = stationCodeMatch[1]
          const codeStationCode = code.stationCode || ''
          
          // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç–∞–Ω—Ü–∏–∏
          if (codeStationCode.includes(stationCode)) {
            score += 300 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–æ–¥–∞ —Å—Ç–∞–Ω—Ü–∏–∏
          }
          
          // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç–∞–Ω—Ü–∏–∏
          if (codeStationCode.startsWith(stationCode)) {
            score += 250
          }
        }
      } else {
        // –û–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–æ–¥—ã
        if (activeRule.target_codes && activeRule.target_codes.some((targetCode: string) => mkbCode.startsWith(targetCode))) {
          score += 200 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–¥–æ–≤
        }
        
        // –ë—É—Å—Ç–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        if (activeRule.boost_terms) {
          activeRule.boost_terms.forEach((boostTerm: string) => {
            if (new RegExp(boostTerm, 'i').test(codeText)) {
              score += 50
            }
          })
        }
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        if (activeRule.exclude_terms) {
          activeRule.exclude_terms.forEach((excludeTerm: string) => {
            if (new RegExp(excludeTerm, 'i').test(codeText)) {
              score = 0
            }
          })
        }
      }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    Object.entries(contextModifiers).forEach(([modifier, config]: [string, any]) => {
      if (new RegExp(modifier, 'i').test(searchTerm)) {
        config.applies_to.forEach((applicableTerm: string) => {
          if (new RegExp(applicableTerm, 'i').test(codeText)) {
            score += config.boost
          }
        })
      }
    })
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    let shouldExclude = false
    Object.entries(exclusionRules).forEach(([area, rules]: [string, any]) => {
      if (area !== '–æ–±—â–∏–µ') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
        const areaKeywords = {
          '—Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ': ['—Å–µ—Ä–¥—Ü', '–∫–∞—Ä–¥–∏–æ', '–∞—Ä—Ç–µ—Ä–∏', '–≥–∏–ø–µ—Ä—Ç–µ–Ω–∑', '–∏–Ω—Ñ–∞—Ä–∫—Ç'],
          '–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ': ['–ª–µ–≥–∫', '–±—Ä–æ–Ω—Ö', '–ø–Ω–µ–≤–º–æ–Ω–∏', '–∞—Å—Ç–º', '–¥—ã—Ö–∞—Ç–µ–ª—å–Ω'],
          '–ø–∏—â–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ': ['–∂–µ–ª—É–¥–∫', '–∫–∏—à–µ—á–Ω', '–ø–µ—á–µ–Ω', '–≥–∞—Å—Ç—Ä–∏—Ç', '—è–∑–≤–∞', '–ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç']
        }
        
        const isAreaQuery = areaKeywords[area as keyof typeof areaKeywords]?.some(keyword => 
          new RegExp(keyword, 'i').test(searchTerm)
        )
        
        if (isAreaQuery) {
          rules.forEach((rule: RegExp) => {
            if (rule.test(codeText)) {
              shouldExclude = true
            }
          })
        }
      }
    })
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    exclusionRules.–æ–±—â–∏–µ.forEach((rule: RegExp) => {
      if (rule.test(codeText)) {
        score = Math.max(0, score - 30) // –°–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –Ω–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
      }
    })
    
    if (shouldExclude) {
      score = 0
    }
    
    // –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º (–µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞)
    if (!activeRule) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∫–æ–≤
      const uniqueWords = [...new Set(searchWords)]
      uniqueWords.forEach(word => {
        if (codeText.includes(word)) {
          score += 10
        }
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        if (code.name.toLowerCase().includes(word)) {
          score += 15
        }
      })
    }
    
    return { ...code, score }
  })
  
  // –ü–æ–≤—ã—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const minScore = activeRule ? 150 : /–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏|–¥–∞–≤–ª–µ–Ω–∏|–¥–∏–∞–±–µ—Ç|–∏–Ω—Ñ–∞—Ä–∫—Ç|–±–µ—Ä–µ–º–µ–Ω–Ω|–Ω–æ–≤–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏|–æ–ø—É—Ö–æ–ª/i.test(searchTerm) ? 40 : 10
  
  const filtered = scored
    .filter(item => item.score >= minScore)
    .sort((a, b) => b.score - a.score)
  
  console.log('Mock AI: –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤:', filtered.length)
  console.log('Mock AI: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥:', minScore)
  if (filtered.length > 0) {
    console.log('Mock AI: —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', filtered[0].mkbCode || filtered[0].code, filtered[0].name, 'score:', filtered[0].score)
  }
  
  return filtered
}

export function mockHubAI() {
  return createMockAI()
}
