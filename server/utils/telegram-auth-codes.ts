// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// –í production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis

interface AuthCode {
  userId: string
  telegramId: string
  code: string
  expires: number
  chatId?: number  // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  messageId?: number  // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
}

const authCodes = new Map<string, AuthCode>() // telegramId -> AuthCode
const codesByCode = new Map<string, string>() // code -> telegramId

// –û—Ç–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è pending –∫–æ–¥–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
interface PendingCode {
  telegramId: string
  code: string
  timestamp: number
}

const pendingCodesMap = new Map<string, PendingCode>()

export function storeAuthCode(telegramId: string, userId: string, code: string, expiresInSeconds: number = 600, chatId?: number, messageId?: number): void {
  const expires = Date.now() + expiresInSeconds * 1000
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
  cleanupExpiredCodes()
  
  authCodes.set(telegramId, {
    userId,
    telegramId,
    code,
    expires,
    chatId,
    messageId
  })
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å code -> telegramId
  codesByCode.set(code, telegramId)
}

export function storeAuthCodeWithChat(telegramId: string, chatId: number, messageId: number): void {
  console.log('üíæ storeAuthCodeWithChat –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è:', { telegramId, chatId, messageId })
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥, –¥–æ–±–∞–≤–ª—è—è chatId –∏ messageId
  const existing = authCodes.get(telegramId)
  console.log('üíæ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –Ω–∞–π–¥–µ–Ω:', !!existing)
  
  if (existing) {
    existing.chatId = chatId
    existing.messageId = messageId
    authCodes.set(telegramId, existing)
    console.log('üíæ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω —Å chatId –∏ messageId')
  } else {
    console.error('‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è telegramId:', telegramId)
  }
}

export function storeAuthCodeForSync(telegramId: string, code: string): void {
  console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', { telegramId, code })
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ Map
  pendingCodesMap.set(telegramId, {
    telegramId,
    code,
    timestamp: Date.now()
  })
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
  const now = Date.now()
  for (const [key, value] of pendingCodesMap.entries()) {
    if (now - value.timestamp > 60000) {
      pendingCodesMap.delete(key)
    }
  }
  
  console.log('üíæ –í—Å–µ–≥–æ pending –∫–æ–¥–æ–≤:', pendingCodesMap.size)
}

export function getAllPendingCodes(): PendingCode[] {
  console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º pending –∫–æ–¥—ã, –≤—Å–µ–≥–æ –≤ Map:', pendingCodesMap.size)
  
  if (pendingCodesMap.size > 0) {
    console.log('üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Map:')
    for (const [key, value] of pendingCodesMap.entries()) {
      console.log(`  Key: ${key}, Code: ${value.code}, Timestamp: ${value.timestamp}`)
    }
  }
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
  const now = Date.now()
  for (const [key, value] of pendingCodesMap.entries()) {
    console.log(`  –ö–æ–¥: ${value.code}, –≤–æ–∑—Ä–∞—Å—Ç: ${now - value.timestamp}ms`)
    if (now - value.timestamp > 60000) {
      pendingCodesMap.delete(key)
      console.log(`  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–æ–¥: ${value.code}`)
    }
  }
  
  const result = Array.from(pendingCodesMap.values())
  console.log(`üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${result.length} –∫–æ–¥–æ–≤`)
  
  if (result.length > 0) {
    console.log('üìã –ö–æ–¥—ã:', result.map(c => ({ telegramId: c.telegramId, code: c.code })))
  }
  
  return result
}

export function removePendingCode(telegramId: string, code: string): void {
  pendingCodesMap.delete(telegramId)
}

export function getAuthCodeWithChat(telegramId: string): AuthCode | null {
  cleanupExpiredCodes()
  return authCodes.get(telegramId) || null
}

export function getAuthCode(telegramId: string): AuthCode | null {
  cleanupExpiredCodes()
  return authCodes.get(telegramId) || null
}

export function getAuthCodeByCode(code: string): { telegramId: string; userId: string } | null {
  cleanupExpiredCodes()
  const telegramId = codesByCode.get(code)
  if (!telegramId) return null
  
  const authCode = authCodes.get(telegramId)
  if (!authCode) return null
  
  return {
    telegramId,
    userId: authCode.userId
  }
}

export function removeAuthCode(telegramId: string): void {
  const authCode = authCodes.get(telegramId)
  if (authCode) {
    codesByCode.delete(authCode.code)
    authCodes.delete(telegramId)
  }
}

export function removeAuthCodeByCode(code: string): void {
  const telegramId = codesByCode.get(code)
  if (telegramId) {
    codesByCode.delete(code)
    authCodes.delete(telegramId)
  }
}

function cleanupExpiredCodes(): void {
  const now = Date.now()
  for (const [key, value] of authCodes.entries()) {
    if (value.expires < now) {
      codesByCode.delete(value.code)
      authCodes.delete(key)
    }
  }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (—Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É)
if (typeof setInterval !== 'undefined') {
  setInterval(cleanupExpiredCodes, 60 * 1000)
}

