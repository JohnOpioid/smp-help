import Fuse from 'fuse.js'

export interface SearchItem {
  _id: string
  title?: string
  name?: string
  description?: string
  note?: string
  content?: string
  mkbCode?: string
  stationCode?: string
  code?: string
  category?: {
    name?: string
    url?: string
  }
  section?: string
  latinName?: string
  synonyms?: string[]
  forms?: any
  address?: string
  phones?: string[]
  phone?: string
  region?: {
    name?: string
  }
  regionName?: string
  type: 'mkb' | 'ls' | 'algorithm' | 'drug' | 'substation'
}

export const useFuseSearch = () => {
  const createFuseInstance = (items: SearchItem[]) => {
    const options = {
      keys: [
        {
          name: 'title',
          weight: 0.3
        },
        {
          name: 'name', 
          weight: 0.4
        },
        {
          name: 'description',
          weight: 0.2
        },
        {
          name: 'content',
          weight: 0.1
        },
        {
          name: 'note',
          weight: 0.1
        },
        {
          name: 'mkbCode',
          weight: 0.2
        },
        {
          name: 'code',
          weight: 0.2
        },
        {
          name: 'stationCode',
          weight: 0.05
        },
        {
          name: 'latinName',
          weight: 0.2
        },
        {
          name: 'synonyms',
          weight: 0.25
        },
        {
          name: 'category.name',
          weight: 0.05
        },
        {
          name: 'section',
          weight: 0.05
        },
        {
          name: 'address',
          weight: 0.05
        },
        {
          name: 'region.name',
          weight: 0.05
        }
      ],
      threshold: 0.6, // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º
      includeScore: true,
      includeMatches: true,
      minMatchCharLength: 2, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è - –º–µ–Ω—å—à–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤
      shouldSort: true,
      findAllMatches: true,
      ignoreLocation: true, // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–µ
      useExtendedSearch: true, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      distance: 100, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
      location: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ–∏—Å–∫–∞
      getFn: (obj: any, path: string | string[]) => {
        // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (typeof path === 'string') {
          return path.split('.').reduce((o, i) => o?.[i], obj) || ''
        } else if (Array.isArray(path)) {
          return path.reduce((o, i) => o?.[i], obj) || ''
        }
        return ''
      }
    }

    return new Fuse(items, options)
  }

  const search = (items: SearchItem[], query: string) => {
    if (!query || query.length < 2) return []
    
    console.log(`üîç Fuse.js –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`)
    console.log(`üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: ${items.length}`)
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const normalizedQuery = query.toLowerCase().trim()
    const queryWords = normalizedQuery.split(/\s+/).filter(word => word.length >= 2)
    
    console.log(`üîç –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: [${queryWords.join(', ')}]`)
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    const algoItems = items.filter(item => item.type === 'algorithm')
    const mkbItems = items.filter(item => item.type === 'mkb')
    const drugItems = items.filter(item => item.type === 'drug')
    
    console.log(`üîç –ú–ö–ë –∫–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: ${mkbItems.length}`)
    console.log(`üîç –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: ${drugItems.length}`)
    
    if (drugItems.length > 0) {
      const drug = drugItems[0]
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤:')
      console.log('  –ü–æ–ª—è:', Object.keys(drug))
      console.log('  –î–∞–Ω–Ω—ã–µ:', {
        title: drug.title,
        name: drug.name,
        description: drug.description,
        note: drug.note,
        latinName: drug.latinName,
        synonyms: drug.synonyms,
        category: drug.category
      })
    }
    
    if (algoItems.length > 0) {
      const algo = algoItems[0]
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:')
      console.log('  –ü–æ–ª—è:', Object.keys(algo))
      console.log('  –î–∞–Ω–Ω—ã–µ:', {
        title: algo.title,
        name: algo.name,
        description: algo.description,
        note: algo.note,
        content: algo.content?.substring(0, 100),
        section: algo.section,
        category: algo.category
      })
    }
    
    if (mkbItems.length > 0) {
      const mkb = mkbItems[0]
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ú–ö–ë:')
      console.log('  –ü–æ–ª—è:', Object.keys(mkb))
      console.log('  –î–∞–Ω–Ω—ã–µ:', {
        title: mkb.title,
        name: mkb.name,
        description: mkb.description,
        note: mkb.note,
        mkbCode: mkb.mkbCode,
        stationCode: mkb.stationCode,
        category: mkb.category
      })
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
    const lsItems = items.filter(item => item.type === 'ls')
    console.log(`üîç –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: ${lsItems.length}`)
    if (lsItems.length > 0) {
      const ls = lsItems[0]
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:')
      console.log('  –ü–æ–ª—è:', Object.keys(ls))
      console.log('  –î–∞–Ω–Ω—ã–µ:', {
        title: ls.title,
        name: ls.name,
        description: ls.description,
        note: ls.note,
        code: ls.code,
        mkbCode: ls.mkbCode,
        stationCode: ls.stationCode,
        category: ls.category
      })
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö LS —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      const queryLower = query.toLowerCase()
      const queryWords = queryLower.split(' ').filter(w => w.length > 2)
      console.log(`üîç –ü–æ–∏—Å–∫ —Å–ª–æ–≤ "${queryWords.join(', ')}" –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö:`)
      
      lsItems.forEach(item => {
        const title = (item.title || item.name || '').toLowerCase()
        const description = (item.description || item.note || '').toLowerCase()
        const hasTitleMatch = queryWords.some(word => title.includes(word))
        const hasDescMatch = queryWords.some(word => description.includes(word))
        
        if (hasTitleMatch || hasDescMatch) {
          console.log(`‚úÖ LS –Ω–∞–π–¥–µ–Ω: "${item.title || item.name}" (title: ${hasTitleMatch}, desc: ${hasDescMatch})`)
        } else {
          console.log(`‚ùå LS –Ω–µ –Ω–∞–π–¥–µ–Ω: "${item.title || item.name}" (title: "${title}", desc: "${description?.substring(0, 50)}")`)
        }
      })
    }
    
    const fuse = createFuseInstance(items)
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–∏–±–∫–æ—Å—Ç–∏
    let allResults: any[] = []
    
    // 1. –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    const fullQueryResults = fuse.search(query)
    allResults.push(...fullQueryResults.map(r => ({ ...r, searchType: 'full' })))
    
    // 2. –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É –æ—Ç–¥–µ–ª—å–Ω–æ (–¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏ –∫ –ø–æ—Ä—è–¥–∫—É)
    if (queryWords.length > 1) {
      queryWords.forEach(word => {
        const wordResults = fuse.search(word)
        allResults.push(...wordResults.map(r => ({ ...r, searchType: 'word', searchWord: word })))
      })
    }
    
    // 3. –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ 2 —Å–ª–æ–≤)
    if (queryWords.length === 2) {
      const reversedQuery = `${queryWords[1]} ${queryWords[0]}`
      const reversedResults = fuse.search(reversedQuery)
      allResults.push(...reversedResults.map(r => ({ ...r, searchType: 'reversed' })))
    }
    
    // 4. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ú–ö–ë –∫–æ–¥–æ–≤ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ –∫–æ–¥)
    const mkbCodePattern = /^[A-Z]\d{2}\.?\d*$/i
    if (mkbCodePattern.test(query.trim())) {
      const mkbCodeResults = fuse.search(query.trim())
      allResults.push(...mkbCodeResults.map(r => ({ ...r, searchType: 'mkbCode' })))
    }
    
    // 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
    const substationNumberMatch = query.match(/(\d+)/)
    if (substationNumberMatch) {
      const substationNumber = substationNumberMatch[1]
      const substationItems = items.filter(item => item.type === 'substation')
      
      if (substationItems.length > 0) {
        console.log(`üî¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ —Å –Ω–æ–º–µ—Ä–æ–º: ${substationNumber}`)
        
        // –ò—â–µ–º –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
        const matchingSubstations = substationItems.filter(item => {
          const searchText = `${item.title} ${item.description} ${item.address}`.toLowerCase()
          return searchText.includes(substationNumber)
        })
        
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π —Å –Ω–æ–º–µ—Ä–æ–º ${substationNumber}:`, matchingSubstations.length)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        matchingSubstations.forEach(item => {
          allResults.push({
            item,
            score: 0.1, // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
            searchType: 'substationNumber',
            matches: [{ indices: [[0, substationNumber.length - 1]], value: substationNumber }]
          })
        })
      }
    }
    
    // 6. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –ø–æ –∞–¥—Ä–µ—Å–Ω—ã–º —Å–ª–æ–≤–∞–º
    const queryLower = query.toLowerCase()
    const addressKeywords = ['—É–ª–∏—Ü–∞', '—É–ª', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä', '–ø–ª–æ—â–∞–¥—å', '–ø–ª', '–±—É–ª—å–≤–∞—Ä', '–±-—Ä', '—à–æ—Å—Å–µ', '—à', '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è', '–Ω–∞–±', '–¥–æ–º', '–¥', '–∫–æ—Ä–ø—É—Å', '–∫', '—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—Å—Ç—Ä', '–∫–≤–∞—Ä—Ç–∞–ª', '–∫–≤', '–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω', '–º–∫—Ä', '—Ä–∞–π–æ–Ω', '—Ä-–Ω', '–æ–±–ª–∞—Å—Ç—å', '–æ–±–ª', '–≥–æ—Ä–æ–¥', '–≥', '–ø–æ—Å–µ–ª–æ–∫', '–ø–æ—Å', '—Å–µ–ª–æ', '—Å', '–¥–µ—Ä–µ–≤–Ω—è', '–¥–µ—Ä']
    const hasAddressKeywords = addressKeywords.some(keyword => queryLower.includes(keyword))
    
    if (hasAddressKeywords) {
      const substationItems = items.filter(item => item.type === 'substation')
      
      if (substationItems.length > 0) {
        console.log(`üè† –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –ø–æ –∞–¥—Ä–µ—Å–Ω—ã–º —Å–ª–æ–≤–∞–º: ${query}`)
        
        // –ò—â–µ–º –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∞–¥—Ä–µ—Å–Ω—ã–µ —Å–ª–æ–≤–∞
        const matchingSubstations = substationItems.filter(item => {
          const searchText = `${item.title} ${item.description} ${item.address}`.toLowerCase()
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥—Ä–µ—Å–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
          return addressKeywords.some(keyword => searchText.includes(keyword)) ||
                 searchText.includes(queryLower)
        })
        
        console.log(`üè† –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π –ø–æ –∞–¥—Ä–µ—Å–Ω—ã–º —Å–ª–æ–≤–∞–º:`, matchingSubstations.length)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        matchingSubstations.forEach(item => {
          allResults.push({
            item,
            score: 0.2, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∞–¥—Ä–µ—Å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            searchType: 'substationAddress',
            matches: [{ indices: [[0, queryLower.length - 1]], value: queryLower }]
          })
        })
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const uniqueResults = new Map()
    allResults.forEach(result => {
      const key = result.item._id
      if (!uniqueResults.has(key) || result.score < uniqueResults.get(key).score) {
        uniqueResults.set(key, result)
      }
    })
    
    const results = Array.from(uniqueResults.values())
    
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Fuse.js: ${results.length}`)
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if (results.length > 0) {
      console.log('üìã –ü–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Fuse.js:', results.slice(0, 5).map(r => ({
        type: r.item.type,
        title: r.item.title,
        score: r.score?.toFixed(3)
      })))
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    const filteredResults = results.filter(result => {
      const score = result.score || 1
      const item = result.item
      
      // –ï—Å–ª–∏ score —Å–ª–∏—à–∫–æ–º –ø–ª–æ—Ö–æ–π, –∏—Å–∫–ª—é—á–∞–µ–º
      if (score > 0.8) {
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω ${item.type}: "${item.title}" (score: ${score.toFixed(3)} > 0.8)`)
        return false
      }
      
      // –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      const title = (item.title || item.name || '').toLowerCase()
      const description = (item.description || item.note || '').toLowerCase()
      const content = (item.content || '').toLowerCase()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
      const hasTitleMatch = queryWords.some(word => title.includes(word))
      const hasDescriptionMatch = queryWords.some(word => description.includes(word))
      const hasContentMatch = queryWords.some(word => content.includes(word))
      
      // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–π–¥–µ–Ω–æ
      const foundWords = queryWords.filter(word => 
        title.includes(word) || description.includes(word) || content.includes(word)
      )
      const wordMatchRatio = foundWords.length / queryWords.length
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞)
      const stopWords = ['–∏', '–≤', '–≤–æ', '–Ω–∞', '–Ω–æ', '–ø–æ', '—Å', '—Å–æ', '–∫', '—É', '–æ', '–æ–±', '–¥–ª—è', '–∏–∑', '–æ—Ç', '–¥–æ', '–∑–∞', '–Ω–∞–¥', '–ø–æ–¥', '–ø—Ä–∏']
      const relevantWords = queryWords.filter(word => word.length >= 3 && !stopWords.includes(word))
      const foundRelevantWords = relevantWords.filter(word => 
        title.includes(word) || description.includes(word) || content.includes(word)
      )
      const relevantWordMatchRatio = relevantWords.length > 0 ? foundRelevantWords.length / relevantWords.length : 0
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
      if (item.type === 'ls') {
        console.log(`üîç –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: "${title}" (score: ${score.toFixed(3)}, words: ${foundWords.length}/${queryWords.length}, ratio: ${wordMatchRatio.toFixed(2)})`)
      }
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
      if (item.type === 'drug') {
        console.log(`üîç –ü—Ä–µ–ø–∞—Ä–∞—Ç: "${title}" (score: ${score.toFixed(3)}, words: ${foundWords.length}/${queryWords.length}, ratio: ${wordMatchRatio.toFixed(2)})`)
        console.log(`  name: "${item.name}", latinName: "${item.latinName}", synonyms: [${item.synonyms?.join(', ') || '–Ω–µ—Ç'}]`)
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ú–ö–ë –∫–æ–¥–æ–≤ - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
      if (item.type === 'mkb') {
        // –î–ª—è –ú–ö–ë –∫–æ–¥–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ—Å–ª–∏:
        // 1. –ï—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏/–æ–ø–∏—Å–∞–Ω–∏–∏ –ò –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ª–æ–≤ –ò–õ–ò
        // 2. –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π score (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        const mkbAccepted = ((hasTitleMatch || hasDescriptionMatch) && relevantWordMatchRatio >= 0.5) || 
                           score < 0.3
        
        if (mkbAccepted) {
          console.log(`‚úÖ –ú–ö–ë –ø—Ä–∏–Ω—è—Ç: "${title}" (score: ${score.toFixed(3)}, relevantWords: ${foundRelevantWords.length}/${relevantWords.length}, titleMatch: ${hasTitleMatch}, descMatch: ${hasDescriptionMatch})`)
        } else {
          console.log(`‚ùå –ú–ö–ë –∏—Å–∫–ª—é—á–µ–Ω: "${title}" (score: ${score.toFixed(3)}, relevantWords: ${foundRelevantWords.length}/${relevantWords.length}, titleMatch: ${hasTitleMatch}, descMatch: ${hasDescriptionMatch})`)
        }
        
        return mkbAccepted
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
      if (item.type === 'drug') {
        // –î–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ—Å–ª–∏:
        // 1. –ï—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏/–ª–∞—Ç–∏–Ω—Å–∫–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏/—Å–∏–Ω–æ–Ω–∏–º–∞—Ö –ò –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ª–æ–≤ –ò–õ–ò
        // 2. –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π score (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        const drugAccepted = ((hasTitleMatch || hasDescriptionMatch) && relevantWordMatchRatio >= 0.5) || 
                           score < 0.3
        
        if (drugAccepted) {
          console.log(`‚úÖ –ü—Ä–µ–ø–∞—Ä–∞—Ç –ø—Ä–∏–Ω—è—Ç: "${title}" (score: ${score.toFixed(3)}, relevantWords: ${foundRelevantWords.length}/${relevantWords.length}, titleMatch: ${hasTitleMatch}, descMatch: ${hasDescriptionMatch})`)
        } else {
          console.log(`‚ùå –ü—Ä–µ–ø–∞—Ä–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω: "${title}" (score: ${score.toFixed(3)}, relevantWords: ${foundRelevantWords.length}/${relevantWords.length}, titleMatch: ${hasTitleMatch}, descMatch: ${hasDescriptionMatch})`)
        }
        
        return drugAccepted
      }
      
      // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (score > 0.6) {
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω ${item.type}: "${title}" (score: ${score.toFixed(3)} > 0.6)`)
        return false
      }
      
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
      const accepted = (hasTitleMatch || hasDescriptionMatch || hasContentMatch) && 
                      wordMatchRatio >= 0.5
      
      if (accepted && item.type === 'ls') {
        console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—è—Ç: "${title}"`)
      }
      
      if (!accepted) {
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω ${item.type}: "${title}" (titleMatch: ${hasTitleMatch}, descMatch: ${hasDescriptionMatch}, contentMatch: ${hasContentMatch}, wordRatio: ${wordMatchRatio.toFixed(2)})`)
      }
      
      return accepted
    })
    
    console.log(`‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`)
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if (filteredResults.length > 0) {
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredResults.map(r => ({
        type: r.type,
        title: r.title || r.name,
        score: r.score?.toFixed(3)
      })))
    }
    
    return filteredResults.map(result => ({
      ...result.item,
      score: result.score,
      matches: result.matches
    }))
  }

  const searchByType = (items: SearchItem[], query: string, type: SearchItem['type']) => {
    const filteredItems = items.filter(item => item.type === type)
    return search(filteredItems, query)
  }

  return {
    search,
    searchByType,
    createFuseInstance
  }
}
