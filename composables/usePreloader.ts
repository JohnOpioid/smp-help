import { ref, nextTick } from 'vue'

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ - —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
const globalPreloaderState = {
  isPreloading: ref(false),
  preloadProgress: ref(0),
  preloadMessage: ref(''),
  cache: new Map<string, any>()
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ refs –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export const isPreloading = globalPreloaderState.isPreloading
export const preloadProgress = globalPreloaderState.preloadProgress
export const preloadMessage = globalPreloaderState.preloadMessage
export const preloadCache = globalPreloaderState.cache

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
interface PreloadConfig {
  url: string
  preloadFn?: () => Promise<any>
  cacheKey?: string
  showProgress?: boolean
  message?: string
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
export const usePreloader = () => {
  const startPreload = async (config: PreloadConfig) => {
    const { url, preloadFn, cacheKey, showProgress = true, message = '–ó–∞–≥—Ä—É–∑–∫–∞...' } = config
    
    console.log('üöÄ startPreload –≤—ã–∑–≤–∞–Ω–∞:', { url, showProgress, message, hasCache: cacheKey ? preloadCache.has(cacheKey) : false })
    
    try {
      isPreloading.value = true
      preloadProgress.value = 0
      preloadMessage.value = message
      
      console.log('üìä –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', { isPreloading: isPreloading.value, progress: preloadProgress.value })
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º DOM
      await nextTick()
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (showProgress) {
        preloadProgress.value = 20
        await nextTick()
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await new Promise(resolve => setTimeout(resolve, 100))
        console.log('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 20%')
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –∫—ç—à–µ, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (cacheKey && preloadCache.has(cacheKey)) {
        preloadProgress.value = 80
        await nextTick()
        await new Promise(resolve => setTimeout(resolve, 100))
        preloadProgress.value = 100
        await nextTick()
        await new Promise(resolve => setTimeout(resolve, 200))
        await navigateTo(url)
        return
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
      if (preloadFn) {
        preloadProgress.value = 50
        await nextTick()
        const data = await preloadFn()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if (cacheKey) {
          preloadCache.set(cacheKey, data)
        }
        
        preloadProgress.value = 80
        await nextTick()
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 50))
      }
      
      preloadProgress.value = 100
      await nextTick()
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 200))
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await navigateTo(url)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
      await navigateTo(url)
    } finally {
      isPreloading.value = false
      preloadProgress.value = 0
      preloadMessage.value = ''
    }
  }
  
  const preloadData = async (key: string, fn: () => Promise<any>) => {
    if (preloadCache.has(key)) {
      return preloadCache.get(key)
    }
    
    try {
      const data = await fn()
      preloadCache.set(key, data)
      return data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
      return null
    }
  }
  
  const clearCache = (key?: string) => {
    if (key) {
      preloadCache.delete(key)
    } else {
      preloadCache.clear()
    }
  }
  
  const getCacheSize = () => preloadCache.size
  
  return {
    isPreloading,
    preloadProgress,
    preloadMessage,
    startPreload,
    preloadData,
    clearCache,
    getCacheSize
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const preloadAndNavigate = async (url: string, preloadFn?: () => Promise<any>, options?: Partial<PreloadConfig>) => {
  const { url: finalUrl, preloadFn: finalPreloadFn, cacheKey, showProgress = true, message = '–ó–∞–≥—Ä—É–∑–∫–∞...' } = {
    url,
    preloadFn,
    showProgress: true,
    message: '–ó–∞–≥—Ä—É–∑–∫–∞...',
    ...options
  }

  try {
    isPreloading.value = true
    preloadProgress.value = 0
    preloadMessage.value = message
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º DOM
    await nextTick()
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (showProgress) {
      preloadProgress.value = 20
      await nextTick()
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      await new Promise(resolve => setTimeout(resolve, 100))
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –∫—ç—à–µ, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (cacheKey && preloadCache.has(cacheKey)) {
      preloadProgress.value = 80
      await nextTick()
      await new Promise(resolve => setTimeout(resolve, 300))
      preloadProgress.value = 100
      await nextTick()
      await new Promise(resolve => setTimeout(resolve, 500))
      await navigateTo(finalUrl)
      return
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
    if (finalPreloadFn) {
      preloadProgress.value = 50
      await nextTick()
      const data = await finalPreloadFn()

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (cacheKey) {
        preloadCache.set(cacheKey, data)
      }

      preloadProgress.value = 80
      await nextTick()
      await new Promise(resolve => setTimeout(resolve, 200))
    }

    preloadProgress.value = 100
    await nextTick()

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 400))
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await navigateTo(finalUrl)

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error)
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
    await navigateTo(finalUrl)
  } finally {
    isPreloading.value = false
    preloadProgress.value = 0
    preloadMessage.value = ''
  }
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
export const preloadPage = {
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
  algorithm: async (section: string, category: string, algorithmId?: string) => {
    const url = algorithmId 
      ? `/algorithms/${section}/${category}/${algorithmId}`
      : `/algorithms/${section}/${category}`
    
    await preloadAndNavigate(url, async () => {
      await $fetch(`/api/algorithms/${section}/${category}`)
    }, {
      cacheKey: `algo-${section}-${category}`,
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
  codifier: async (categoryUrl: string, mkbId?: string) => {
    const url = mkbId 
      ? `/codifier/${categoryUrl}?id=${mkbId}`
      : `/codifier/${categoryUrl}`
    
    await preloadAndNavigate(url, async () => {
      await $fetch(`/api/codifier/${categoryUrl}`)
    }, {
      cacheKey: `codifier-${categoryUrl}`,
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
  localStatus: async (categoryUrl: string, statusId?: string) => {
    const url = statusId 
      ? `/local-statuses/${categoryUrl}?id=${statusId}`
      : `/local-statuses/${categoryUrl}`
    
    await preloadAndNavigate(url, async () => {
      await $fetch(`/api/local-statuses/${categoryUrl}`)
    }, {
      cacheKey: `ls-${categoryUrl}`,
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
  drug: async (drugId?: string) => {
    const url = drugId ? `/drugs?id=${drugId}` : '/drugs'
    
    await preloadAndNavigate(url, async () => {
      await $fetch('/api/drugs')
    }, {
      cacheKey: 'drugs',
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π
  substation: async (substationName?: string) => {
    const url = substationName 
      ? `/substations?select=${encodeURIComponent(substationName)}`
      : '/substations'
    
    await preloadAndNavigate(url, async () => {
      await $fetch('/api/substations')
    }, {
      cacheKey: 'substations',
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  instruction: async (instructionId?: string) => {
    const url = instructionId ? `/instructions?id=${instructionId}` : '/instructions'
    
    await preloadAndNavigate(url, async () => {
      await $fetch('/api/instructions')
    }, {
      cacheKey: 'instructions',
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...'
    })
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫–∏
export const useAutoPreload = () => {
  const setupAutoPreload = () => {
    if (process.client) {
      let preloadTimeout: NodeJS.Timeout | null = null
      let lastPreloadUrl: string | null = null
      let preloadInProgress = false
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
      const performPreload = async (href: string) => {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ URL
          if (preloadInProgress && lastPreloadUrl === href) {
            return
          }

          preloadInProgress = true
          lastPreloadUrl = href

          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL
          const url = new URL(href)
          const pathname = url.pathname

          let shouldPreload = false

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ URL
          if (pathname.includes('/algorithms/')) {
            const match = pathname.match(/\/algorithms\/([^/]+)(?:\/([^/?]+))?(?:\/([^/?]+))?/)
            if (match) {
              const [, section, category, algorithmId] = match
              // –î–ª—è –≥–ª–∞–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–æ–≤ (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
              if (category && category !== 'undefined') {
                await preloadPage.algorithm(section, category, algorithmId)
                shouldPreload = true
              }
            }
          } else if (pathname.includes('/codifier/')) {
            const match = pathname.match(/\/codifier\/([^/?]+)/)
            if (match) {
              const [, categoryUrl] = match
              await preloadPage.codifier(categoryUrl)
              shouldPreload = true
            }
          } else if (pathname.includes('/local-statuses/')) {
            const match = pathname.match(/\/local-statuses\/([^/?]+)/)
            if (match) {
              const [, categoryUrl] = match
              await preloadPage.localStatus(categoryUrl)
              shouldPreload = true
            }
          } else if (pathname.includes('/drugs')) {
            await preloadPage.drug()
            shouldPreload = true
          } else if (pathname.includes('/substations')) {
            await preloadPage.substation()
            shouldPreload = true
          } else if (pathname.includes('/instructions')) {
            await preloadPage.instruction()
            shouldPreload = true
          }

          // –ï—Å–ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
          if (!shouldPreload) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–∞–∂–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –±–µ–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
            await preloadAndNavigate(pathname, undefined, {
              showProgress: true,
              message: '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É...'
            })
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error)
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
          const url = new URL(href)
          await navigateTo(url.pathname)
        } finally {
          preloadInProgress = false
        }
      }
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Å—Å—ã–ª–∫–∏
      document.addEventListener('mouseenter', async (e) => {
        try {
          const target = e.target as HTMLElement
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ target —è–≤–ª—è–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ closest
          if (target && typeof target.closest === 'function') {
            const link = target.closest('a[href]') as HTMLAnchorElement
            
          if (link && link.href && (!link.href.startsWith('http') || link.href.includes(window.location.hostname))) {
            const href = link.href
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
            if (preloadTimeout) {
              clearTimeout(preloadTimeout)
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π
            preloadTimeout = setTimeout(async () => {
              await performPreload(href)
            }, 300) // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞
          }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—è:', error)
        }
      }, { passive: true })
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫–∏ (—Å—Ä–∞–∑—É, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
      document.addEventListener('click', async (e) => {
        try {
          // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–∫–∞
          if (e.defaultPrevented) {
            return
          }
          
          const target = e.target as HTMLElement
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ target —è–≤–ª—è–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ closest
          if (target && typeof target.closest === 'function') {
            const link = target.closest('a[href]') as HTMLAnchorElement
            
            if (link && link.href && (!link.href.startsWith('http') || link.href.includes(window.location.hostname))) {
              const href = link.href
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ URL
              if (preloadInProgress && lastPreloadUrl === href) {
                return
              }
              
              // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
              e.preventDefault()
              e.stopPropagation()
              
              // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞–≤–µ–¥–µ–Ω–∏—è
              if (preloadTimeout) {
                clearTimeout(preloadTimeout)
              }
              
              // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ –∫–ª–∏–∫–µ
              await performPreload(href)
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–ª–∏–∫–∞:', error)
        }
      }, { passive: false, capture: true })
    }
  }
  
  return {
    setupAutoPreload
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (process.client) {
  (window as any).checkPreloaderState = () => {
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', {
      isPreloading: isPreloading.value,
      progress: preloadProgress.value,
      message: preloadMessage.value,
      cacheSize: preloadCache.size
    })
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
  (window as any).testProgressBar = async () => {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä...')
    console.log('üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–†–û–ì–†–ï–°–°-–ë–ê–†!')
    
    isPreloading.value = true
    preloadProgress.value = 0
    preloadMessage.value = '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞...'
    
    console.log('üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { isPreloading: isPreloading.value, progress: preloadProgress.value })
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º DOM
    await nextTick()
    
    for (let i = 0; i <= 100; i += 10) {
      preloadProgress.value = i
      console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i}%`)
      await nextTick()
      await new Promise(resolve => setTimeout(resolve, 200))
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    isPreloading.value = false
    preloadProgress.value = 0
    preloadMessage.value = ''
    
    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω')
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
  (window as any).checkAutoPreloadSetup = () => {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏...')
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–∞:', document.querySelectorAll('a[href]').length)
    console.log('üìä –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:', Array.from(document.querySelectorAll('a[href]')).slice(0, 5).map(a => a.href))
  }
}
