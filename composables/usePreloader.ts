import { ref, nextTick } from 'vue'

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
const isPreloading = ref(false)
const preloadProgress = ref(0)
const preloadMessage = ref('')

// –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const preloadCache = new Map<string, any>()

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
interface PreloadConfig {
  url: string
  preloadFn?: () => Promise<any>
  cacheKey?: string
  showProgress?: boolean
  message?: string
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
export const usePreloader = () => {
  const startPreload = async (config: PreloadConfig) => {
    const { url, preloadFn, cacheKey, showProgress = true, message = '–ó–∞–≥—Ä—É–∑–∫–∞...' } = config
    
    console.log('üöÄ startPreload –≤—ã–∑–≤–∞–Ω–∞:', { url, showProgress, message, hasCache: cacheKey ? preloadCache.has(cacheKey) : false })
    
    try {
      isPreloading.value = true
      preloadProgress.value = 0
      preloadMessage.value = message
      
      console.log('üìä –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', { isPreloading: isPreloading.value, progress: preloadProgress.value })
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (showProgress) {
        preloadProgress.value = 20
        await nextTick()
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await new Promise(resolve => setTimeout(resolve, 100))
        console.log('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 20%')
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –∫—ç—à–µ, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (cacheKey && preloadCache.has(cacheKey)) {
        preloadProgress.value = 80
        await new Promise(resolve => setTimeout(resolve, 100))
        preloadProgress.value = 100
        await new Promise(resolve => setTimeout(resolve, 200))
        await navigateTo(url)
        return
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
      if (preloadFn) {
        preloadProgress.value = 50
        const data = await preloadFn()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if (cacheKey) {
          preloadCache.set(cacheKey, data)
        }
        
        preloadProgress.value = 80
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 50))
      }
      
      preloadProgress.value = 100
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 200))
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await navigateTo(url)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
      await navigateTo(url)
    } finally {
      isPreloading.value = false
      preloadProgress.value = 0
      preloadMessage.value = ''
    }
  }
  
  const preloadData = async (key: string, fn: () => Promise<any>) => {
    if (preloadCache.has(key)) {
      return preloadCache.get(key)
    }
    
    try {
      const data = await fn()
      preloadCache.set(key, data)
      return data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
      return null
    }
  }
  
  const clearCache = (key?: string) => {
    if (key) {
      preloadCache.delete(key)
    } else {
      preloadCache.clear()
    }
  }
  
  const getCacheSize = () => preloadCache.size
  
  return {
    isPreloading: readonly(isPreloading),
    preloadProgress: readonly(preloadProgress),
    preloadMessage: readonly(preloadMessage),
    startPreload,
    preloadData,
    clearCache,
    getCacheSize
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const preloadAndNavigate = async (url: string, preloadFn?: () => Promise<any>, options?: Partial<PreloadConfig>) => {
  const { startPreload } = usePreloader()
  
  console.log('üéØ preloadAndNavigate –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è:', url, '—Å –æ–ø—Ü–∏—è–º–∏:', options)
  
  await startPreload({
    url,
    preloadFn,
    showProgress: true,
    message: '–ó–∞–≥—Ä—É–∑–∫–∞...',
    ...options
  })
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
export const preloadPage = {
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
  algorithm: async (section: string, category: string, algorithmId?: string) => {
    const url = algorithmId 
      ? `/algorithms/${section}/${category}/${algorithmId}`
      : `/algorithms/${section}/${category}`
    
    await preloadAndNavigate(url, async () => {
      await $fetch(`/api/algorithms/${section}/${category}`)
    }, {
      cacheKey: `algo-${section}-${category}`,
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
  codifier: async (categoryUrl: string, mkbId?: string) => {
    const url = mkbId 
      ? `/codifier/${categoryUrl}?id=${mkbId}`
      : `/codifier/${categoryUrl}`
    
    await preloadAndNavigate(url, async () => {
      await $fetch(`/api/codifier/${categoryUrl}`)
    }, {
      cacheKey: `codifier-${categoryUrl}`,
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
  localStatus: async (categoryUrl: string, statusId?: string) => {
    const url = statusId 
      ? `/local-statuses/${categoryUrl}?id=${statusId}`
      : `/local-statuses/${categoryUrl}`
    
    await preloadAndNavigate(url, async () => {
      await $fetch(`/api/local-statuses/${categoryUrl}`)
    }, {
      cacheKey: `ls-${categoryUrl}`,
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
  drug: async (drugId?: string) => {
    const url = drugId ? `/drugs?id=${drugId}` : '/drugs'
    
    await preloadAndNavigate(url, async () => {
      await $fetch('/api/drugs')
    }, {
      cacheKey: 'drugs',
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π
  substation: async (substationName?: string) => {
    const url = substationName 
      ? `/substations?select=${encodeURIComponent(substationName)}`
      : '/substations'
    
    await preloadAndNavigate(url, async () => {
      await $fetch('/api/substations')
    }, {
      cacheKey: 'substations',
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π...'
    })
  },
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  instruction: async (instructionId?: string) => {
    const url = instructionId ? `/instructions?id=${instructionId}` : '/instructions'
    
    await preloadAndNavigate(url, async () => {
      await $fetch('/api/instructions')
    }, {
      cacheKey: 'instructions',
      message: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...'
    })
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫–∏
export const useAutoPreload = () => {
  const setupAutoPreload = () => {
    if (process.client) {
      let preloadTimeout: NodeJS.Timeout | null = null
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
      const performPreload = async (href: string) => {
        try {
          console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è:', href)
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ URL
          if (href.includes('/algorithms/')) {
            const match = href.match(/\/algorithms\/([^/]+)\/([^/]+)(?:\/([^/?]+))?/)
            if (match) {
              const [, section, category, algorithmId] = match
              await preloadPage.algorithm(section, category, algorithmId)
            }
          } else if (href.includes('/codifier/')) {
            const match = href.match(/\/codifier\/([^/?]+)/)
            if (match) {
              const [, categoryUrl] = match
              await preloadPage.codifier(categoryUrl)
            }
          } else if (href.includes('/local-statuses/')) {
            const match = href.match(/\/local-statuses\/([^/?]+)/)
            if (match) {
              const [, categoryUrl] = match
              await preloadPage.localStatus(categoryUrl)
            }
          } else if (href.includes('/drugs')) {
            await preloadPage.drug()
          } else if (href.includes('/substations')) {
            await preloadPage.substation()
          } else if (href.includes('/instructions')) {
            await preloadPage.instruction()
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ performPreload:', error)
        }
      }
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Å—Å—ã–ª–∫–∏
      document.addEventListener('mouseenter', async (e) => {
        try {
          const target = e.target as HTMLElement
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ target —è–≤–ª—è–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ closest
          if (target && typeof target.closest === 'function') {
            const link = target.closest('a[href]') as HTMLAnchorElement
            
            if (link && link.href && !link.href.startsWith('http')) {
              const href = link.href
              
              console.log('üñ±Ô∏è –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å—Å—ã–ª–∫—É:', href)
              
              // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
              if (preloadTimeout) {
                clearTimeout(preloadTimeout)
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π
              preloadTimeout = setTimeout(async () => {
                await performPreload(href)
              }, 300) // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—è:', error)
        }
      }, { passive: true })
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫–∏ (—Å—Ä–∞–∑—É, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
      document.addEventListener('click', async (e) => {
        try {
          const target = e.target as HTMLElement
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ target —è–≤–ª—è–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ closest
          if (target && typeof target.closest === 'function') {
            const link = target.closest('a[href]') as HTMLAnchorElement
            
            if (link && link.href && !link.href.startsWith('http')) {
              const href = link.href
              
              console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ:', href)
              
              // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞–≤–µ–¥–µ–Ω–∏—è
              if (preloadTimeout) {
                clearTimeout(preloadTimeout)
              }
              
              // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ –∫–ª–∏–∫–µ
              await performPreload(href)
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–ª–∏–∫–∞:', error)
        }
      }, { passive: true })
    }
  }
  
  return {
    setupAutoPreload
  }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
export const testPreloader = async () => {
  const { startPreload } = usePreloader()
  
  await startPreload({
    url: '/',
    preloadFn: async () => {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      await new Promise(resolve => setTimeout(resolve, 1000))
      return { test: 'data' }
    },
    message: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞...',
    showProgress: true
  })
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (process.client) {
  (window as any).testPreloader = testPreloader
  (window as any).testCodifierPreload = async () => {
    await preloadPage.codifier('cardiology')
  }
  (window as any).checkPreloaderState = () => {
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', {
      isPreloading: isPreloading.value,
      progress: preloadProgress.value,
      message: preloadMessage.value,
      cacheSize: preloadCache.size
    })
  }
}
