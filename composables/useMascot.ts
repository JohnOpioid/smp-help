export interface MascotPhrase {
  text: string
  type: 'greeting' | 'help' | 'encouragement' | 'random'
  priority: number
}

export interface MascotConfig {
  autoSpeak: boolean
  followCursor: boolean
  blinkInterval: number
  speechInterval: number
  phrases: MascotPhrase[]
}

export const useMascot = () => {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaultConfig: MascotConfig = {
    autoSpeak: true,
    followCursor: true,
    blinkInterval: 3000,
    speechInterval: 30000,
    phrases: [
      { text: '–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! üòä', type: 'greeting', priority: 1 },
      { text: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–∏—Å–∫–æ–º?', type: 'help', priority: 2 },
      { text: '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!', type: 'help', priority: 2 },
      { text: '–Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! üíô', type: 'help', priority: 1 },
      { text: '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–≤–∞–π—Ç–µ!', type: 'help', priority: 2 },
      { text: '–†–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å!', type: 'greeting', priority: 2 },
      { text: '–í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ! ‚ú®', type: 'encouragement', priority: 1 },
      { text: '–ú–µ–¥–∏—Ü–∏–Ω–∞ - —ç—Ç–æ –≤–∞–∂–Ω–æ!', type: 'random', priority: 3 },
      { text: '–ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è! üí™', type: 'encouragement', priority: 2 },
      { text: '–Ø —Ä—è–¥–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!', type: 'help', priority: 1 },
      { text: '–ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', type: 'greeting', priority: 2 },
      { text: '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ! üè•', type: 'encouragement', priority: 2 },
      { text: '–†–∞–±–æ—Ç–∞–µ–º –≤–º–µ—Å—Ç–µ! ü§ù', type: 'encouragement', priority: 1 },
      { text: '–í—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üí™', type: 'encouragement', priority: 1 },
      { text: '–î–µ—Ä–∂–∏—Ç–µ—Å—å! –Ø —Å –≤–∞–º–∏! üíô', type: 'encouragement', priority: 1 }
    ]
  }

  // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const config = ref<MascotConfig>({ ...defaultConfig })
  const isVisible = ref(true)
  const isActive = ref(false)
  const currentPhrase = ref('')
  const lastInteraction = ref<Date | null>(null)

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = ref({
    totalInteractions: 0,
    phrasesShown: 0,
    clicks: 0,
    hovers: 0,
    lastActivity: ''
  })

  // –ú–µ—Ç–æ–¥—ã
  const updateConfig = (newConfig: Partial<MascotConfig>) => {
    config.value = { ...config.value, ...newConfig }
  }

  const showPhrase = (phrase: string, duration = 4000) => {
    if (currentPhrase.value) return false
    
    currentPhrase.value = phrase
    stats.value.phrasesShown++
    stats.value.lastActivity = `–§—Ä–∞–∑–∞: "${phrase}" –≤ ${new Date().toLocaleTimeString()}`
    
    setTimeout(() => {
      currentPhrase.value = ''
    }, duration)
    
    return true
  }

  const speakRandomPhrase = (type?: MascotPhrase['type']) => {
    const availablePhrases = type 
      ? config.value.phrases.filter(p => p.type === type)
      : config.value.phrases
    
    if (availablePhrases.length === 0) return false
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    const sortedPhrases = availablePhrases.sort((a, b) => a.priority - b.priority)
    const randomPhrase = sortedPhrases[Math.floor(Math.random() * Math.min(3, sortedPhrases.length))]
    
    return showPhrase(randomPhrase.text)
  }

  const speakGreeting = () => {
    return speakRandomPhrase('greeting')
  }

  const speakHelp = () => {
    return speakRandomPhrase('help')
  }

  const speakEncouragement = () => {
    return speakRandomPhrase('encouragement')
  }

  const recordInteraction = (type: 'click' | 'hover') => {
    stats.value.totalInteractions++
    stats.value[type === 'click' ? 'clicks' : 'hovers']++
    lastInteraction.value = new Date()
    stats.value.lastActivity = `${type === 'click' ? '–ö–ª–∏–∫' : '–ù–∞–≤–µ–¥–µ–Ω–∏–µ'} –≤ ${new Date().toLocaleTimeString()}`
  }

  const showActivity = () => {
    isActive.value = true
    setTimeout(() => {
      isActive.value = false
    }, 2000)
  }

  const hide = () => {
    isVisible.value = false
  }

  const show = () => {
    isVisible.value = true
  }

  const toggle = () => {
    isVisible.value = !isVisible.value
  }

  const resetStats = () => {
    stats.value = {
      totalInteractions: 0,
      phrasesShown: 0,
      clicks: 0,
      hovers: 0,
      lastActivity: ''
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏
  const startAutoSpeak = () => {
    if (!config.value.autoSpeak) return
    
    const scheduleNext = () => {
      const intervals = [15000, 25000, 35000, 45000] // 15-45 —Å–µ–∫—É–Ω–¥
      const randomInterval = intervals[Math.floor(Math.random() * intervals.length)]
      
      setTimeout(() => {
        if (!currentPhrase.value && isVisible.value) {
          speakRandomPhrase()
        }
        scheduleNext()
      }, randomInterval)
    }
    
    // –ü–µ—Ä–≤–∞—è —Ä–µ–ø–ª–∏–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (isVisible.value) {
        speakGreeting()
      }
      scheduleNext()
    }, 5000)
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const init = () => {
    startAutoSpeak()
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    config: readonly(config),
    isVisible: readonly(isVisible),
    isActive: readonly(isActive),
    currentPhrase: readonly(currentPhrase),
    lastInteraction: readonly(lastInteraction),
    stats: readonly(stats),
    
    // –ú–µ—Ç–æ–¥—ã
    updateConfig,
    showPhrase,
    speakRandomPhrase,
    speakGreeting,
    speakHelp,
    speakEncouragement,
    recordInteraction,
    showActivity,
    hide,
    show,
    toggle,
    resetStats,
    init
  }
}

