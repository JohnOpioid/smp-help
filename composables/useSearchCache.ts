/**
 * Composable –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∏—Å–∫–æ–≤
 */

export interface CachedSearchData {
  data: any[]
  timestamp: number
  version: string
  totalItems: number
}

export interface CacheStats {
  hits: number
  misses: number
  lastUpdated: number
  cacheSize: number
}

const CACHE_KEY = 'smp_search_cache'
const CACHE_VERSION = '1.0.0'
const CACHE_EXPIRY = 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const STATS_KEY = 'smp_search_cache_stats'

export const useSearchCache = () => {
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
  const getCacheStats = (): CacheStats => {
    if (!process.client) {
      return { hits: 0, misses: 0, lastUpdated: 0, cacheSize: 0 }
    }
    
    try {
      const stats = localStorage.getItem(STATS_KEY)
      return stats ? JSON.parse(stats) : { hits: 0, misses: 0, lastUpdated: 0, cacheSize: 0 }
    } catch {
      return { hits: 0, misses: 0, lastUpdated: 0, cacheSize: 0 }
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
  const updateCacheStats = (isHit: boolean) => {
    if (!process.client) return
    
    try {
      const stats = getCacheStats()
      if (isHit) {
        stats.hits++
      } else {
        stats.misses++
      }
      stats.lastUpdated = Date.now()
      
      localStorage.setItem(STATS_KEY, JSON.stringify(stats))
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞:', error)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ –∫–µ—à
  const isCacheValid = (cachedData: CachedSearchData): boolean => {
    if (!cachedData) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫–µ—à–∞
    if (cachedData.version !== CACHE_VERSION) {
      console.log('üîÑ –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª –ø–æ –≤–µ—Ä—Å–∏–∏')
      return false
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const now = Date.now()
    const cacheAge = now - cachedData.timestamp
    
    if (cacheAge > CACHE_EXPIRY) {
      console.log('üîÑ –ö–µ—à –∏—Å—Ç–µ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
      return false
    }
    
    return true
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
  const getCachedData = (): CachedSearchData | null => {
    if (!process.client) return null
    
    try {
      const cached = localStorage.getItem(CACHE_KEY)
      if (!cached) {
        console.log('üì≠ –ö–µ—à –ø—É—Å—Ç')
        updateCacheStats(false)
        return null
      }
      
      const cachedData: CachedSearchData = JSON.parse(cached)
      
      if (!isCacheValid(cachedData)) {
        console.log('üîÑ –ö–µ—à –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º')
        clearCache()
        updateCacheStats(false)
        return null
      }
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞')
      updateCacheStats(true)
      return cachedData
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–µ—à–∞:', error)
      updateCacheStats(false)
      return null
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
  const setCachedData = (data: any[], totalItems: number) => {
    if (!process.client) return
    
    try {
      const cachedData: CachedSearchData = {
        data,
        timestamp: Date.now(),
        version: CACHE_VERSION,
        totalItems
      }
      
      localStorage.setItem(CACHE_KEY, JSON.stringify(cachedData))
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      const stats = getCacheStats()
      stats.cacheSize = JSON.stringify(cachedData).length
      localStorage.setItem(STATS_KEY, JSON.stringify(stats))
      
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à')
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫–µ—à:', error)
    }
  }

  // –û—á–∏—â–∞–µ–º –∫–µ—à
  const clearCache = () => {
    if (!process.client) return
    
    try {
      localStorage.removeItem(CACHE_KEY)
      console.log('üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω')
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:', error)
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–µ
  const getCacheInfo = () => {
    if (!process.client) {
      return {
        isAvailable: false,
        stats: getCacheStats(),
        cachedData: null
      }
    }
    
    const cachedData = getCachedData()
    const stats = getCacheStats()
    
    return {
      isAvailable: true,
      stats,
      cachedData,
      hitRate: stats.hits + stats.misses > 0 ? (stats.hits / (stats.hits + stats.misses) * 100).toFixed(1) : '0.0'
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
  const refreshCache = async () => {
    if (!process.client) return null
    
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞...')
    
    try {
      const response = await $fetch('/api/search/all-data')
      
      if (response.success && response.data) {
        setCachedData(response.data, response.totalItems)
        return response.data
      }
      
      return null
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞:', error)
      return null
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const getSearchData = async (forceRefresh = false) => {
    if (!process.client) return null
    
    // –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
    if (forceRefresh) {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
      return await refreshCache()
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
    const cachedData = getCachedData()
    if (cachedData) {
      return cachedData.data
    }
    
    // –ï—Å–ª–∏ –∫–µ—à –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
    console.log('üåê –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...')
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      const isAndroidApp = process.client && window.Capacitor && window.Capacitor.isNativePlatform()
      console.log('üì± Android app detected:', isAndroidApp)
      
      const response = await $fetch('/api/search/all-data')
      
      if (response.success && response.data) {
        setCachedData(response.data, response.totalItems)
        return response.data
      }
      
      return null
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error)
      
      // Fallback –¥–ª—è Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ endpoints
      if (process.client && window.Capacitor && window.Capacitor.isNativePlatform()) {
        console.log('üì± Android fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ API endpoints...')
        try {
          const [mkbData, lsResults, algoResults, drugResults, substationResults] = await Promise.all([
            $fetch('/api/mkb/all').catch(() => ({ success: true, items: [] })),
            $fetch('/api/local-statuses/all').catch(() => ({ success: true, items: [] })),
            $fetch('/api/algorithms/all').catch(() => ({ success: true, items: [] })),
            $fetch('/api/drugs/all').catch(() => ({ success: true, items: [] })),
            $fetch('/api/substations/all').catch(() => ({ success: true, items: [] }))
          ])

          // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fallback endpoints
          const allItems = []

          if (mkbData?.success && 'items' in mkbData && Array.isArray((mkbData as any).items)) {
            allItems.push(...(mkbData as any).items.map((item: any) => ({ ...item, type: 'mkb' })))
          }
          if (lsResults?.success && 'items' in lsResults && Array.isArray((lsResults as any).items)) {
            allItems.push(...(lsResults as any).items.map((item: any) => ({ ...item, type: 'ls' })))
          }
          if (algoResults?.success && 'items' in algoResults && Array.isArray((algoResults as any).items)) {
            allItems.push(...(algoResults as any).items.map((item: any) => ({ ...item, type: 'algorithm' })))
          }
          if (drugResults?.success && 'items' in drugResults && Array.isArray((drugResults as any).items)) {
            allItems.push(...(drugResults as any).items.map((item: any) => ({ ...item, type: 'drug' })))
          }
          if (substationResults?.success && 'items' in substationResults && Array.isArray((substationResults as any).items)) {
            allItems.push(...(substationResults as any).items.map((item: any) => ({ ...item, type: 'substation' })))
          }

          console.log('üì± Android fallback –∑–∞–≥—Ä—É–∂–µ–Ω:', allItems.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤')
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
          if (allItems.length > 0) {
            setCachedData(allItems, allItems.length)
            return allItems
          }
        } catch (fallbackError) {
          console.error('‚ùå Android fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', fallbackError)
        }
      }
      
      return null
    }
  }

  return {
    getCachedData,
    setCachedData,
    clearCache,
    getCacheInfo,
    refreshCache,
    getSearchData,
    getCacheStats,
    updateCacheStats
  }
}

