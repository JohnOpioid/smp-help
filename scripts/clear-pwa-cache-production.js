#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ PWA –∫—ç—à–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/clear-pwa-cache-production.js
 */

const fs = require('fs');
const path = require('path');

console.log('üßπ –û—á–∏—Å—Ç–∫–∞ PWA –∫—ç—à–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ...');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∫—ç—à–∞
const cachePaths = [
  '.nuxt/dist/client/sw.js',
  '.nuxt/dist/client/workbox-*.js',
  '.nuxt/dist/client/manifest.webmanifest',
  '.output/public/sw.js',
  '.output/public/workbox-*.js',
  '.output/public/manifest.webmanifest',
  'dist/sw.js',
  'dist/workbox-*.js',
  'dist/manifest.webmanifest'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
function removeFilesByPattern(pattern) {
  try {
    const dir = path.dirname(pattern);
    const filename = path.basename(pattern);
    
    if (fs.existsSync(dir)) {
      const files = fs.readdirSync(dir);
      const regex = new RegExp(filename.replace(/\*/g, '.*'));
      
      files.forEach(file => {
        if (regex.test(file)) {
          const filePath = path.join(dir, file);
          try {
            fs.unlinkSync(filePath);
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${filePath}`);
          } catch (err) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${filePath} - ${err.message}`);
          }
        }
      });
    }
  } catch (err) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ${pattern}: ${err.message}`);
  }
}

// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∫—ç—à–∞
cachePaths.forEach(pattern => {
  removeFilesByPattern(pattern);
});

// –û—á–∏—â–∞–µ–º –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞:');
console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ DevTools (F12)');
console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Application > Storage');
console.log('3. –ù–∞–∂–º–∏—Ç–µ "Clear storage"');
console.log('4. –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏:');
console.log('   navigator.serviceWorker.getRegistrations().then(registrations => {');
console.log('     registrations.forEach(registration => registration.unregister());');
console.log('   });');
console.log('   caches.keys().then(names => {');
console.log('     names.forEach(name => caches.delete(name));');
console.log('   });');

console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ PWA –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
