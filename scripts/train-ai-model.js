const mongoose = require('mongoose')
const connectDB = require('../server/utils/mongodb')
const Feedback = require('../server/models/Feedback')
const MKB = require('../server/models/MKB')
const LocalStatus = require('../server/models/LocalStatus')
const Algorithm = require('../server/models/Algorithm')
const Drug = require('../server/models/Drug')

// –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
class AITrainer {
  constructor() {
    this.trainingData = []
    this.intentPatterns = new Map()
    this.sectionWeights = new Map()
    this.queryExpansions = new Map()
  }

  // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  async collectTrainingData() {
    console.log('üìä –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const feedbacks = await Feedback.find({})
      .sort({ createdAt: -1 })
      .limit(1000)
      .lean()

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${feedbacks.length} –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏`)

    for (const feedback of feedbacks) {
      if (feedback.rating === 'positive' && feedback.searchResults?.length > 0) {
        // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - —É—á–∏–º—Å—è –Ω–∞ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        this.trainingData.push({
          query: feedback.question,
          results: feedback.searchResults,
          intent: this.extractIntent(feedback.question),
          success: true,
          timestamp: feedback.createdAt
        })
      } else if (feedback.rating === 'negative') {
        // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - —É—á–∏–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö
        this.trainingData.push({
          query: feedback.question,
          results: feedback.searchResults || [],
          intent: this.extractIntent(feedback.question),
          success: false,
          timestamp: feedback.createdAt
        })
      }
    }

    console.log(`–°–æ–±—Ä–∞–Ω–æ ${this.trainingData.length} –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è`)
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  extractIntent(query) {
    const q = query.toLowerCase()
    
    // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    const intentPatterns = {
      'ls': ['–ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å', '—Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª–∏—Å', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è', '–æ–∂–æ–≥', '—Ä–∞–Ω–∞', '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ'],
      'algo': ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø—Ä–æ—Ç–æ–∫–æ–ª', '—Ç–∞–∫—Ç–∏–∫–∞', '–ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–ª–µ—á–µ–Ω–∏–µ'],
      'mkb': ['–º–∫–±', '–∫–æ–¥', '–¥–∏–∞–≥–Ω–æ–∑', '–∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä'],
      'drug': ['–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '–¥–æ–∑–∏—Ä–æ–≤–∫–∞', '–º–≥/–∫–≥', '–º–≥', '–º–ª']
    }

    for (const [intent, patterns] of Object.entries(intentPatterns)) {
      if (patterns.some(pattern => q.includes(pattern))) {
        return intent
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∏—Å–ª–æ–≤—ã–º –∫–æ–¥–∞–º
    if (/^\d{4}$/.test(query.trim())) return 'mkb' // –ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏
    if (/^[A-Z]\d{2}(\.\d+)?$/i.test(query.trim())) return 'mkb' // –ú–ö–ë –∫–æ–¥

    return 'general'
  }

  // –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  async trainIntentPatterns() {
    console.log('üß† –û–±—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π...')
    
    const intentStats = new Map()
    
    for (const data of this.trainingData) {
      const intent = data.intent
      if (!intentStats.has(intent)) {
        intentStats.set(intent, { count: 0, successRate: 0, queries: [] })
      }
      
      const stats = intentStats.get(intent)
      stats.count++
      stats.queries.push(data.query)
      
      if (data.success) {
        stats.successRate++
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–º–µ—Ä–µ–Ω–∏–π
    for (const [intent, stats] of intentStats) {
      stats.successRate = stats.successRate / stats.count
      this.intentPatterns.set(intent, stats)
      
      console.log(`–ù–∞–º–µ—Ä–µ–Ω–∏–µ "${intent}": ${stats.count} –∑–∞–ø—Ä–æ—Å–æ–≤, —É—Å–ø–µ—à–Ω–æ—Å—Ç—å ${(stats.successRate * 100).toFixed(1)}%`)
    }
  }

  // –û–±—É—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
  async trainSectionWeights() {
    console.log('‚öñÔ∏è –û–±—É—á–∞–µ–º –≤–µ—Å–∞ —Ä–∞–∑–¥–µ–ª–æ–≤...')
    
    const sectionStats = new Map()
    
    for (const data of this.trainingData) {
      if (!data.success) continue
      
      for (const result of data.results) {
        const section = result.type
        if (!sectionStats.has(section)) {
          sectionStats.set(section, { count: 0, queries: [] })
        }
        
        const stats = sectionStats.get(section)
        stats.count++
        stats.queries.push(data.query)
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const totalResults = Array.from(sectionStats.values()).reduce((sum, stats) => sum + stats.count, 0)
    
    for (const [section, stats] of sectionStats) {
      const weight = stats.count / totalResults
      this.sectionWeights.set(section, weight)
      
      console.log(`–†–∞–∑–¥–µ–ª "${section}": –≤–µ—Å ${weight.toFixed(3)}, ${stats.count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`)
    }
  }

  // –û–±—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤
  async trainQueryExpansions() {
    console.log('üîç –û–±—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤...')
    
    const expansionStats = new Map()
    
    for (const data of this.trainingData) {
      if (!data.success) continue
      
      const query = data.query.toLowerCase()
      const words = query.split(/\s+/).filter(w => w.length > 2)
      
      for (const word of words) {
        if (!expansionStats.has(word)) {
          expansionStats.set(word, new Set())
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for (const result of data.results) {
          const resultText = (result.title + ' ' + (result.description || '')).toLowerCase()
          const resultWords = resultText.split(/\s+/).filter(w => w.length > 2)
          
          for (const resultWord of resultWords) {
            if (resultWord !== word) {
              expansionStats.get(word).add(resultWord)
            }
          }
        }
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    for (const [word, expansions] of expansionStats) {
      if (expansions.size > 0) {
        this.queryExpansions.set(word, Array.from(expansions).slice(0, 5)) // –¢–æ–ø-5 —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
      }
    }

    console.log(`–°–æ–∑–¥–∞–Ω–æ ${this.queryExpansions.size} —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤`)
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async generateTrainingData() {
    console.log('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...')
    
    const trainingExamples = []
    
    // –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ú–ö–ë
    const mkbSamples = await MKB.find({}).limit(100).lean()
    for (const mkb of mkbSamples) {
      trainingExamples.push({
        query: mkb.stationCode || mkb.mkbCode || mkb.name,
        expectedIntent: 'mkb',
        expectedResults: [mkb],
        type: 'mkb'
      })
    }

    // –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    const algoSamples = await Algorithm.find({}).limit(100).lean()
    for (const algo of algoSamples) {
      const keywords = this.extractKeywords(algo.title + ' ' + (algo.description || ''))
      trainingExamples.push({
        query: keywords[0] || algo.title,
        expectedIntent: 'algo',
        expectedResults: [algo],
        type: 'algorithm'
      })
    }

    // –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
    const drugSamples = await Drug.find({}).limit(100).lean()
    for (const drug of drugSamples) {
      trainingExamples.push({
        query: drug.name,
        expectedIntent: 'drug',
        expectedResults: [drug],
        type: 'drug'
      })
    }

    console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${trainingExamples.length} –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤`)
    return trainingExamples
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  extractKeywords(text) {
    return text.toLowerCase()
      .replace(/[^\p{L}\s]/gu, ' ')
      .split(/\s+/)
      .filter(word => word.length > 3)
      .filter(word => !['–±–æ–ª–µ–∑–Ω—å', '–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ', '—Å–∏–Ω–¥—Ä–æ–º', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ'].includes(word))
      .slice(0, 3)
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
  async saveModel() {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å...')
    
    const model = {
      intentPatterns: Object.fromEntries(this.intentPatterns),
      sectionWeights: Object.fromEntries(this.sectionWeights),
      queryExpansions: Object.fromEntries(this.queryExpansions),
      trainingData: this.trainingData.slice(0, 100), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø—Ä–∏–º–µ—Ä–æ–≤
      trainedAt: new Date(),
      version: '1.0'
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const fs = require('fs')
    const path = require('path')
    const modelPath = path.join(__dirname, '../data/ai-model.json')
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(modelPath)
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true })
    }
    
    fs.writeFileSync(modelPath, JSON.stringify(model, null, 2))
    console.log(`–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${modelPath}`)
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
  async loadModel() {
    const fs = require('fs')
    const path = require('path')
    const modelPath = path.join(__dirname, '../data/ai-model.json')
    
    if (fs.existsSync(modelPath)) {
      const model = JSON.parse(fs.readFileSync(modelPath, 'utf8'))
      
      this.intentPatterns = new Map(Object.entries(model.intentPatterns))
      this.sectionWeights = new Map(Object.entries(model.sectionWeights))
      this.queryExpansions = new Map(Object.entries(model.queryExpansions))
      
      console.log(`–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ ${modelPath}`)
      console.log(`–í–µ—Ä—Å–∏—è: ${model.version}, –æ–±—É—á–µ–Ω–∞: ${model.trainedAt}`)
      return true
    }
    
    return false
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
  async train() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...')
    
    try {
      await connectDB()
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
      const modelLoaded = await this.loadModel()
      
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      await this.collectTrainingData()
      
      // –û–±—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      await this.trainIntentPatterns()
      await this.trainSectionWeights()
      await this.trainQueryExpansions()
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
      await this.saveModel()
      
      console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
      
      // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:')
      console.log(`- –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π: ${this.intentPatterns.size}`)
      console.log(`- –í–µ—Å–∞ —Ä–∞–∑–¥–µ–ª–æ–≤: ${this.sectionWeights.size}`)
      console.log(`- –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.queryExpansions.size}`)
      console.log(`- –û–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${this.trainingData.length}`)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏:', error)
    } finally {
      await mongoose.disconnect()
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
if (require.main === module) {
  const trainer = new AITrainer()
  trainer.train()
}

module.exports = AITrainer
