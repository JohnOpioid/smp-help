const mongoose = require('mongoose')

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/smp-help')
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error)
    process.exit(1)
  }
}

// –°—Ö–µ–º–∞ Feedback
const feedbackSchema = new mongoose.Schema({
  originalQuery: String,
  aiResponse: String,
  searchResults: [mongoose.Schema.Types.Mixed],
  userIdentifier: String,
  userFeedback: String,
  aiAnalysis: {
    issues: [String],
    improvements: [String],
    intent: String,
    confidence: Number
  },
  status: {
    type: String,
    enum: ['pending', 'analyzed', 'learned'],
    default: 'pending'
  },
  timestamp: {
    type: Date,
    default: Date.now
  },
  learningData: {
    correctIntent: String,
    correctResults: [mongoose.Schema.Types.Mixed],
    keywords: [String],
    context: String
  }
}, {
  timestamps: true
})

const Feedback = mongoose.models.Feedback || mongoose.model('Feedback', feedbackSchema)

async function checkFeedbackData() {
  await connectDB()
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const feedbacks = await Feedback.find({}).sort({ createdAt: -1 }).limit(10)
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${feedbacks.length}`)
    console.log('=' * 80)
    
    feedbacks.forEach((feedback, index) => {
      console.log(`\n${index + 1}. ID: ${feedback._id}`)
      console.log(`   –°—Ç–∞—Ç—É—Å: ${feedback.status}`)
      console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${feedback.createdAt}`)
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${feedback.userIdentifier}`)
      console.log(`   –ó–∞–ø—Ä–æ—Å: ${feedback.originalQuery?.substring(0, 100)}...`)
      console.log(`   –û—Ç–≤–µ—Ç –ò–ò: ${feedback.aiResponse?.substring(0, 100)}...`)
      console.log(`   –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: ${feedback.userFeedback}`)
      
      if (feedback.aiAnalysis) {
        console.log(`   –ê–Ω–∞–ª–∏–∑ –ò–ò:`)
        console.log(`     - –ù–∞–º–µ—Ä–µ–Ω–∏–µ: ${feedback.aiAnalysis.intent}`)
        console.log(`     - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${feedback.aiAnalysis.confidence}`)
        console.log(`     - –ü—Ä–æ–±–ª–µ–º—ã: ${feedback.aiAnalysis.issues?.join(', ') || '–Ω–µ—Ç'}`)
        console.log(`     - –£–ª—É—á—à–µ–Ω–∏—è: ${feedback.aiAnalysis.improvements?.join(', ') || '–Ω–µ—Ç'}`)
      }
      
      if (feedback.learningData) {
        console.log(`   –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:`)
        console.log(`     - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: ${feedback.learningData.correctIntent}`)
        console.log(`     - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${feedback.learningData.keywords?.join(', ') || '–Ω–µ—Ç'}`)
        console.log(`     - –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${feedback.learningData.context?.substring(0, 100)}...`)
      }
      
      console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ${feedback.searchResults?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
    })
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const stats = await Feedback.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ])
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:')
    stats.forEach(stat => {
      console.log(`   ${stat._id}: ${stat.count} –∑–∞–ø–∏—Å–µ–π`)
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
  } finally {
    await mongoose.disconnect()
    console.log('\n‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB')
  }
}

checkFeedbackData()
