#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ò–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 */

const { MongoClient } = require('mongodb')

async function testFeedbackSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ò–ò...\n')

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    const client = new MongoClient(process.env.MONGODB_URI || 'mongodb://localhost:27017/smp-help')
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ')

    const db = client.db('smp-help')
    const feedbackCollection = db.collection('feedbacks')

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    console.log('\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')
    const testFeedback = {
      originalQuery: '2151',
      aiResponse: '–ù–∞–π–¥–µ–Ω–æ –ø–æ –ú–ö–ë: –ì–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏–≤–Ω–∞—è –±–æ–ª–µ–∑–Ω—å —Å–µ—Ä–¥—Ü–∞',
      searchResults: [
        { type: 'mkb', title: '–ì–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏–≤–Ω–∞—è –±–æ–ª–µ–∑–Ω—å —Å–µ—Ä–¥—Ü–∞', mkbCode: 'I11' }
      ],
      userIdentifier: 'test-user',
      userFeedback: '–ù–µ –ø–æ–∫–∞–∑–∞–ª –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –ª–µ—á–µ–Ω–∏—è',
      aiAnalysis: {
        issues: ['–ù–µ–ø–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤'],
        improvements: ['–î–æ–±–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤'],
        intent: 'drug',
        confidence: 0.8
      },
      status: 'learned',
      learningData: {
        correctIntent: 'drug',
        correctResults: [
          { type: 'drug', title: '–ú–æ–∫—Å–æ–Ω–∏–¥–∏–Ω', dosage: '0,2 –º–≥' },
          { type: 'drug', title: '–ö–∞–ø—Ç–æ–ø—Ä–∏–ª', dosage: '12,5-25 –º–≥' }
        ],
        keywords: ['2151', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–ª–µ—á–µ–Ω–∏–µ'],
        context: '–ù—É–∂–Ω—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –ª–µ—á–µ–Ω–∏—è –≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏–∏'
      },
      timestamp: new Date()
    }

    const insertResult = await feedbackCollection.insertOne(testFeedback)
    console.log('‚úÖ –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å–æ–∑–¥–∞–Ω–∞:', insertResult.insertedId)

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤')
    const similarFeedback = await feedbackCollection.find({
      status: 'learned',
      $or: [
        { 'learningData.keywords': { $in: ['2151'] } },
        { 'aiAnalysis.intent': 'drug' }
      ]
    })
    .sort({ timestamp: -1 })
    .limit(3)
    .toArray()

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø–∏—Å–µ–π:', similarFeedback.length)
    similarFeedback.forEach((fb, index) => {
      console.log(`   ${index + 1}. ${fb.originalQuery} -> ${fb.aiAnalysis.intent}`)
    })

    // –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º
    console.log('\nüìä –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º')
    const intentStats = await feedbackCollection.aggregate([
      { $group: { _id: '$aiAnalysis.intent', count: { $sum: 1 } } },
      { $sort: { count: -1 } }
    ]).toArray()

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π:')
    intentStats.forEach(stat => {
      console.log(`   ${stat._id}: ${stat.count} –∑–∞–ø–∏—Å–µ–π`)
    })

    // –¢–µ—Å—Ç 4: –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\n‚ö†Ô∏è –¢–µ—Å—Ç 4: –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã')
    const issueStats = await feedbackCollection.aggregate([
      { $unwind: '$aiAnalysis.issues' },
      { $group: { _id: '$aiAnalysis.issues', count: { $sum: 1 } } },
      { $sort: { count: -1 } }
    ]).toArray()

    console.log('‚úÖ –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:')
    issueStats.forEach(issue => {
      console.log(`   ${issue._id}: ${issue.count} —Ä–∞–∑`)
    })

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    console.log('\nüåê –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints')
    
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const dislikeRequest = {
      action: 'dislike',
      messageId: 'test-message-123',
      originalQuery: '2151',
      aiResponse: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç',
      searchResults: [],
      userIdentifier: 'test-user'
    }
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–∏–∑–ª–∞–π–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω:', dislikeRequest.action)

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const submitRequest = {
      action: 'submit_feedback',
      messageId: insertResult.insertedId,
      userFeedback: '–¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
      userIdentifier: 'test-user'
    }
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω:', submitRequest.action)

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    const learnRequest = {
      action: 'learn',
      messageId: insertResult.insertedId,
      userIdentifier: 'test-user'
    }
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω:', learnRequest.action)

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    await feedbackCollection.deleteOne({ _id: insertResult.insertedId })
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
    console.log('   ‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    console.log('   ‚úÖ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    console.log('   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    console.log('   ‚úÖ API endpoints –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
    process.exit(1)
  } finally {
    await client.close()
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testFeedbackSystem()
    .then(() => {
      console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}

module.exports = { testFeedbackSystem }
