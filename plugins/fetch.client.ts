// plugins/fetch.client.ts
export default defineNuxtPlugin(() => {
  const runtimeConfig = useRuntimeConfig()
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
  const getApiUrl = () => {
    if (process.client) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º hostname –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—ã
      const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'
      
      if (isLocalhost) {
        // Localhost (Capacitor) - –∏—Å–ø–æ–ª—å–∑—É–µ–º IP —Ö–æ—Å—Ç–∞ —Å HTTP
        return 'http://192.168.1.40:3000'
      } else {
        // –ü—Ä–æ–¥–∞–∫—à–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º helpsmp.ru
        return 'https://helpsmp.ru'
      }
    }
    return runtimeConfig.public.apiUrl || '/api'
  }

  const apiUrl = getApiUrl()
  
  console.log('üîß Fetch plugin: API URL =', apiUrl)
  
  // –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
  const cache = new Map<string, { data: any, timestamp: number }>()
  const CACHE_DURATION = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è $fetch
  const globalThis = typeof window !== 'undefined' ? window : global
  const originalFetch = (globalThis as any).$fetch || $fetch
  
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º $fetch, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  ;(globalThis as any).$fetch = (url: string, options?: any) => {
    // –ï—Å–ª–∏ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /api, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
    if (typeof url === 'string' && url.startsWith('/api')) {
      const fullUrl = `${apiUrl}${url}`
      
      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
      if (!options || options.method === 'GET' || !options.method) {
        const cacheKey = `${fullUrl}${options?.query ? JSON.stringify(options.query) : ''}`
        const cached = cache.get(cacheKey)
        
        if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
          console.log(`üíæ Cache hit: ${url}`)
          return Promise.resolve(cached.data)
        }
        
        console.log(`üì° Fetch: ${url} -> ${fullUrl}`)
        
        return originalFetch(fullUrl, options).then((data: any) => {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
          cache.set(cacheKey, { data, timestamp: Date.now() })
          return data
        })
      }
      
      console.log(`üì° Fetch: ${url} -> ${fullUrl}`)
      return originalFetch(fullUrl, options)
    }
    return originalFetch(url, options)
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (process.client) {
    const clearCache = () => {
      cache.clear()
      console.log('üßπ Cache cleared')
    }
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(clearCache, 10 * 60 * 1000)
  }
})

